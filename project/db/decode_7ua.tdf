--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone IV E" LPM_DECODES=12 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 18.0 cbx_cycloneii 2018:04:24:18:04:18:SJ cbx_lpm_add_sub 2018:04:24:18:04:18:SJ cbx_lpm_compare 2018:04:24:18:04:18:SJ cbx_lpm_decode 2018:04:24:18:04:18:SJ cbx_mgl 2018:04:24:18:08:49:SJ cbx_nadder 2018:04:24:18:04:18:SJ cbx_stratix 2018:04:24:18:04:18:SJ cbx_stratixii 2018:04:24:18:04:18:SJ  VERSION_END


-- Copyright (C) 2018  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.



--synthesis_resources = lut 18 
SUBDESIGN decode_7ua
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[11..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[11..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode3169w[1..0]	: WIRE;
	w_anode3178w[3..0]	: WIRE;
	w_anode3195w[3..0]	: WIRE;
	w_anode3205w[3..0]	: WIRE;
	w_anode3215w[3..0]	: WIRE;
	w_anode3225w[3..0]	: WIRE;
	w_anode3235w[3..0]	: WIRE;
	w_anode3245w[3..0]	: WIRE;
	w_anode3255w[3..0]	: WIRE;
	w_anode3267w[1..0]	: WIRE;
	w_anode3274w[3..0]	: WIRE;
	w_anode3285w[3..0]	: WIRE;
	w_anode3295w[3..0]	: WIRE;
	w_anode3305w[3..0]	: WIRE;
	w_anode3315w[3..0]	: WIRE;
	w_anode3325w[3..0]	: WIRE;
	w_anode3335w[3..0]	: WIRE;
	w_anode3345w[3..0]	: WIRE;
	w_data3167w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[11..0] = eq_wire[11..0];
	eq_wire[] = ( ( w_anode3345w[3..3], w_anode3335w[3..3], w_anode3325w[3..3], w_anode3315w[3..3], w_anode3305w[3..3], w_anode3295w[3..3], w_anode3285w[3..3], w_anode3274w[3..3]), ( w_anode3255w[3..3], w_anode3245w[3..3], w_anode3235w[3..3], w_anode3225w[3..3], w_anode3215w[3..3], w_anode3205w[3..3], w_anode3195w[3..3], w_anode3178w[3..3]));
	w_anode3169w[] = ( (w_anode3169w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode3178w[] = ( (w_anode3178w[2..2] & (! w_data3167w[2..2])), (w_anode3178w[1..1] & (! w_data3167w[1..1])), (w_anode3178w[0..0] & (! w_data3167w[0..0])), w_anode3169w[1..1]);
	w_anode3195w[] = ( (w_anode3195w[2..2] & (! w_data3167w[2..2])), (w_anode3195w[1..1] & (! w_data3167w[1..1])), (w_anode3195w[0..0] & w_data3167w[0..0]), w_anode3169w[1..1]);
	w_anode3205w[] = ( (w_anode3205w[2..2] & (! w_data3167w[2..2])), (w_anode3205w[1..1] & w_data3167w[1..1]), (w_anode3205w[0..0] & (! w_data3167w[0..0])), w_anode3169w[1..1]);
	w_anode3215w[] = ( (w_anode3215w[2..2] & (! w_data3167w[2..2])), (w_anode3215w[1..1] & w_data3167w[1..1]), (w_anode3215w[0..0] & w_data3167w[0..0]), w_anode3169w[1..1]);
	w_anode3225w[] = ( (w_anode3225w[2..2] & w_data3167w[2..2]), (w_anode3225w[1..1] & (! w_data3167w[1..1])), (w_anode3225w[0..0] & (! w_data3167w[0..0])), w_anode3169w[1..1]);
	w_anode3235w[] = ( (w_anode3235w[2..2] & w_data3167w[2..2]), (w_anode3235w[1..1] & (! w_data3167w[1..1])), (w_anode3235w[0..0] & w_data3167w[0..0]), w_anode3169w[1..1]);
	w_anode3245w[] = ( (w_anode3245w[2..2] & w_data3167w[2..2]), (w_anode3245w[1..1] & w_data3167w[1..1]), (w_anode3245w[0..0] & (! w_data3167w[0..0])), w_anode3169w[1..1]);
	w_anode3255w[] = ( (w_anode3255w[2..2] & w_data3167w[2..2]), (w_anode3255w[1..1] & w_data3167w[1..1]), (w_anode3255w[0..0] & w_data3167w[0..0]), w_anode3169w[1..1]);
	w_anode3267w[] = ( (w_anode3267w[0..0] & data_wire[3..3]), enable_wire);
	w_anode3274w[] = ( (w_anode3274w[2..2] & (! w_data3167w[2..2])), (w_anode3274w[1..1] & (! w_data3167w[1..1])), (w_anode3274w[0..0] & (! w_data3167w[0..0])), w_anode3267w[1..1]);
	w_anode3285w[] = ( (w_anode3285w[2..2] & (! w_data3167w[2..2])), (w_anode3285w[1..1] & (! w_data3167w[1..1])), (w_anode3285w[0..0] & w_data3167w[0..0]), w_anode3267w[1..1]);
	w_anode3295w[] = ( (w_anode3295w[2..2] & (! w_data3167w[2..2])), (w_anode3295w[1..1] & w_data3167w[1..1]), (w_anode3295w[0..0] & (! w_data3167w[0..0])), w_anode3267w[1..1]);
	w_anode3305w[] = ( (w_anode3305w[2..2] & (! w_data3167w[2..2])), (w_anode3305w[1..1] & w_data3167w[1..1]), (w_anode3305w[0..0] & w_data3167w[0..0]), w_anode3267w[1..1]);
	w_anode3315w[] = ( (w_anode3315w[2..2] & w_data3167w[2..2]), (w_anode3315w[1..1] & (! w_data3167w[1..1])), (w_anode3315w[0..0] & (! w_data3167w[0..0])), w_anode3267w[1..1]);
	w_anode3325w[] = ( (w_anode3325w[2..2] & w_data3167w[2..2]), (w_anode3325w[1..1] & (! w_data3167w[1..1])), (w_anode3325w[0..0] & w_data3167w[0..0]), w_anode3267w[1..1]);
	w_anode3335w[] = ( (w_anode3335w[2..2] & w_data3167w[2..2]), (w_anode3335w[1..1] & w_data3167w[1..1]), (w_anode3335w[0..0] & (! w_data3167w[0..0])), w_anode3267w[1..1]);
	w_anode3345w[] = ( (w_anode3345w[2..2] & w_data3167w[2..2]), (w_anode3345w[1..1] & w_data3167w[1..1]), (w_anode3345w[0..0] & w_data3167w[0..0]), w_anode3267w[1..1]);
	w_data3167w[2..0] = data_wire[2..0];
END;
--VALID FILE
