
Hello.elf:     file format elf32-littlenios2
Hello.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000244

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x000096b8 memsz 0x000096b8 flags r-x
    LOAD off    0x0000a6d8 vaddr 0x080096d8 paddr 0x0800b170 align 2**12
         filesz 0x00001a98 memsz 0x00001a98 flags rw-
    LOAD off    0x0000cc08 vaddr 0x0800cc08 paddr 0x0800cc08 align 2**12
         filesz 0x00000000 memsz 0x00000174 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000089d4  08000244  08000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000ac0  08008c18  08008c18  00009c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a98  080096d8  0800b170  0000a6d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000174  0800cc08  0800cc08  0000cc08  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0800cd7c  0800cd7c  0000c170  2**0
                  CONTENTS
  7 .bufferram_out 00000000  10200000  10200000  0000c170  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0000c170  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000ff0  00000000  00000000  0000c198  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000240be  00000000  00000000  0000d188  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000a560  00000000  00000000  00031246  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b95b  00000000  00000000  0003b7a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002544  00000000  00000000  00047104  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00005d90  00000000  00000000  00049648  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000911a  00000000  00000000  0004f3d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  000584f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000ed0  00000000  00000000  00058528  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0005d9d2  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0005d9d5  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0005d9e1  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0005d9e2  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0005d9e3  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0005d9e7  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0005d9eb  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0005d9ef  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0005d9fa  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0005da05  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000006  00000000  00000000  0005da10  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000003c  00000000  00000000  0005da16  2**0
                  CONTENTS, READONLY
 30 .jdi          0000585f  00000000  00000000  0005da52  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00042fd6  00000000  00000000  000632b1  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000244 l    d  .text	00000000 .text
08008c18 l    d  .rodata	00000000 .rodata
080096d8 l    d  .rwdata	00000000 .rwdata
0800cc08 l    d  .bss	00000000 .bss
0800cd7c l    d  .sdram	00000000 .sdram
10200000 l    d  .bufferram_out	00000000 .bufferram_out
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Hello_bsp//obj/HAL/src/crt0.o
0800028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.cpp
00000000 l    df *ABS*	00000000 cgrom.cpp
00000000 l    df *ABS*	00000000 chout.cpp
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 eh_personality.cc
080009a8 l     F .text	000000a4 _ZL21size_of_encoded_valueh
08000a4c l     F .text	0000020c _ZL28read_encoded_value_with_basehjPKhPj
08000c58 l     F .text	00000054 _ZL15get_ttype_entryP16lsda_header_infom
08000cac l     F .text	0000008c _ZL21base_of_encoded_valuehP15_Unwind_Context
08000d38 l     F .text	00000134 _ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
08000e6c l     F .text	00000088 _ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3
08000ef4 l     F .text	000001c0 _ZL28check_compact_exception_specPKSt9type_infoPvPKhij
080010b4 l     F .text	000000a8 _ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 new_op.cc
00000000 l    df *ABS*	00000000 eh_globals.cc
0800cc08 l     O .bss	00000008 _ZL10eh_globals
00000000 l    df *ABS*	00000000 eh_alloc.cc
08001cec l     F .text	000000b8 _ZN12_GLOBAL__N_14pool4freeEPv.constprop.4
0800cc44 l     O .bss	00000010 _ZN12_GLOBAL__N_114emergency_poolE
08001da4 l     F .text	000000a8 _ZN12_GLOBAL__N_14pool8allocateEj.constprop.5
08001f54 l     F .text	0000005c _GLOBAL__sub_I___cxa_allocate_exception
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 eh_throw.cc
08001fe8 l     F .text	00000044 _ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 bad_alloc.cc
00000000 l    df *ABS*	00000000 new_handler.cc
0800cc10 l     O .bss	00000004 _ZN12_GLOBAL__N_113__new_handlerE
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 unwind-sjlj.c
08002834 l     F .text	00000118 _Unwind_ForcedUnwind_Phase2
0800cc14 l     O .bss	00000004 fc_static
0800294c l     F .text	000000c0 _Unwind_RaiseException_Phase2
08002a0c l     F .text	00000030 uw_install_context.isra.1
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 gets.c
00000000 l    df *ABS*	00000000 impure.c
080096d8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
08003dd4 l     F .text	00000008 __fp_unlock
08003de8 l     F .text	0000019c __sinit.part.1
08003f84 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
080054d8 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
08006298 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
080063a4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
08006404 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
08006510 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
080065f0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0800675c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
08006848 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
08006a1c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0800b160 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
08006c68 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
08006d9c l     F .text	00000034 alt_dev_reg
0800a0ac l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
08007090 l     F .text	0000020c altera_avalon_jtag_uart_irq
0800729c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
080078d4 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08007b3c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08007fb0 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
080080f0 l     F .text	0000003c alt_get_errno
0800812c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0800cc40 g     O .bss	00000004 alt_instruction_exception_handler
08001eac g     F .text	00000028 __cxa_free_exception
08002460 g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
08001c04 g     F .text	00000018 _ZSt10unexpectedv
08006090 g     F .text	00000054 _isatty_r
08006958 g     F .text	0000007c alt_main
080037ac g     F .text	000000c0 _puts_r
0800cc7c g     O .bss	00000100 alt_irq
08001fd8 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD1Ev
08005db8 g     F .text	00000060 _lseek_r
08002ac8 g     F .text	00000020 .hidden _Unwind_GetIPInfo
0800b170 g       *ABS*	00000000 __flash_rwdata_start
080020bc g     F .text	00000084 __cxa_rethrow
08002a54 g     F .text	00000014 .hidden _Unwind_SjLj_Unregister
08001c40 g     F .text	00000014 _ZSt14set_unexpectedPFvvE
08002ab8 g     F .text	00000010 .hidden _Unwind_GetIP
0800cd7c g       *ABS*	00000000 __alt_heap_start
08003c00 g     F .text	0000005c _kill_r
08002504 g     F .text	00000010 _ZNSt9bad_allocD2Ev
080039c8 g     F .text	00000084 _signal_r
080057a0 g     F .text	0000005c __sseek
08004124 g     F .text	00000010 __sinit
08001f28 g     F .text	0000002c __cxa_free_dependent_exception
08002198 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
08009534  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
08003f8c g     F .text	00000068 __sfmoreglue
080069f8 g     F .text	00000024 __malloc_unlock
08001fd8 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD2Ev
08001afc g     F .text	00000020 _ZSt18uncaught_exceptionv
080024d8 g     F .text	00000020 __cxa_deleted_virtual
08004e18 g     F .text	0000015c memmove
08001fb0 g     F .text	00000004 _ZNSt9exceptionD2Ev
0800410c g     F .text	00000018 _cleanup
080094f8  w    O .rodata	00000014 _ZTVSt13bad_exception
080084e8 g     F .text	00000024 altera_nios2_gen2_irq_init
08000000 g     F .entry	0000001c __reset
080004a4 g     F .text	0000003c _ZN9skConsoleD2Ev
08002b04 g     F .text	00000008 .hidden _Unwind_GetRegionStart
08000020 g       *ABS*	00000000 __flash_exceptions_start
08006034 g     F .text	0000005c _fstat_r
0800cc24 g     O .bss	00000004 errno
080038f4 g     F .text	00000014 __srget
0800571c g     F .text	00000008 __seofread
08002e3c g     F .text	00000014 gets
08002ce0 g     F .text	00000074 .hidden _Unwind_Backtrace
0800cc2c g     O .bss	00000004 alt_argv
0801310c g       *ABS*	00000000 _gp
080064f0 g     F .text	00000020 getpid
0800175c g     F .text	00000230 __cxa_call_unexpected
0800198c g     F .text	00000008 __cxa_get_exception_ptr
08009f2c g     O .rwdata	00000180 alt_fd_list
08002bf4 g     F .text	00000044 .hidden _Unwind_SjLj_ForcedUnwind
08002a84 g     F .text	00000018 .hidden _Unwind_GetCFA
08001c1c g     F .text	00000014 _ZSt13set_terminatePFvvE
0800850c g     F .text	00000090 alt_find_dev
08004cd0 g     F .text	00000148 memcpy
08001ed4 g     F .text	00000054 __cxa_allocate_dependent_exception
08003ddc g     F .text	0000000c _cleanup_r
080025e4 g     F .text	00000018 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_
08008074 g     F .text	0000007c alt_io_redirect
08008c18 g       *ABS*	00000000 __DTOR_END__
080025fc g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
0800386c g     F .text	00000014 puts
080087d8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
08007494 g     F .text	0000021c altera_avalon_jtag_uart_read
08002e50 g     F .text	00000014 malloc
080061dc g     F .text	00000064 .hidden __udivsi3
0800654c g     F .text	000000a4 isatty
08003a4c g     F .text	000000bc _raise_r
08008748 g     F .text	00000090 alt_icache_flush
0800cc20 g     O .bss	00000004 __malloc_top_pad
08003c5c g     F .text	00000004 _getpid_r
080045a8 g     F .text	000004bc __sfvwrite_r
0800277c g     F .text	000000b8 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
08003b08 g     F .text	000000a8 __sigtramp_r
08003908 g     F .text	00000054 _sbrk_r
080095a4  w    O .rodata	00000020 _ZTVSt9type_info
08005fd4 g     F .text	00000060 _read_r
08001fb8 g     F .text	0000000c _ZNKSt9exception4whatEv
0800b158 g     O .rwdata	00000004 alt_max_fd
08005a0c g     F .text	000000f0 _fclose_r
08009620  w    O .rodata	0000000c _ZTISt9bad_alloc
08005d88 g     F .text	00000030 fflush
0800cc1c g     O .bss	00000004 __malloc_max_sbrked_mem
08009568  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
08006884 g     F .text	000000d4 lseek
08002640 g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
080009a4 g     F .text	00000004 _ZdlPv
0800b138 g     O .rwdata	00000004 _global_impure_ptr
08004f74 g     F .text	00000564 _realloc_r
0800cd7c g       *ABS*	00000000 __bss_end
0800255c g     F .text	00000010 _ZSt15get_new_handlerv
08007ec0 g     F .text	000000f0 alt_iic_isr_register
08000554 g     F .text	0000002c _ZN9skConsole9SetCursorEii
080083e0 g     F .text	00000108 alt_tick
08002a3c g     F .text	00000018 .hidden _Unwind_SjLj_Register
08002d54 g     F .text	00000018 abort
08001a48 g     F .text	000000b4 __cxa_end_catch
08004144 g     F .text	00000018 __fp_lock_all
08007e74 g     F .text	0000004c alt_ic_irq_enabled
08001fb4 g     F .text	00000004 _ZNSt13bad_exceptionD2Ev
08008344 g     F .text	0000009c alt_alarm_stop
0800cc34 g     O .bss	00000004 alt_irq_active
08001bdc g     F .text	00000018 _ZSt9terminatev
080000fc g     F .exceptions	000000d4 alt_irq_handler
08009f04 g     O .rwdata	00000028 alt_dev_null
08001fe0 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD2Ev
08009640  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
08007af4 g     F .text	00000048 alt_dcache_flush_all
0800b10c  w    O .rwdata	00000008 _ZTISt9exception
0800b170 g       *ABS*	00000000 __ram_rwdata_end
0800245c g     F .text	00000004 _ZNSt9type_infoD1Ev
0800b150 g     O .rwdata	00000008 alt_dev_list
08001fe0 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD1Ev
08006ca4 g     F .text	000000f8 write
08002470 g     F .text	00000004 _ZNSt9type_infoD0Ev
08000580 g     F .text	0000002c _ZNK9skConsole9GetCursorERiS0_
080096d8 g       *ABS*	00000000 __ram_rodata_end
08006440 g     F .text	000000b0 fstat
0800662c g     F .text	00000130 kill
08006240 g     F .text	00000058 .hidden __umodsi3
08002468 g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
08001c30 g     F .text	00000010 _ZSt13get_terminatev
0800cd7c g       *ABS*	00000000 end
080003ec g     F .text	000000b8 _ZN9skConsoleC2Ejj
08002cc8 g     F .text	00000018 .hidden _Unwind_DeleteException
08006fd0 g     F .text	000000c0 altera_avalon_jtag_uart_init
080001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
080026ac g     F .text	000000d0 _ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
080004e0 g     F .text	00000074 _ZN9skConsole5WriteEPc
08008c11 g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
0800794c g     F .text	0000007c alt_avalon_timer_sc_init
0800256c g     F .text	00000078 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
080076b0 g     F .text	00000224 altera_avalon_jtag_uart_write
08004134 g     F .text	00000004 __sfp_lock_acquire
08009480  w    O .rodata	00000012 _ZTSSt13bad_exception
08004bec g     F .text	000000e4 memchr
08004298 g     F .text	00000310 _free_r
08008a54 g     F .text	00000180 __call_exitprocs
08003880 g     F .text	00000074 __srget_r
0800b140 g     O .rwdata	00000004 __malloc_sbrk_base
08000244 g     F .text	0000004c _start
08002d6c g     F .text	000000d0 _gets_r
0800cc38 g     O .bss	00000004 _alt_tick_rate
08009594  w    O .rodata	0000000d _ZTSSt9type_info
080024f8 g     F .text	0000000c _ZNKSt9bad_alloc4whatEv
080024b8 g     F .text	00000020 __cxa_pure_virtual
0800962c  w    O .rodata	00000014 _ZTVSt9bad_alloc
0800cc3c g     O .bss	00000004 _alt_nticks
08003bc4 g     F .text	00000018 signal
08006a58 g     F .text	000000fc read
08006e08 g     F .text	00000064 alt_sys_init
0800893c g     F .text	00000118 __register_exitproc
08009610  w    O .rodata	0000000d _ZTSSt9bad_alloc
10200000 g       *ABS*	00000000 __alt_mem_bufferram_out
080021dc g     F .text	00000160 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
080003ec g     F .text	000000b8 _ZN9skConsoleC1Ejj
0800733c g     F .text	00000068 altera_avalon_jtag_uart_close
080096d8 g       *ABS*	00000000 __ram_rwdata_start
08002b24 g     F .text	000000d0 .hidden _Unwind_SjLj_RaiseException
08008c18 g       *ABS*	00000000 __ram_rodata_start
0800cc54 g     O .bss	00000028 __malloc_current_mallinfo
08002c38 g     F .text	00000044 .hidden _Unwind_SjLj_Resume
08009520  w    O .rodata	00000014 _ZTVN10__cxxabiv119__foreign_exceptionE
0800245c g     F .text	00000004 _ZNSt9type_infoD2Ev
08001fe4 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD0Ev
080023d8 g     F .text	00000084 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
08006e6c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
080086a4 g     F .text	000000a4 alt_get_fd
0800b11c  w    O .rwdata	00000008 _ZTIN10__cxxabiv119__foreign_exceptionE
080059b8 g     F .text	00000054 _close_r
080088c0 g     F .text	0000007c memcmp
08006f2c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0800cd7c g       *ABS*	00000000 __alt_stack_base
08006f7c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08002514 g     F .text	00000034 _ZNSt9bad_allocD0Ev
08002198 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
08005864 g     F .text	00000154 __swsetup_r
08002c7c g     F .text	0000004c .hidden _Unwind_SjLj_Resume_or_Rethrow
08003ff4 g     F .text	00000118 __sfp
08002460 g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
08009afc g     O .rwdata	00000408 __malloc_av_
08004140 g     F .text	00000004 __sinit_lock_release
080056c8 g     F .text	00000054 __sread
080094e4  w    O .rodata	00000014 _ZTVSt9exception
08001fdc g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD0Ev
0800859c g     F .text	00000108 alt_find_file
08007b78 g     F .text	000000a4 alt_dev_llist_insert
080069d4 g     F .text	00000024 __malloc_lock
08006bb8 g     F .text	000000b0 sbrk
08009670  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
0800202c g     F .text	00000090 __cxa_throw
08005d2c g     F .text	0000005c _fflush_r
08002ae8 g     F .text	00000010 .hidden _Unwind_SetIP
0800cc08 g       *ABS*	00000000 __bss_start
08003684 g     F .text	00000128 memset
08000660 g     F .text	00000344 _ZN9skConsole9WriteCharEc
080002d4 g     F .text	00000118 main
0800cc30 g     O .bss	00000004 alt_envp
0800cc18 g     O .bss	00000004 __malloc_max_total_mem
08006ecc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08001cd4 g     F .text	0000000c __cxa_get_globals_fast
080057fc g     F .text	00000008 __sclose
10000000 g       *ABS*	00000000 __alt_heap_limit
08005afc g     F .text	00000014 fclose
08002e78 g     F .text	0000080c _malloc_r
08001fc4 g     F .text	0000000c _ZNKSt13bad_exception4whatEv
0800b15c g     O .rwdata	00000004 alt_errno
08003bdc g     F .text	00000010 _init_signal
08009664  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
08004a64 g     F .text	000000c4 _fwalk
08001fb4 g     F .text	00000004 _ZNSt13bad_exceptionD1Ev
080060e4 g     F .text	00000084 .hidden __divsi3
08004174 g     F .text	00000124 _malloc_trim_r
08008c18 g       *ABS*	00000000 __CTOR_END__
08003c60 g     F .text	000000dc strcmp
080004a4 g     F .text	0000003c _ZN9skConsoleD1Ev
08008c18 g       *ABS*	00000000 __flash_rodata_start
0800950c  w    O .rodata	00000014 _ZTVN10__cxxabiv115__forced_unwindE
08008c18 g       *ABS*	00000000 __DTOR_LIST__
08008c4b g     O .rodata	00000800 CGROM
08006dd0 g     F .text	00000038 alt_irq_init
08006b54 g     F .text	00000064 alt_release_fd
080021a8 g     F .text	00000034 _ZN10__cxxabiv120__si_class_type_infoD0Ev
08008874 g     F .text	00000014 atexit
08005804 g     F .text	00000060 _write_r
08002b1c g     F .text	00000008 .hidden _Unwind_GetTextRelBase
08002140 g     F .text	00000058 __cxa_call_terminate
0800b13c g     O .rwdata	00000004 _impure_ptr
0800b114  w    O .rwdata	00000008 _ZTIN10__cxxabiv115__forced_unwindE
0800cc28 g     O .bss	00000004 alt_argc
08005b10 g     F .text	0000021c __sflush_r
08007c7c g     F .text	00000060 _do_dtors
080054f4 g     F .text	000001d4 __srefill_r
08001c54 g     F .text	00000010 _ZSt14get_unexpectedv
08000020 g       .exceptions	00000000 alt_irq_entry
08002b0c g     F .text	00000008 .hidden _Unwind_FindEnclosingFunction
0800415c g     F .text	00000018 __fp_unlock_all
0800b148 g     O .rwdata	00000008 alt_fs_list
080094c0  w    O .rodata	00000024 _ZTSN10__cxxabiv119__foreign_exceptionE
08002af8 g     F .text	0000000c .hidden _Unwind_GetLanguageSpecificData
08001994 g     F .text	000000b4 __cxa_begin_catch
080025fc g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
08001bf4 g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
08000020 g       *ABS*	00000000 __ram_exceptions_start
08001fd4 g     F .text	00000004 _ZNSt13bad_exceptionD0Ev
0800b12c g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
08007d10 g     F .text	00000050 alt_ic_isr_register
08001e4c g     F .text	00000060 __cxa_allocate_exception
0800955c  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
08002548 g     F .text	00000014 _ZSt15set_new_handlerPFvvE
0800b170 g       *ABS*	00000000 _edata
0800cd7c g       *ABS*	00000000 _end
0800b134 g     O .rwdata	00000001 _ZSt7nothrow
0800115c g     F .text	00000600 __gxx_personality_sj0
08000244 g       *ABS*	00000000 __ram_exceptions_end
080073a4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
08001fb0 g     F .text	00000004 _ZNSt9exceptionD1Ev
08007de8 g     F .text	0000008c alt_ic_irq_disable
08005724 g     F .text	0000007c __swrite
08001c64 g     F .text	00000070 _Znwj
0800b144 g     O .rwdata	00000004 __malloc_trim_threshold
08008888 g     F .text	00000038 exit
08002a9c g     F .text	0000001c .hidden _Unwind_SetGR
08004b28 g     F .text	000000c4 _fwalk_reent
0800233c g     F .text	0000009c _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
08001b1c g     F .text	000000c0 _ZN10__cxxabiv111__terminateEPFvvE
08006168 g     F .text	00000074 .hidden __modsi3
08002504 g     F .text	00000010 _ZNSt9bad_allocD1Ev
10000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08004138 g     F .text	00000004 __sfp_lock_release
08009494  w    O .rodata	0000000c _ZTISt13bad_exception
08000000 g       *ABS*	00000000 __alt_mem_sdram
080005ac g     F .text	000000b4 _ZNK9skConsole5PrintEPVm
080063d0 g     F .text	00000034 _exit
080079c8 g     F .text	0000012c alt_alarm_start
08002a68 g     F .text	0000001c .hidden _Unwind_GetGR
08001ce0 g     F .text	0000000c __cxa_get_globals
08005e18 g     F .text	000001bc __smakebuf_r
0800b130 g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
08003d3c g     F .text	00000098 strlen
0800395c g     F .text	0000006c _init_signal_r
0800b124  w    O .rwdata	00000008 _ZTISt9type_info
080081f0 g     F .text	00000154 open
08009470  w    O .rodata	0000000d _ZTSSt9exception
08001fd0 g     F .text	00000004 _ZNSt9exceptionD0Ev
08007cdc g     F .text	00000034 alt_icache_flush_all
08002b14 g     F .text	00000008 .hidden _Unwind_GetDataRelBase
0800b164 g     O .rwdata	00000004 alt_priority_mask
08007d60 g     F .text	00000088 alt_ic_irq_enable
0800b168 g     O .rwdata	00000008 alt_alarm_list
08007c1c g     F .text	00000060 _do_ctors
08003bec g     F .text	00000014 __sigtramp
080062d4 g     F .text	000000d0 close
080094a0  w    O .rodata	00000020 _ZTSN10__cxxabiv115__forced_unwindE
080067c4 g     F .text	00000084 alt_load
08002474 g     F .text	00000044 _ZNKSt9type_info10__do_catchEPKS_PPvj
08000290 g     F .text	00000044 _Z4waiti
08003bb0 g     F .text	00000014 raise
08002e64 g     F .text	00000014 free
0800413c g     F .text	00000004 __sinit_lock_acquire
0800260c g     F .text	00000034 _ZN10__cxxabiv117__class_type_infoD0Ev



Disassembly of section .entry:

08000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 800000c:	00bffd16 	blt	zero,r2,8000004 <__alt_mem_bufferram_out+0xf7e00004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000010:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000014:	08409114 	ori	at,at,580
    jmp r1
 8000018:	0800683a 	jmp	at
 800001c:	00000000 	call	0 <__alt_mem_sdram-0x8000000>

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000fc0 	call	80000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000706 	br	80000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 800008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8000098:	80001d00 	call	80001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 800009c:	1000021e 	bne	r2,zero,80000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000f8:	ef80083a 	eret

080000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000fc:	defff904 	addi	sp,sp,-28
 8000100:	dfc00615 	stw	ra,24(sp)
 8000104:	df000515 	stw	fp,20(sp)
 8000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000110:	0005313a 	rdctl	r2,ipending
 8000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000124:	00800044 	movi	r2,1
 8000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800012c:	e0fffb17 	ldw	r3,-20(fp)
 8000130:	e0bffc17 	ldw	r2,-16(fp)
 8000134:	1884703a 	and	r2,r3,r2
 8000138:	10001426 	beq	r2,zero,800018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800013c:	00820074 	movhi	r2,2049
 8000140:	10b31f04 	addi	r2,r2,-13188
 8000144:	e0fffd17 	ldw	r3,-12(fp)
 8000148:	180690fa 	slli	r3,r3,3
 800014c:	10c5883a 	add	r2,r2,r3
 8000150:	10c00017 	ldw	r3,0(r2)
 8000154:	00820074 	movhi	r2,2049
 8000158:	10b31f04 	addi	r2,r2,-13188
 800015c:	e13ffd17 	ldw	r4,-12(fp)
 8000160:	200890fa 	slli	r4,r4,3
 8000164:	1105883a 	add	r2,r2,r4
 8000168:	10800104 	addi	r2,r2,4
 800016c:	10800017 	ldw	r2,0(r2)
 8000170:	1009883a 	mov	r4,r2
 8000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800017c:	0005313a 	rdctl	r2,ipending
 8000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000184:	e0bfff17 	ldw	r2,-4(fp)
 8000188:	00000706 	br	80001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800018c:	e0bffc17 	ldw	r2,-16(fp)
 8000190:	1085883a 	add	r2,r2,r2
 8000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000198:	e0bffd17 	ldw	r2,-12(fp)
 800019c:	10800044 	addi	r2,r2,1
 80001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80001a4:	003fe106 	br	800012c <__alt_mem_bufferram_out+0xf7e0012c>

    active = alt_irq_pending ();
 80001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80001ac:	e0bffb17 	ldw	r2,-20(fp)
 80001b0:	103fdb1e 	bne	r2,zero,8000120 <__alt_mem_bufferram_out+0xf7e00120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001b4:	0001883a 	nop
}
 80001b8:	0001883a 	nop
 80001bc:	e037883a 	mov	sp,fp
 80001c0:	dfc00117 	ldw	ra,4(sp)
 80001c4:	df000017 	ldw	fp,0(sp)
 80001c8:	dec00204 	addi	sp,sp,8
 80001cc:	f800283a 	ret

080001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80001d0:	defffb04 	addi	sp,sp,-20
 80001d4:	dfc00415 	stw	ra,16(sp)
 80001d8:	df000315 	stw	fp,12(sp)
 80001dc:	df000304 	addi	fp,sp,12
 80001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 80001e4:	000531fa 	rdctl	r2,exception
 80001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 80001ec:	e0bffd17 	ldw	r2,-12(fp)
 80001f0:	10801f0c 	andi	r2,r2,124
 80001f4:	1004d0ba 	srli	r2,r2,2
 80001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 80001fc:	0005333a 	rdctl	r2,badaddr
 8000200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 8000204:	d0a6cd17 	ldw	r2,-25804(gp)
 8000208:	10000726 	beq	r2,zero,8000228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 800020c:	d0a6cd17 	ldw	r2,-25804(gp)
 8000210:	e0fffd17 	ldw	r3,-12(fp)
 8000214:	e1bffe17 	ldw	r6,-8(fp)
 8000218:	e17fff17 	ldw	r5,-4(fp)
 800021c:	1809883a 	mov	r4,r3
 8000220:	103ee83a 	callr	r2
 8000224:	00000206 	br	8000230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8000228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 800022c:	0005883a 	mov	r2,zero
}
 8000230:	e037883a 	mov	sp,fp
 8000234:	dfc00117 	ldw	ra,4(sp)
 8000238:	df000017 	ldw	fp,0(sp)
 800023c:	dec00204 	addi	sp,sp,8
 8000240:	f800283a 	ret

Disassembly of section .text:

08000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 8000244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 8000248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 800024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 8000250:	00bffd16 	blt	zero,r2,8000248 <__alt_mem_bufferram_out+0xf7e00248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000254:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
 8000258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 800025c:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 8000260:	d68c4314 	ori	gp,gp,12556
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000264:	00820034 	movhi	r2,2048
    ori r2, r2, %lo(__bss_start)
 8000268:	10b30214 	ori	r2,r2,52232

    movhi r3, %hi(__bss_end)
 800026c:	00c20034 	movhi	r3,2048
    ori r3, r3, %lo(__bss_end)
 8000270:	18f35f14 	ori	r3,r3,52604

    beq r2, r3, 1f
 8000274:	10c00326 	beq	r2,r3,8000284 <_start+0x40>

0:
    stw zero, (r2)
 8000278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 800027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 8000280:	10fffd36 	bltu	r2,r3,8000278 <__alt_mem_bufferram_out+0xf7e00278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000284:	80067c40 	call	80067c4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000288:	80069580 	call	8006958 <alt_main>

0800028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 800028c:	003fff06 	br	800028c <__alt_mem_bufferram_out+0xf7e0028c>

08000290 <_Z4waiti>:
#include "src/chout.hpp"

#define LPDISPLAY ((volatile uint32_t*)BUFFERRAM_OUT_BASE)

void wait(int val)
{
 8000290:	defffd04 	addi	sp,sp,-12
 8000294:	df000215 	stw	fp,8(sp)
 8000298:	df000204 	addi	fp,sp,8
 800029c:	e13fff15 	stw	r4,-4(fp)
	for(int i =0; i < val; ++i)
 80002a0:	e03ffe15 	stw	zero,-8(fp)
 80002a4:	e0fffe17 	ldw	r3,-8(fp)
 80002a8:	e0bfff17 	ldw	r2,-4(fp)
 80002ac:	1880040e 	bge	r3,r2,80002c0 <_Z4waiti+0x30>
 80002b0:	e0bffe17 	ldw	r2,-8(fp)
 80002b4:	10800044 	addi	r2,r2,1
 80002b8:	e0bffe15 	stw	r2,-8(fp)
 80002bc:	003ff906 	br	80002a4 <__alt_mem_bufferram_out+0xf7e002a4>
	{
		// nop;
	}
}
 80002c0:	0001883a 	nop
 80002c4:	e037883a 	mov	sp,fp
 80002c8:	df000017 	ldw	fp,0(sp)
 80002cc:	dec00104 	addi	sp,sp,4
 80002d0:	f800283a 	ret

080002d4 <main>:

int main()
{
 80002d4:	defee204 	addi	sp,sp,-1144
 80002d8:	dfc11d15 	stw	ra,1140(sp)
 80002dc:	df011c15 	stw	fp,1136(sp)
 80002e0:	ddc11b15 	stw	r23,1132(sp)
 80002e4:	dd811a15 	stw	r22,1128(sp)
 80002e8:	dd411915 	stw	r21,1124(sp)
 80002ec:	dd011815 	stw	r20,1120(sp)
 80002f0:	dcc11715 	stw	r19,1116(sp)
 80002f4:	dc811615 	stw	r18,1112(sp)
 80002f8:	dc411515 	stw	r17,1108(sp)
 80002fc:	dc011415 	stw	r16,1104(sp)
 8000300:	df011c04 	addi	fp,sp,1136
 8000304:	00820034 	movhi	r2,2048
 8000308:	10845704 	addi	r2,r2,4444
 800030c:	e0bff015 	stw	r2,-64(fp)
 8000310:	00820074 	movhi	r2,2049
 8000314:	10a2f504 	addi	r2,r2,-29740
 8000318:	e0bff115 	stw	r2,-60(fp)
 800031c:	e0bff204 	addi	r2,fp,-56
 8000320:	e0fee404 	addi	r3,fp,-1136
 8000324:	10c00015 	stw	r3,0(r2)
 8000328:	00c20034 	movhi	r3,2048
 800032c:	18c0f004 	addi	r3,r3,960
 8000330:	10c00115 	stw	r3,4(r2)
 8000334:	16c00215 	stw	sp,8(r2)
 8000338:	e0bfea04 	addi	r2,fp,-88
 800033c:	1009883a 	mov	r4,r2
 8000340:	8002a3c0 	call	8002a3c <_Unwind_SjLj_Register>
	printf("Hello from Nios II! ... Launching ... \n");
 8000344:	01020074 	movhi	r4,2049
 8000348:	00bfffc4 	movi	r2,-1
 800034c:	e0bfeb15 	stw	r2,-84(fp)
 8000350:	21230604 	addi	r4,r4,-29672
 8000354:	800386c0 	call	800386c <puts>

	memset((void*)LPDISPLAY, 0, 48000*sizeof(alt_u32));
 8000358:	008000f4 	movhi	r2,3
 800035c:	10bb8004 	addi	r2,r2,-4608
 8000360:	100d883a 	mov	r6,r2
 8000364:	000b883a 	mov	r5,zero
 8000368:	01040834 	movhi	r4,4128
 800036c:	80036840 	call	8003684 <memset>
	skConsole Console(400, 240);
 8000370:	01803c04 	movi	r6,240
 8000374:	01406404 	movi	r5,400
 8000378:	e13ee404 	addi	r4,fp,-1136
 800037c:	80003ec0 	call	80003ec <_ZN9skConsoleC1Ejj>
	while(1)
	{
		printf("Enter any.\n");
 8000380:	01020074 	movhi	r4,2049
 8000384:	00800044 	movi	r2,1
 8000388:	e0bfeb15 	stw	r2,-84(fp)
 800038c:	21231004 	addi	r4,r4,-29632
 8000390:	800386c0 	call	800386c <puts>
		char buff[1024];
		gets(buff);
 8000394:	e0beea04 	addi	r2,fp,-1112
 8000398:	1009883a 	mov	r4,r2
 800039c:	8002e3c0 	call	8002e3c <gets>
		Console.Write(buff);
 80003a0:	e0beea04 	addi	r2,fp,-1112
 80003a4:	100b883a 	mov	r5,r2
 80003a8:	e13ee404 	addi	r4,fp,-1136
 80003ac:	80004e00 	call	80004e0 <_ZN9skConsole5WriteEPc>
		Console.Print(LPDISPLAY);
 80003b0:	01440834 	movhi	r5,4128
 80003b4:	e13ee404 	addi	r4,fp,-1136
 80003b8:	80005ac0 	call	80005ac <_ZNK9skConsole5PrintEPVm>
{
	printf("Hello from Nios II! ... Launching ... \n");

	memset((void*)LPDISPLAY, 0, 48000*sizeof(alt_u32));
	skConsole Console(400, 240);
	while(1)
 80003bc:	003ff006 	br	8000380 <__alt_mem_bufferram_out+0xf7e00380>
 80003c0:	e7011c04 	addi	fp,fp,1136
 80003c4:	e0bfec17 	ldw	r2,-80(fp)
 80003c8:	e0bff715 	stw	r2,-36(fp)
int main()
{
	printf("Hello from Nios II! ... Launching ... \n");

	memset((void*)LPDISPLAY, 0, 48000*sizeof(alt_u32));
	skConsole Console(400, 240);
 80003cc:	e03feb15 	stw	zero,-84(fp)
 80003d0:	e13ee404 	addi	r4,fp,-1136
 80003d4:	80004a40 	call	80004a4 <_ZN9skConsoleD1Ev>
 80003d8:	e0fff717 	ldw	r3,-36(fp)
 80003dc:	00bfffc4 	movi	r2,-1
 80003e0:	e0bfeb15 	stw	r2,-84(fp)
 80003e4:	1809883a 	mov	r4,r3
 80003e8:	8002c380 	call	8002c38 <_Unwind_SjLj_Resume>

080003ec <_ZN9skConsoleC1Ejj>:
#include "chout.hpp"
#include <stdlib.h>
#include <string.h>

skConsole::skConsole(size_t Width, size_t Height) :
 80003ec:	defffb04 	addi	sp,sp,-20
 80003f0:	dfc00415 	stw	ra,16(sp)
 80003f4:	df000315 	stw	fp,12(sp)
 80003f8:	df000304 	addi	fp,sp,12
 80003fc:	e13ffd15 	stw	r4,-12(fp)
 8000400:	e17ffe15 	stw	r5,-8(fp)
 8000404:	e1bfff15 	stw	r6,-4(fp)
	mHeight(Height),
	mBuff(new uint16_t(Width * Height)), 
	mCsrX(0),
	mCsrY(0),
	ForeColor(0xffff),
	BackColor(0x0000)
 8000408:	e0bffd17 	ldw	r2,-12(fp)
 800040c:	00ffffc4 	movi	r3,-1
 8000410:	10c0000d 	sth	r3,0(r2)
 8000414:	e0bffd17 	ldw	r2,-12(fp)
 8000418:	1000008d 	sth	zero,2(r2)
 800041c:	e0bffd17 	ldw	r2,-12(fp)
 8000420:	10000115 	stw	zero,4(r2)
 8000424:	e0bffd17 	ldw	r2,-12(fp)
 8000428:	10000215 	stw	zero,8(r2)
 800042c:	e0bffd17 	ldw	r2,-12(fp)
 8000430:	e0fffe17 	ldw	r3,-8(fp)
 8000434:	10c00315 	stw	r3,12(r2)
 8000438:	e0bffd17 	ldw	r2,-12(fp)
 800043c:	e0ffff17 	ldw	r3,-4(fp)
 8000440:	10c00415 	stw	r3,16(r2)
 8000444:	01000084 	movi	r4,2
 8000448:	8001c640 	call	8001c64 <_Znwj>
 800044c:	e0fffe17 	ldw	r3,-8(fp)
 8000450:	1809883a 	mov	r4,r3
 8000454:	e0ffff17 	ldw	r3,-4(fp)
 8000458:	20c7383a 	mul	r3,r4,r3
 800045c:	10c0000d 	sth	r3,0(r2)
 8000460:	e0fffd17 	ldw	r3,-12(fp)
 8000464:	18800515 	stw	r2,20(r3)
{
	memset(mBuff, 0, Width*Height*sizeof(*mBuff));
 8000468:	e0bffd17 	ldw	r2,-12(fp)
 800046c:	11000517 	ldw	r4,20(r2)
 8000470:	e0fffe17 	ldw	r3,-8(fp)
 8000474:	e0bfff17 	ldw	r2,-4(fp)
 8000478:	1885383a 	mul	r2,r3,r2
 800047c:	1085883a 	add	r2,r2,r2
 8000480:	100d883a 	mov	r6,r2
 8000484:	000b883a 	mov	r5,zero
 8000488:	80036840 	call	8003684 <memset>
}
 800048c:	0001883a 	nop
 8000490:	e037883a 	mov	sp,fp
 8000494:	dfc00117 	ldw	ra,4(sp)
 8000498:	df000017 	ldw	fp,0(sp)
 800049c:	dec00204 	addi	sp,sp,8
 80004a0:	f800283a 	ret

080004a4 <_ZN9skConsoleD1Ev>:

skConsole::~skConsole()
 80004a4:	defffd04 	addi	sp,sp,-12
 80004a8:	dfc00215 	stw	ra,8(sp)
 80004ac:	df000115 	stw	fp,4(sp)
 80004b0:	df000104 	addi	fp,sp,4
 80004b4:	e13fff15 	stw	r4,-4(fp)
{
	delete mBuff;
 80004b8:	e0bfff17 	ldw	r2,-4(fp)
 80004bc:	10800517 	ldw	r2,20(r2)
 80004c0:	1009883a 	mov	r4,r2
 80004c4:	80009a40 	call	80009a4 <_ZdlPv>
}
 80004c8:	0001883a 	nop
 80004cc:	e037883a 	mov	sp,fp
 80004d0:	dfc00117 	ldw	ra,4(sp)
 80004d4:	df000017 	ldw	fp,0(sp)
 80004d8:	dec00204 	addi	sp,sp,8
 80004dc:	f800283a 	ret

080004e0 <_ZN9skConsole5WriteEPc>:

void skConsole::Write(char* str)
{ 
 80004e0:	defffc04 	addi	sp,sp,-16
 80004e4:	dfc00315 	stw	ra,12(sp)
 80004e8:	df000215 	stw	fp,8(sp)
 80004ec:	df000204 	addi	fp,sp,8
 80004f0:	e13ffe15 	stw	r4,-8(fp)
 80004f4:	e17fff15 	stw	r5,-4(fp)
	while(*str != 0)
 80004f8:	e0bfff17 	ldw	r2,-4(fp)
 80004fc:	10800003 	ldbu	r2,0(r2)
 8000500:	10803fcc 	andi	r2,r2,255
 8000504:	1080201c 	xori	r2,r2,128
 8000508:	10bfe004 	addi	r2,r2,-128
 800050c:	10000b26 	beq	r2,zero,800053c <_ZN9skConsole5WriteEPc+0x5c>
	{
		WriteChar(*str++);
 8000510:	e0bfff17 	ldw	r2,-4(fp)
 8000514:	10c00044 	addi	r3,r2,1
 8000518:	e0ffff15 	stw	r3,-4(fp)
 800051c:	10800003 	ldbu	r2,0(r2)
 8000520:	10803fcc 	andi	r2,r2,255
 8000524:	1080201c 	xori	r2,r2,128
 8000528:	10bfe004 	addi	r2,r2,-128
 800052c:	100b883a 	mov	r5,r2
 8000530:	e13ffe17 	ldw	r4,-8(fp)
 8000534:	80006600 	call	8000660 <_ZN9skConsole9WriteCharEc>
	delete mBuff;
}

void skConsole::Write(char* str)
{ 
	while(*str != 0)
 8000538:	003fef06 	br	80004f8 <__alt_mem_bufferram_out+0xf7e004f8>
	{
		WriteChar(*str++);
	}
}
 800053c:	0001883a 	nop
 8000540:	e037883a 	mov	sp,fp
 8000544:	dfc00117 	ldw	ra,4(sp)
 8000548:	df000017 	ldw	fp,0(sp)
 800054c:	dec00204 	addi	sp,sp,8
 8000550:	f800283a 	ret

08000554 <_ZN9skConsole9SetCursorEii>:

void skConsole::SetCursor(int x, int y)
{
 8000554:	defffc04 	addi	sp,sp,-16
 8000558:	df000315 	stw	fp,12(sp)
 800055c:	df000304 	addi	fp,sp,12
 8000560:	e13ffd15 	stw	r4,-12(fp)
 8000564:	e17ffe15 	stw	r5,-8(fp)
 8000568:	e1bfff15 	stw	r6,-4(fp)
	
}
 800056c:	0001883a 	nop
 8000570:	e037883a 	mov	sp,fp
 8000574:	df000017 	ldw	fp,0(sp)
 8000578:	dec00104 	addi	sp,sp,4
 800057c:	f800283a 	ret

08000580 <_ZNK9skConsole9GetCursorERiS0_>:

void skConsole::GetCursor(int& x, int& y) const
{
 8000580:	defffc04 	addi	sp,sp,-16
 8000584:	df000315 	stw	fp,12(sp)
 8000588:	df000304 	addi	fp,sp,12
 800058c:	e13ffd15 	stw	r4,-12(fp)
 8000590:	e17ffe15 	stw	r5,-8(fp)
 8000594:	e1bfff15 	stw	r6,-4(fp)
	
}
 8000598:	0001883a 	nop
 800059c:	e037883a 	mov	sp,fp
 80005a0:	df000017 	ldw	fp,0(sp)
 80005a4:	dec00104 	addi	sp,sp,4
 80005a8:	f800283a 	ret

080005ac <_ZNK9skConsole5PrintEPVm>:

void skConsole::Print(volatile uint32_t* output_addr) const
{
 80005ac:	defffb04 	addi	sp,sp,-20
 80005b0:	df000415 	stw	fp,16(sp)
 80005b4:	df000404 	addi	fp,sp,16
 80005b8:	e13ffe15 	stw	r4,-8(fp)
 80005bc:	e17fff15 	stw	r5,-4(fp)
	uint16_t const* lpHead = mBuff;
 80005c0:	e0bffe17 	ldw	r2,-8(fp)
 80005c4:	10800517 	ldw	r2,20(r2)
 80005c8:	e0bffc15 	stw	r2,-16(fp)
	uint16_t const* const lpEnd = mBuff + mWidth * mHeight;
 80005cc:	e0bffe17 	ldw	r2,-8(fp)
 80005d0:	10c00517 	ldw	r3,20(r2)
 80005d4:	e0bffe17 	ldw	r2,-8(fp)
 80005d8:	11000317 	ldw	r4,12(r2)
 80005dc:	e0bffe17 	ldw	r2,-8(fp)
 80005e0:	10800417 	ldw	r2,16(r2)
 80005e4:	2085383a 	mul	r2,r4,r2
 80005e8:	1085883a 	add	r2,r2,r2
 80005ec:	1885883a 	add	r2,r3,r2
 80005f0:	e0bffd15 	stw	r2,-12(fp)
	
	while(lpHead < lpEnd)
 80005f4:	e0fffc17 	ldw	r3,-16(fp)
 80005f8:	e0bffd17 	ldw	r2,-12(fp)
 80005fc:	1880132e 	bgeu	r3,r2,800064c <_ZNK9skConsole5PrintEPVm+0xa0>
	{
		output_addr[0] = ((lpHead[1]&0xffff) << 16) | lpHead[0]; 
 8000600:	e0bffc17 	ldw	r2,-16(fp)
 8000604:	10800084 	addi	r2,r2,2
 8000608:	1080000b 	ldhu	r2,0(r2)
 800060c:	10bfffcc 	andi	r2,r2,65535
 8000610:	1006943a 	slli	r3,r2,16
 8000614:	e0bffc17 	ldw	r2,-16(fp)
 8000618:	1080000b 	ldhu	r2,0(r2)
 800061c:	10bfffcc 	andi	r2,r2,65535
 8000620:	1884b03a 	or	r2,r3,r2
 8000624:	1007883a 	mov	r3,r2
 8000628:	e0bfff17 	ldw	r2,-4(fp)
 800062c:	10c00015 	stw	r3,0(r2)
		++output_addr;
 8000630:	e0bfff17 	ldw	r2,-4(fp)
 8000634:	10800104 	addi	r2,r2,4
 8000638:	e0bfff15 	stw	r2,-4(fp)
		lpHead += 2;
 800063c:	e0bffc17 	ldw	r2,-16(fp)
 8000640:	10800104 	addi	r2,r2,4
 8000644:	e0bffc15 	stw	r2,-16(fp)
void skConsole::Print(volatile uint32_t* output_addr) const
{
	uint16_t const* lpHead = mBuff;
	uint16_t const* const lpEnd = mBuff + mWidth * mHeight;
	
	while(lpHead < lpEnd)
 8000648:	003fea06 	br	80005f4 <__alt_mem_bufferram_out+0xf7e005f4>
	{
		output_addr[0] = ((lpHead[1]&0xffff) << 16) | lpHead[0]; 
		++output_addr;
		lpHead += 2;
	}
}
 800064c:	0001883a 	nop
 8000650:	e037883a 	mov	sp,fp
 8000654:	df000017 	ldw	fp,0(sp)
 8000658:	dec00104 	addi	sp,sp,4
 800065c:	f800283a 	ret

08000660 <_ZN9skConsole9WriteCharEc>:

void skConsole::WriteChar(char p)
{
 8000660:	defff704 	addi	sp,sp,-36
 8000664:	df000815 	stw	fp,32(sp)
 8000668:	df000804 	addi	fp,sp,32
 800066c:	e13ffe15 	stw	r4,-8(fp)
 8000670:	2805883a 	mov	r2,r5
 8000674:	e0bfff05 	stb	r2,-4(fp)
	switch(p)
 8000678:	e0bfff07 	ldb	r2,-4(fp)
 800067c:	10c00260 	cmpeqi	r3,r2,9
 8000680:	1800251e 	bne	r3,zero,8000718 <_ZN9skConsole9WriteCharEc+0xb8>
 8000684:	10c00288 	cmpgei	r3,r2,10
 8000688:	1800031e 	bne	r3,zero,8000698 <_ZN9skConsole9WriteCharEc+0x38>
 800068c:	10800220 	cmpeqi	r2,r2,8
 8000690:	10004b1e 	bne	r2,zero,80007c0 <_ZN9skConsole9WriteCharEc+0x160>
				mCsrY = mHeight - 16;
			}
		} 
		break;
	default:
		break;
 8000694:	00005d06 	br	800080c <_ZN9skConsole9WriteCharEc+0x1ac>
	}
}

void skConsole::WriteChar(char p)
{
	switch(p)
 8000698:	10c002a0 	cmpeqi	r3,r2,10
 800069c:	1800391e 	bne	r3,zero,8000784 <_ZN9skConsole9WriteCharEc+0x124>
 80006a0:	10800820 	cmpeqi	r2,r2,32
 80006a4:	1000011e 	bne	r2,zero,80006ac <_ZN9skConsole9WriteCharEc+0x4c>
				mCsrY = mHeight - 16;
			}
		} 
		break;
	default:
		break;
 80006a8:	00005806 	br	800080c <_ZN9skConsole9WriteCharEc+0x1ac>
void skConsole::WriteChar(char p)
{
	switch(p)
	{
	case ' ': 
		if((mCsrX+=8) >= mWidth)
 80006ac:	e0bffe17 	ldw	r2,-8(fp)
 80006b0:	10800117 	ldw	r2,4(r2)
 80006b4:	10c00204 	addi	r3,r2,8
 80006b8:	e0bffe17 	ldw	r2,-8(fp)
 80006bc:	10c00115 	stw	r3,4(r2)
 80006c0:	e0bffe17 	ldw	r2,-8(fp)
 80006c4:	10c00117 	ldw	r3,4(r2)
 80006c8:	e0bffe17 	ldw	r2,-8(fp)
 80006cc:	10800317 	ldw	r2,12(r2)
 80006d0:	1885403a 	cmpgeu	r2,r3,r2
 80006d4:	10803fcc 	andi	r2,r2,255
 80006d8:	1000a926 	beq	r2,zero,8000980 <_ZN9skConsole9WriteCharEc+0x320>
		{
			mCsrX = 0;
 80006dc:	e0bffe17 	ldw	r2,-8(fp)
 80006e0:	10000115 	stw	zero,4(r2)
			mCsrY += 16;
 80006e4:	e0bffe17 	ldw	r2,-8(fp)
 80006e8:	10800217 	ldw	r2,8(r2)
 80006ec:	10c00404 	addi	r3,r2,16
 80006f0:	e0bffe17 	ldw	r2,-8(fp)
 80006f4:	10c00215 	stw	r3,8(r2)
			if(mCsrY >= mHeight)
 80006f8:	e0bffe17 	ldw	r2,-8(fp)
 80006fc:	10c00217 	ldw	r3,8(r2)
 8000700:	e0bffe17 	ldw	r2,-8(fp)
 8000704:	10800417 	ldw	r2,16(r2)
 8000708:	18809d36 	bltu	r3,r2,8000980 <_ZN9skConsole9WriteCharEc+0x320>
			{
				mCsrY = 0;
 800070c:	e0bffe17 	ldw	r2,-8(fp)
 8000710:	10000215 	stw	zero,8(r2)
			}
		} 
		return;
 8000714:	00009a06 	br	8000980 <_ZN9skConsole9WriteCharEc+0x320>
	case '\t':
		mCsrX = (((mCsrX / 8) / 4) + 1) * 4 * 8;
 8000718:	e0bffe17 	ldw	r2,-8(fp)
 800071c:	10800117 	ldw	r2,4(r2)
 8000720:	1004d17a 	srli	r2,r2,5
 8000724:	10800044 	addi	r2,r2,1
 8000728:	1006917a 	slli	r3,r2,5
 800072c:	e0bffe17 	ldw	r2,-8(fp)
 8000730:	10c00115 	stw	r3,4(r2)
		if(mCsrX >= mWidth)
 8000734:	e0bffe17 	ldw	r2,-8(fp)
 8000738:	10c00117 	ldw	r3,4(r2)
 800073c:	e0bffe17 	ldw	r2,-8(fp)
 8000740:	10800317 	ldw	r2,12(r2)
 8000744:	18809036 	bltu	r3,r2,8000988 <_ZN9skConsole9WriteCharEc+0x328>
		{
			mCsrX = 0;
 8000748:	e0bffe17 	ldw	r2,-8(fp)
 800074c:	10000115 	stw	zero,4(r2)
			mCsrY += 16;
 8000750:	e0bffe17 	ldw	r2,-8(fp)
 8000754:	10800217 	ldw	r2,8(r2)
 8000758:	10c00404 	addi	r3,r2,16
 800075c:	e0bffe17 	ldw	r2,-8(fp)
 8000760:	10c00215 	stw	r3,8(r2)
			if(mCsrY >= mHeight)
 8000764:	e0bffe17 	ldw	r2,-8(fp)
 8000768:	10c00217 	ldw	r3,8(r2)
 800076c:	e0bffe17 	ldw	r2,-8(fp)
 8000770:	10800417 	ldw	r2,16(r2)
 8000774:	18808436 	bltu	r3,r2,8000988 <_ZN9skConsole9WriteCharEc+0x328>
			{
				mCsrY = 0;
 8000778:	e0bffe17 	ldw	r2,-8(fp)
 800077c:	10000215 	stw	zero,8(r2)
			}
		}
		return;
 8000780:	00008106 	br	8000988 <_ZN9skConsole9WriteCharEc+0x328>
	case '\n':
		mCsrX = 0;
 8000784:	e0bffe17 	ldw	r2,-8(fp)
 8000788:	10000115 	stw	zero,4(r2)
		mCsrY += 16;
 800078c:	e0bffe17 	ldw	r2,-8(fp)
 8000790:	10800217 	ldw	r2,8(r2)
 8000794:	10c00404 	addi	r3,r2,16
 8000798:	e0bffe17 	ldw	r2,-8(fp)
 800079c:	10c00215 	stw	r3,8(r2)
		if(mCsrY >= mHeight)
 80007a0:	e0bffe17 	ldw	r2,-8(fp)
 80007a4:	10c00217 	ldw	r3,8(r2)
 80007a8:	e0bffe17 	ldw	r2,-8(fp)
 80007ac:	10800417 	ldw	r2,16(r2)
 80007b0:	18807736 	bltu	r3,r2,8000990 <_ZN9skConsole9WriteCharEc+0x330>
		{
			mCsrY = 0;
 80007b4:	e0bffe17 	ldw	r2,-8(fp)
 80007b8:	10000215 	stw	zero,8(r2)
		}
		return;
 80007bc:	00007406 	br	8000990 <_ZN9skConsole9WriteCharEc+0x330>
	case 0x08: //Backspace
		if((mCsrX-=8) < 0)
 80007c0:	e0bffe17 	ldw	r2,-8(fp)
 80007c4:	10800117 	ldw	r2,4(r2)
 80007c8:	10fffe04 	addi	r3,r2,-8
 80007cc:	e0bffe17 	ldw	r2,-8(fp)
 80007d0:	10c00115 	stw	r3,4(r2)
 80007d4:	0005883a 	mov	r2,zero
 80007d8:	10803fcc 	andi	r2,r2,255
 80007dc:	10000a26 	beq	r2,zero,8000808 <_ZN9skConsole9WriteCharEc+0x1a8>
		{
			mCsrX = mWidth - 8;
 80007e0:	e0bffe17 	ldw	r2,-8(fp)
 80007e4:	10800317 	ldw	r2,12(r2)
 80007e8:	10fffe04 	addi	r3,r2,-8
 80007ec:	e0bffe17 	ldw	r2,-8(fp)
 80007f0:	10c00115 	stw	r3,4(r2)
			mCsrY -= 16;
 80007f4:	e0bffe17 	ldw	r2,-8(fp)
 80007f8:	10800217 	ldw	r2,8(r2)
 80007fc:	10fffc04 	addi	r3,r2,-16
 8000800:	e0bffe17 	ldw	r2,-8(fp)
 8000804:	10c00215 	stw	r3,8(r2)
			if(mCsrY < 0)
			{
				mCsrY = mHeight - 16;
			}
		} 
		break;
 8000808:	0001883a 	nop
	default:
		break;
	}
	uint8_t const* lpChar = &CGROM[p*16];
 800080c:	e0bfff07 	ldb	r2,-4(fp)
 8000810:	1006913a 	slli	r3,r2,4
 8000814:	00820074 	movhi	r2,2049
 8000818:	10a312c4 	addi	r2,r2,-29621
 800081c:	1885883a 	add	r2,r3,r2
 8000820:	e0bff815 	stw	r2,-32(fp)
	uint16_t* lpPivot = &mBuff[mCsrY * mWidth + mCsrX];
 8000824:	e0bffe17 	ldw	r2,-8(fp)
 8000828:	10c00517 	ldw	r3,20(r2)
 800082c:	e0bffe17 	ldw	r2,-8(fp)
 8000830:	11000217 	ldw	r4,8(r2)
 8000834:	e0bffe17 	ldw	r2,-8(fp)
 8000838:	10800317 	ldw	r2,12(r2)
 800083c:	2089383a 	mul	r4,r4,r2
 8000840:	e0bffe17 	ldw	r2,-8(fp)
 8000844:	10800117 	ldw	r2,4(r2)
 8000848:	2085883a 	add	r2,r4,r2
 800084c:	1085883a 	add	r2,r2,r2
 8000850:	1885883a 	add	r2,r3,r2
 8000854:	e0bff915 	stw	r2,-28(fp)
	
	for(int row = 0; row < 16; ++row)
 8000858:	e03ffa15 	stw	zero,-24(fp)
 800085c:	e0bffa17 	ldw	r2,-24(fp)
 8000860:	10800408 	cmpgei	r2,r2,16
 8000864:	10002b1e 	bne	r2,zero,8000914 <_ZN9skConsole9WriteCharEc+0x2b4>
	{
		uint8_t ch = *lpChar++;
 8000868:	e0bff817 	ldw	r2,-32(fp)
 800086c:	10c00044 	addi	r3,r2,1
 8000870:	e0fff815 	stw	r3,-32(fp)
 8000874:	10800003 	ldbu	r2,0(r2)
 8000878:	e0bffb05 	stb	r2,-20(fp)
		uint16_t* lpHead = lpPivot;
 800087c:	e0bff917 	ldw	r2,-28(fp)
 8000880:	e0bffc15 	stw	r2,-16(fp)
		lpPivot += mWidth;
 8000884:	e0bffe17 	ldw	r2,-8(fp)
 8000888:	10800317 	ldw	r2,12(r2)
 800088c:	1085883a 	add	r2,r2,r2
 8000890:	1007883a 	mov	r3,r2
 8000894:	e0bff917 	ldw	r2,-28(fp)
 8000898:	10c5883a 	add	r2,r2,r3
 800089c:	e0bff915 	stw	r2,-28(fp)
		for(int dot = 0; dot < 8; ++dot)
 80008a0:	e03ffd15 	stw	zero,-12(fp)
 80008a4:	e0bffd17 	ldw	r2,-12(fp)
 80008a8:	10800208 	cmpgei	r2,r2,8
 80008ac:	1000151e 	bne	r2,zero,8000904 <_ZN9skConsole9WriteCharEc+0x2a4>
		{
			*lpHead++ = ch & 0x80 ? ForeColor : BackColor;
 80008b0:	e0bffc17 	ldw	r2,-16(fp)
 80008b4:	10c00084 	addi	r3,r2,2
 80008b8:	e0fffc15 	stw	r3,-16(fp)
 80008bc:	e0fffb03 	ldbu	r3,-20(fp)
 80008c0:	18c03fcc 	andi	r3,r3,255
 80008c4:	18c0201c 	xori	r3,r3,128
 80008c8:	18ffe004 	addi	r3,r3,-128
 80008cc:	1800030e 	bge	r3,zero,80008dc <_ZN9skConsole9WriteCharEc+0x27c>
 80008d0:	e0fffe17 	ldw	r3,-8(fp)
 80008d4:	18c0000b 	ldhu	r3,0(r3)
 80008d8:	00000206 	br	80008e4 <_ZN9skConsole9WriteCharEc+0x284>
 80008dc:	e0fffe17 	ldw	r3,-8(fp)
 80008e0:	18c0008b 	ldhu	r3,2(r3)
 80008e4:	10c0000d 	sth	r3,0(r2)
			ch <<= 1;
 80008e8:	e0bffb03 	ldbu	r2,-20(fp)
 80008ec:	1085883a 	add	r2,r2,r2
 80008f0:	e0bffb05 	stb	r2,-20(fp)
	for(int row = 0; row < 16; ++row)
	{
		uint8_t ch = *lpChar++;
		uint16_t* lpHead = lpPivot;
		lpPivot += mWidth;
		for(int dot = 0; dot < 8; ++dot)
 80008f4:	e0bffd17 	ldw	r2,-12(fp)
 80008f8:	10800044 	addi	r2,r2,1
 80008fc:	e0bffd15 	stw	r2,-12(fp)
 8000900:	003fe806 	br	80008a4 <__alt_mem_bufferram_out+0xf7e008a4>
		break;
	}
	uint8_t const* lpChar = &CGROM[p*16];
	uint16_t* lpPivot = &mBuff[mCsrY * mWidth + mCsrX];
	
	for(int row = 0; row < 16; ++row)
 8000904:	e0bffa17 	ldw	r2,-24(fp)
 8000908:	10800044 	addi	r2,r2,1
 800090c:	e0bffa15 	stw	r2,-24(fp)
 8000910:	003fd206 	br	800085c <__alt_mem_bufferram_out+0xf7e0085c>
			*lpHead++ = ch & 0x80 ? ForeColor : BackColor;
			ch <<= 1;
		}
	}
	
	if((mCsrX+=8) >= mWidth)
 8000914:	e0bffe17 	ldw	r2,-8(fp)
 8000918:	10800117 	ldw	r2,4(r2)
 800091c:	10c00204 	addi	r3,r2,8
 8000920:	e0bffe17 	ldw	r2,-8(fp)
 8000924:	10c00115 	stw	r3,4(r2)
 8000928:	e0bffe17 	ldw	r2,-8(fp)
 800092c:	10c00117 	ldw	r3,4(r2)
 8000930:	e0bffe17 	ldw	r2,-8(fp)
 8000934:	10800317 	ldw	r2,12(r2)
 8000938:	1885403a 	cmpgeu	r2,r3,r2
 800093c:	10803fcc 	andi	r2,r2,255
 8000940:	10001426 	beq	r2,zero,8000994 <_ZN9skConsole9WriteCharEc+0x334>
	{
		mCsrX = 0;
 8000944:	e0bffe17 	ldw	r2,-8(fp)
 8000948:	10000115 	stw	zero,4(r2)
		mCsrY += 16;
 800094c:	e0bffe17 	ldw	r2,-8(fp)
 8000950:	10800217 	ldw	r2,8(r2)
 8000954:	10c00404 	addi	r3,r2,16
 8000958:	e0bffe17 	ldw	r2,-8(fp)
 800095c:	10c00215 	stw	r3,8(r2)
		if(mCsrY >= mHeight)
 8000960:	e0bffe17 	ldw	r2,-8(fp)
 8000964:	10c00217 	ldw	r3,8(r2)
 8000968:	e0bffe17 	ldw	r2,-8(fp)
 800096c:	10800417 	ldw	r2,16(r2)
 8000970:	18800836 	bltu	r3,r2,8000994 <_ZN9skConsole9WriteCharEc+0x334>
		{
			mCsrY = 0;
 8000974:	e0bffe17 	ldw	r2,-8(fp)
 8000978:	10000215 	stw	zero,8(r2)
 800097c:	00000506 	br	8000994 <_ZN9skConsole9WriteCharEc+0x334>
			if(mCsrY >= mHeight)
			{
				mCsrY = 0;
			}
		} 
		return;
 8000980:	0001883a 	nop
 8000984:	00000306 	br	8000994 <_ZN9skConsole9WriteCharEc+0x334>
			if(mCsrY >= mHeight)
			{
				mCsrY = 0;
			}
		}
		return;
 8000988:	0001883a 	nop
 800098c:	00000106 	br	8000994 <_ZN9skConsole9WriteCharEc+0x334>
		mCsrY += 16;
		if(mCsrY >= mHeight)
		{
			mCsrY = 0;
		}
		return;
 8000990:	0001883a 	nop
		if(mCsrY >= mHeight)
		{
			mCsrY = 0;
		}
	}
}
 8000994:	e037883a 	mov	sp,fp
 8000998:	df000017 	ldw	fp,0(sp)
 800099c:	dec00104 	addi	sp,sp,4
 80009a0:	f800283a 	ret

080009a4 <_ZdlPv>:
 80009a4:	8002e641 	jmpi	8002e64 <free>

080009a8 <_ZL21size_of_encoded_valueh>:
 80009a8:	deffff04 	addi	sp,sp,-4
 80009ac:	dfc00015 	stw	ra,0(sp)
 80009b0:	20c03fcc 	andi	r3,r4,255
 80009b4:	00803fc4 	movi	r2,255
 80009b8:	18802026 	beq	r3,r2,8000a3c <_ZL21size_of_encoded_valueh+0x94>
 80009bc:	210001cc 	andi	r4,r4,7
 80009c0:	00800144 	movi	r2,5
 80009c4:	11001c36 	bltu	r2,r4,8000a38 <_ZL21size_of_encoded_valueh+0x90>
 80009c8:	200890ba 	slli	r4,r4,2
 80009cc:	00820034 	movhi	r2,2048
 80009d0:	10827804 	addi	r2,r2,2528
 80009d4:	2089883a 	add	r4,r4,r2
 80009d8:	20800017 	ldw	r2,0(r4)
 80009dc:	1000683a 	jmp	r2
 80009e0:	080009f8 	rdprs	zero,at,39
 80009e4:	08000a38 	rdprs	zero,at,40
 80009e8:	08000a08 	cmpgei	zero,at,40
 80009ec:	080009f8 	rdprs	zero,at,39
 80009f0:	08000a28 	cmpgeui	zero,at,40
 80009f4:	08000a18 	cmpnei	zero,at,40
 80009f8:	00800104 	movi	r2,4
 80009fc:	dfc00017 	ldw	ra,0(sp)
 8000a00:	dec00104 	addi	sp,sp,4
 8000a04:	f800283a 	ret
 8000a08:	00800084 	movi	r2,2
 8000a0c:	dfc00017 	ldw	ra,0(sp)
 8000a10:	dec00104 	addi	sp,sp,4
 8000a14:	f800283a 	ret
 8000a18:	00800044 	movi	r2,1
 8000a1c:	dfc00017 	ldw	ra,0(sp)
 8000a20:	dec00104 	addi	sp,sp,4
 8000a24:	f800283a 	ret
 8000a28:	00800204 	movi	r2,8
 8000a2c:	dfc00017 	ldw	ra,0(sp)
 8000a30:	dec00104 	addi	sp,sp,4
 8000a34:	f800283a 	ret
 8000a38:	8002d540 	call	8002d54 <abort>
 8000a3c:	0005883a 	mov	r2,zero
 8000a40:	dfc00017 	ldw	ra,0(sp)
 8000a44:	dec00104 	addi	sp,sp,4
 8000a48:	f800283a 	ret

08000a4c <_ZL28read_encoded_value_with_basehjPKhPj>:
 8000a4c:	deffff04 	addi	sp,sp,-4
 8000a50:	dfc00015 	stw	ra,0(sp)
 8000a54:	20c03fcc 	andi	r3,r4,255
 8000a58:	00801404 	movi	r2,80
 8000a5c:	18807326 	beq	r3,r2,8000c2c <_ZL28read_encoded_value_with_basehjPKhPj+0x1e0>
 8000a60:	20c003cc 	andi	r3,r4,15
 8000a64:	00800304 	movi	r2,12
 8000a68:	10c06f36 	bltu	r2,r3,8000c28 <_ZL28read_encoded_value_with_basehjPKhPj+0x1dc>
 8000a6c:	180690ba 	slli	r3,r3,2
 8000a70:	02020034 	movhi	r8,2048
 8000a74:	4202a104 	addi	r8,r8,2692
 8000a78:	1a07883a 	add	r3,r3,r8
 8000a7c:	18800017 	ldw	r2,0(r3)
 8000a80:	1000683a 	jmp	r2
 8000a84:	08000ab8 	rdprs	zero,at,42
 8000a88:	08000bd4 	ori	zero,at,47
 8000a8c:	08000c10 	cmplti	zero,at,48
 8000a90:	08000ab8 	rdprs	zero,at,42
 8000a94:	08000b1c 	xori	zero,at,44
 8000a98:	08000b70 	cmpltui	zero,at,45
 8000a9c:	08000c28 	cmpgeui	zero,at,48
 8000aa0:	08000c28 	cmpgeui	zero,at,48
 8000aa4:	08000c28 	cmpgeui	zero,at,48
 8000aa8:	08000b7c 	xorhi	zero,at,45
 8000aac:	08000b4c 	andi	zero,at,45
 8000ab0:	08000ab8 	rdprs	zero,at,42
 8000ab4:	08000b1c 	xori	zero,at,44
 8000ab8:	30800043 	ldbu	r2,1(r6)
 8000abc:	30c00083 	ldbu	r3,2(r6)
 8000ac0:	324000c3 	ldbu	r9,3(r6)
 8000ac4:	32000003 	ldbu	r8,0(r6)
 8000ac8:	1004923a 	slli	r2,r2,8
 8000acc:	1806943a 	slli	r3,r3,16
 8000ad0:	4812963a 	slli	r9,r9,24
 8000ad4:	1204b03a 	or	r2,r2,r8
 8000ad8:	1884b03a 	or	r2,r3,r2
 8000adc:	4886b03a 	or	r3,r9,r2
 8000ae0:	30800104 	addi	r2,r6,4
 8000ae4:	18000926 	beq	r3,zero,8000b0c <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
 8000ae8:	22001c0c 	andi	r8,r4,112
 8000aec:	02400404 	movi	r9,16
 8000af0:	42405726 	beq	r8,r9,8000c50 <_ZL28read_encoded_value_with_basehjPKhPj+0x204>
 8000af4:	21003fcc 	andi	r4,r4,255
 8000af8:	2100201c 	xori	r4,r4,128
 8000afc:	213fe004 	addi	r4,r4,-128
 8000b00:	1947883a 	add	r3,r3,r5
 8000b04:	2000010e 	bge	r4,zero,8000b0c <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
 8000b08:	18c00017 	ldw	r3,0(r3)
 8000b0c:	38c00015 	stw	r3,0(r7)
 8000b10:	dfc00017 	ldw	ra,0(sp)
 8000b14:	dec00104 	addi	sp,sp,4
 8000b18:	f800283a 	ret
 8000b1c:	30800043 	ldbu	r2,1(r6)
 8000b20:	30c00083 	ldbu	r3,2(r6)
 8000b24:	324000c3 	ldbu	r9,3(r6)
 8000b28:	32000003 	ldbu	r8,0(r6)
 8000b2c:	1004923a 	slli	r2,r2,8
 8000b30:	1806943a 	slli	r3,r3,16
 8000b34:	4812963a 	slli	r9,r9,24
 8000b38:	1204b03a 	or	r2,r2,r8
 8000b3c:	1884b03a 	or	r2,r3,r2
 8000b40:	4886b03a 	or	r3,r9,r2
 8000b44:	30800204 	addi	r2,r6,8
 8000b48:	003fe606 	br	8000ae4 <__alt_mem_bufferram_out+0xf7e00ae4>
 8000b4c:	30c00043 	ldbu	r3,1(r6)
 8000b50:	32000003 	ldbu	r8,0(r6)
 8000b54:	30800084 	addi	r2,r6,2
 8000b58:	1806923a 	slli	r3,r3,8
 8000b5c:	1a06b03a 	or	r3,r3,r8
 8000b60:	18ffffcc 	andi	r3,r3,65535
 8000b64:	18e0001c 	xori	r3,r3,32768
 8000b68:	18e00004 	addi	r3,r3,-32768
 8000b6c:	003fdd06 	br	8000ae4 <__alt_mem_bufferram_out+0xf7e00ae4>
 8000b70:	30c00003 	ldbu	r3,0(r6)
 8000b74:	30800044 	addi	r2,r6,1
 8000b78:	003fda06 	br	8000ae4 <__alt_mem_bufferram_out+0xf7e00ae4>
 8000b7c:	3017883a 	mov	r11,r6
 8000b80:	0007883a 	mov	r3,zero
 8000b84:	0013883a 	mov	r9,zero
 8000b88:	5a800003 	ldbu	r10,0(r11)
 8000b8c:	58800044 	addi	r2,r11,1
 8000b90:	1017883a 	mov	r11,r2
 8000b94:	52001fcc 	andi	r8,r10,127
 8000b98:	4250983a 	sll	r8,r8,r9
 8000b9c:	53003fcc 	andi	r12,r10,255
 8000ba0:	6300201c 	xori	r12,r12,128
 8000ba4:	633fe004 	addi	r12,r12,-128
 8000ba8:	1a06b03a 	or	r3,r3,r8
 8000bac:	4a4001c4 	addi	r9,r9,7
 8000bb0:	603ff516 	blt	r12,zero,8000b88 <__alt_mem_bufferram_out+0xf7e00b88>
 8000bb4:	020007c4 	movi	r8,31
 8000bb8:	427fca36 	bltu	r8,r9,8000ae4 <__alt_mem_bufferram_out+0xf7e00ae4>
 8000bbc:	5280100c 	andi	r10,r10,64
 8000bc0:	503fc826 	beq	r10,zero,8000ae4 <__alt_mem_bufferram_out+0xf7e00ae4>
 8000bc4:	023fffc4 	movi	r8,-1
 8000bc8:	4252983a 	sll	r9,r8,r9
 8000bcc:	1a46b03a 	or	r3,r3,r9
 8000bd0:	003fc506 	br	8000ae8 <__alt_mem_bufferram_out+0xf7e00ae8>
 8000bd4:	3017883a 	mov	r11,r6
 8000bd8:	0007883a 	mov	r3,zero
 8000bdc:	0015883a 	mov	r10,zero
 8000be0:	5a000003 	ldbu	r8,0(r11)
 8000be4:	58800044 	addi	r2,r11,1
 8000be8:	1017883a 	mov	r11,r2
 8000bec:	42401fcc 	andi	r9,r8,127
 8000bf0:	4a92983a 	sll	r9,r9,r10
 8000bf4:	42003fcc 	andi	r8,r8,255
 8000bf8:	4200201c 	xori	r8,r8,128
 8000bfc:	423fe004 	addi	r8,r8,-128
 8000c00:	1a46b03a 	or	r3,r3,r9
 8000c04:	528001c4 	addi	r10,r10,7
 8000c08:	403ff516 	blt	r8,zero,8000be0 <__alt_mem_bufferram_out+0xf7e00be0>
 8000c0c:	003fb506 	br	8000ae4 <__alt_mem_bufferram_out+0xf7e00ae4>
 8000c10:	30c00043 	ldbu	r3,1(r6)
 8000c14:	32000003 	ldbu	r8,0(r6)
 8000c18:	30800084 	addi	r2,r6,2
 8000c1c:	1806923a 	slli	r3,r3,8
 8000c20:	1a06b03a 	or	r3,r3,r8
 8000c24:	003faf06 	br	8000ae4 <__alt_mem_bufferram_out+0xf7e00ae4>
 8000c28:	8002d540 	call	8002d54 <abort>
 8000c2c:	308000c4 	addi	r2,r6,3
 8000c30:	00ffff04 	movi	r3,-4
 8000c34:	10c4703a 	and	r2,r2,r3
 8000c38:	10c00017 	ldw	r3,0(r2)
 8000c3c:	10800104 	addi	r2,r2,4
 8000c40:	38c00015 	stw	r3,0(r7)
 8000c44:	dfc00017 	ldw	ra,0(sp)
 8000c48:	dec00104 	addi	sp,sp,4
 8000c4c:	f800283a 	ret
 8000c50:	300b883a 	mov	r5,r6
 8000c54:	003fa706 	br	8000af4 <__alt_mem_bufferram_out+0xf7e00af4>

08000c58 <_ZL15get_ttype_entryP16lsda_header_infom>:
 8000c58:	defffc04 	addi	sp,sp,-16
 8000c5c:	dfc00315 	stw	ra,12(sp)
 8000c60:	dc400215 	stw	r17,8(sp)
 8000c64:	dc000115 	stw	r16,4(sp)
 8000c68:	2021883a 	mov	r16,r4
 8000c6c:	21000503 	ldbu	r4,20(r4)
 8000c70:	2823883a 	mov	r17,r5
 8000c74:	80009a80 	call	80009a8 <_ZL21size_of_encoded_valueh>
 8000c78:	1445383a 	mul	r2,r2,r17
 8000c7c:	81800317 	ldw	r6,12(r16)
 8000c80:	81400217 	ldw	r5,8(r16)
 8000c84:	81000503 	ldbu	r4,20(r16)
 8000c88:	d80f883a 	mov	r7,sp
 8000c8c:	308dc83a 	sub	r6,r6,r2
 8000c90:	8000a4c0 	call	8000a4c <_ZL28read_encoded_value_with_basehjPKhPj>
 8000c94:	d8800017 	ldw	r2,0(sp)
 8000c98:	dfc00317 	ldw	ra,12(sp)
 8000c9c:	dc400217 	ldw	r17,8(sp)
 8000ca0:	dc000117 	ldw	r16,4(sp)
 8000ca4:	dec00404 	addi	sp,sp,16
 8000ca8:	f800283a 	ret

08000cac <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 8000cac:	deffff04 	addi	sp,sp,-4
 8000cb0:	dfc00015 	stw	ra,0(sp)
 8000cb4:	20c03fcc 	andi	r3,r4,255
 8000cb8:	00803fc4 	movi	r2,255
 8000cbc:	18800e26 	beq	r3,r2,8000cf8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
 8000cc0:	20801c0c 	andi	r2,r4,112
 8000cc4:	00c00804 	movi	r3,32
 8000cc8:	10c01726 	beq	r2,r3,8000d28 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x7c>
 8000ccc:	18800e2e 	bgeu	r3,r2,8000d08 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x5c>
 8000cd0:	00c01004 	movi	r3,64
 8000cd4:	10c01026 	beq	r2,r3,8000d18 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x6c>
 8000cd8:	00c01404 	movi	r3,80
 8000cdc:	10c00626 	beq	r2,r3,8000cf8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
 8000ce0:	00c00c04 	movi	r3,48
 8000ce4:	10c00b1e 	bne	r2,r3,8000d14 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x68>
 8000ce8:	2809883a 	mov	r4,r5
 8000cec:	dfc00017 	ldw	ra,0(sp)
 8000cf0:	dec00104 	addi	sp,sp,4
 8000cf4:	8002b141 	jmpi	8002b14 <_Unwind_GetDataRelBase>
 8000cf8:	0005883a 	mov	r2,zero
 8000cfc:	dfc00017 	ldw	ra,0(sp)
 8000d00:	dec00104 	addi	sp,sp,4
 8000d04:	f800283a 	ret
 8000d08:	103ffb26 	beq	r2,zero,8000cf8 <__alt_mem_bufferram_out+0xf7e00cf8>
 8000d0c:	00c00404 	movi	r3,16
 8000d10:	10fff926 	beq	r2,r3,8000cf8 <__alt_mem_bufferram_out+0xf7e00cf8>
 8000d14:	8002d540 	call	8002d54 <abort>
 8000d18:	2809883a 	mov	r4,r5
 8000d1c:	dfc00017 	ldw	ra,0(sp)
 8000d20:	dec00104 	addi	sp,sp,4
 8000d24:	8002b041 	jmpi	8002b04 <_Unwind_GetRegionStart>
 8000d28:	2809883a 	mov	r4,r5
 8000d2c:	dfc00017 	ldw	ra,0(sp)
 8000d30:	dec00104 	addi	sp,sp,4
 8000d34:	8002b1c1 	jmpi	8002b1c <_Unwind_GetTextRelBase>

08000d38 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 8000d38:	defffb04 	addi	sp,sp,-20
 8000d3c:	dcc00315 	stw	r19,12(sp)
 8000d40:	dc400115 	stw	r17,4(sp)
 8000d44:	dc000015 	stw	r16,0(sp)
 8000d48:	dfc00415 	stw	ra,16(sp)
 8000d4c:	dc800215 	stw	r18,8(sp)
 8000d50:	2027883a 	mov	r19,r4
 8000d54:	2821883a 	mov	r16,r5
 8000d58:	3023883a 	mov	r17,r6
 8000d5c:	20003f26 	beq	r4,zero,8000e5c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x124>
 8000d60:	8002b040 	call	8002b04 <_Unwind_GetRegionStart>
 8000d64:	88800015 	stw	r2,0(r17)
 8000d68:	84800003 	ldbu	r18,0(r16)
 8000d6c:	00c03fc4 	movi	r3,255
 8000d70:	84000044 	addi	r16,r16,1
 8000d74:	90c03726 	beq	r18,r3,8000e54 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x11c>
 8000d78:	980b883a 	mov	r5,r19
 8000d7c:	9009883a 	mov	r4,r18
 8000d80:	8000cac0 	call	8000cac <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8000d84:	800d883a 	mov	r6,r16
 8000d88:	89c00104 	addi	r7,r17,4
 8000d8c:	100b883a 	mov	r5,r2
 8000d90:	9009883a 	mov	r4,r18
 8000d94:	8000a4c0 	call	8000a4c <_ZL28read_encoded_value_with_basehjPKhPj>
 8000d98:	1021883a 	mov	r16,r2
 8000d9c:	80c00003 	ldbu	r3,0(r16)
 8000da0:	01003fc4 	movi	r4,255
 8000da4:	80800044 	addi	r2,r16,1
 8000da8:	88c00505 	stb	r3,20(r17)
 8000dac:	18c03fcc 	andi	r3,r3,255
 8000db0:	19002c26 	beq	r3,r4,8000e64 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x12c>
 8000db4:	100f883a 	mov	r7,r2
 8000db8:	000d883a 	mov	r6,zero
 8000dbc:	000b883a 	mov	r5,zero
 8000dc0:	38c00003 	ldbu	r3,0(r7)
 8000dc4:	10800044 	addi	r2,r2,1
 8000dc8:	100f883a 	mov	r7,r2
 8000dcc:	19001fcc 	andi	r4,r3,127
 8000dd0:	2148983a 	sll	r4,r4,r5
 8000dd4:	18c03fcc 	andi	r3,r3,255
 8000dd8:	18c0201c 	xori	r3,r3,128
 8000ddc:	18ffe004 	addi	r3,r3,-128
 8000de0:	310cb03a 	or	r6,r6,r4
 8000de4:	294001c4 	addi	r5,r5,7
 8000de8:	183ff516 	blt	r3,zero,8000dc0 <__alt_mem_bufferram_out+0xf7e00dc0>
 8000dec:	118d883a 	add	r6,r2,r6
 8000df0:	89800315 	stw	r6,12(r17)
 8000df4:	10c00003 	ldbu	r3,0(r2)
 8000df8:	000d883a 	mov	r6,zero
 8000dfc:	10800044 	addi	r2,r2,1
 8000e00:	88c00545 	stb	r3,21(r17)
 8000e04:	000b883a 	mov	r5,zero
 8000e08:	10c00003 	ldbu	r3,0(r2)
 8000e0c:	10800044 	addi	r2,r2,1
 8000e10:	19001fcc 	andi	r4,r3,127
 8000e14:	2148983a 	sll	r4,r4,r5
 8000e18:	18c03fcc 	andi	r3,r3,255
 8000e1c:	18c0201c 	xori	r3,r3,128
 8000e20:	18ffe004 	addi	r3,r3,-128
 8000e24:	310cb03a 	or	r6,r6,r4
 8000e28:	294001c4 	addi	r5,r5,7
 8000e2c:	183ff616 	blt	r3,zero,8000e08 <__alt_mem_bufferram_out+0xf7e00e08>
 8000e30:	118d883a 	add	r6,r2,r6
 8000e34:	89800415 	stw	r6,16(r17)
 8000e38:	dfc00417 	ldw	ra,16(sp)
 8000e3c:	dcc00317 	ldw	r19,12(sp)
 8000e40:	dc800217 	ldw	r18,8(sp)
 8000e44:	dc400117 	ldw	r17,4(sp)
 8000e48:	dc000017 	ldw	r16,0(sp)
 8000e4c:	dec00504 	addi	sp,sp,20
 8000e50:	f800283a 	ret
 8000e54:	88800115 	stw	r2,4(r17)
 8000e58:	003fd006 	br	8000d9c <__alt_mem_bufferram_out+0xf7e00d9c>
 8000e5c:	0005883a 	mov	r2,zero
 8000e60:	003fc006 	br	8000d64 <__alt_mem_bufferram_out+0xf7e00d64>
 8000e64:	88000315 	stw	zero,12(r17)
 8000e68:	003fe206 	br	8000df4 <__alt_mem_bufferram_out+0xf7e00df4>

08000e6c <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>:
 8000e6c:	28800017 	ldw	r2,0(r5)
 8000e70:	30c00017 	ldw	r3,0(r6)
 8000e74:	defffb04 	addi	sp,sp,-20
 8000e78:	10800217 	ldw	r2,8(r2)
 8000e7c:	dc400315 	stw	r17,12(sp)
 8000e80:	dc000215 	stw	r16,8(sp)
 8000e84:	d9400115 	stw	r5,4(sp)
 8000e88:	dfc00415 	stw	ra,16(sp)
 8000e8c:	2021883a 	mov	r16,r4
 8000e90:	d8c00015 	stw	r3,0(sp)
 8000e94:	2809883a 	mov	r4,r5
 8000e98:	3023883a 	mov	r17,r6
 8000e9c:	103ee83a 	callr	r2
 8000ea0:	10803fcc 	andi	r2,r2,255
 8000ea4:	d9400117 	ldw	r5,4(sp)
 8000ea8:	10000326 	beq	r2,zero,8000eb8 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x4c>
 8000eac:	d8800017 	ldw	r2,0(sp)
 8000eb0:	10800017 	ldw	r2,0(r2)
 8000eb4:	d8800015 	stw	r2,0(sp)
 8000eb8:	80800017 	ldw	r2,0(r16)
 8000ebc:	01c00044 	movi	r7,1
 8000ec0:	d80d883a 	mov	r6,sp
 8000ec4:	10800417 	ldw	r2,16(r2)
 8000ec8:	8009883a 	mov	r4,r16
 8000ecc:	103ee83a 	callr	r2
 8000ed0:	10c03fcc 	andi	r3,r2,255
 8000ed4:	18000226 	beq	r3,zero,8000ee0 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x74>
 8000ed8:	d8c00017 	ldw	r3,0(sp)
 8000edc:	88c00015 	stw	r3,0(r17)
 8000ee0:	dfc00417 	ldw	ra,16(sp)
 8000ee4:	dc400317 	ldw	r17,12(sp)
 8000ee8:	dc000217 	ldw	r16,8(sp)
 8000eec:	dec00504 	addi	sp,sp,20
 8000ef0:	f800283a 	ret

08000ef4 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>:
 8000ef4:	defff604 	addi	sp,sp,-40
 8000ef8:	dc000415 	stw	r16,16(sp)
 8000efc:	3821d23a 	srai	r16,r7,8
 8000f00:	dc800615 	stw	r18,24(sp)
 8000f04:	dc400515 	stw	r17,20(sp)
 8000f08:	dfc00915 	stw	ra,36(sp)
 8000f0c:	dd000815 	stw	r20,32(sp)
 8000f10:	dcc00715 	stw	r19,28(sp)
 8000f14:	d9400215 	stw	r5,8(sp)
 8000f18:	3825883a 	mov	r18,r7
 8000f1c:	2023883a 	mov	r17,r4
 8000f20:	8000010e 	bge	r16,zero,8000f28 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x34>
 8000f24:	0421c83a 	sub	r16,zero,r16
 8000f28:	000b883a 	mov	r5,zero
 8000f2c:	01000144 	movi	r4,5
 8000f30:	d9800315 	stw	r6,12(sp)
 8000f34:	8000cac0 	call	8000cac <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8000f38:	d9800317 	ldw	r6,12(sp)
 8000f3c:	d9c00104 	addi	r7,sp,4
 8000f40:	100b883a 	mov	r5,r2
 8000f44:	01000144 	movi	r4,5
 8000f48:	8000a4c0 	call	8000a4c <_ZL28read_encoded_value_with_basehjPKhPj>
 8000f4c:	11fffe64 	muli	r7,r2,-7
 8000f50:	0007883a 	mov	r3,zero
 8000f54:	11400003 	ldbu	r5,0(r2)
 8000f58:	110001e4 	muli	r4,r2,7
 8000f5c:	10800044 	addi	r2,r2,1
 8000f60:	29801fcc 	andi	r6,r5,127
 8000f64:	21c9883a 	add	r4,r4,r7
 8000f68:	3108983a 	sll	r4,r6,r4
 8000f6c:	29403fcc 	andi	r5,r5,255
 8000f70:	2940201c 	xori	r5,r5,128
 8000f74:	297fe004 	addi	r5,r5,-128
 8000f78:	1906b03a 	or	r3,r3,r4
 8000f7c:	283ff516 	blt	r5,zero,8000f54 <__alt_mem_bufferram_out+0xf7e00f54>
 8000f80:	10c5883a 	add	r2,r2,r3
 8000f84:	11fffe64 	muli	r7,r2,-7
 8000f88:	0009883a 	mov	r4,zero
 8000f8c:	11400003 	ldbu	r5,0(r2)
 8000f90:	10c001e4 	muli	r3,r2,7
 8000f94:	10800044 	addi	r2,r2,1
 8000f98:	29801fcc 	andi	r6,r5,127
 8000f9c:	19c7883a 	add	r3,r3,r7
 8000fa0:	30c6983a 	sll	r3,r6,r3
 8000fa4:	29403fcc 	andi	r5,r5,255
 8000fa8:	2940201c 	xori	r5,r5,128
 8000fac:	297fe004 	addi	r5,r5,-128
 8000fb0:	20c8b03a 	or	r4,r4,r3
 8000fb4:	283ff516 	blt	r5,zero,8000f8c <__alt_mem_bufferram_out+0xf7e00f8c>
 8000fb8:	80c03fcc 	andi	r3,r16,255
 8000fbc:	18ffffc4 	addi	r3,r3,-1
 8000fc0:	10c7883a 	add	r3,r2,r3
 8000fc4:	210000c4 	addi	r4,r4,3
 8000fc8:	197ffe64 	muli	r5,r3,-7
 8000fcc:	2085883a 	add	r2,r4,r2
 8000fd0:	04ffff04 	movi	r19,-4
 8000fd4:	14e6703a 	and	r19,r2,r19
 8000fd8:	0021883a 	mov	r16,zero
 8000fdc:	18800003 	ldbu	r2,0(r3)
 8000fe0:	190001e4 	muli	r4,r3,7
 8000fe4:	1d000044 	addi	r20,r3,1
 8000fe8:	10c01fcc 	andi	r3,r2,127
 8000fec:	2149883a 	add	r4,r4,r5
 8000ff0:	1908983a 	sll	r4,r3,r4
 8000ff4:	10803fcc 	andi	r2,r2,255
 8000ff8:	1080201c 	xori	r2,r2,128
 8000ffc:	10bfe004 	addi	r2,r2,-128
 8001000:	a007883a 	mov	r3,r20
 8001004:	8120b03a 	or	r16,r16,r4
 8001008:	103ff416 	blt	r2,zero,8000fdc <__alt_mem_bufferram_out+0xf7e00fdc>
 800100c:	94803fcc 	andi	r18,r18,255
 8001010:	80001f26 	beq	r16,zero,8001090 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x19c>
 8001014:	9009883a 	mov	r4,r18
 8001018:	80009a80 	call	80009a8 <_ZL21size_of_encoded_valueh>
 800101c:	81bfffc4 	addi	r6,r16,-1
 8001020:	308d383a 	mul	r6,r6,r2
 8001024:	d9400a17 	ldw	r5,40(sp)
 8001028:	d80f883a 	mov	r7,sp
 800102c:	9009883a 	mov	r4,r18
 8001030:	34cd883a 	add	r6,r6,r19
 8001034:	8000a4c0 	call	8000a4c <_ZL28read_encoded_value_with_basehjPKhPj>
 8001038:	d9000017 	ldw	r4,0(sp)
 800103c:	d9800204 	addi	r6,sp,8
 8001040:	880b883a 	mov	r5,r17
 8001044:	8000e6c0 	call	8000e6c <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
 8001048:	10c03fcc 	andi	r3,r2,255
 800104c:	1800111e 	bne	r3,zero,8001094 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x1a0>
 8001050:	a17ffe64 	muli	r5,r20,-7
 8001054:	a007883a 	mov	r3,r20
 8001058:	0021883a 	mov	r16,zero
 800105c:	19000003 	ldbu	r4,0(r3)
 8001060:	18c001e4 	muli	r3,r3,7
 8001064:	a5000044 	addi	r20,r20,1
 8001068:	20801fcc 	andi	r2,r4,127
 800106c:	1947883a 	add	r3,r3,r5
 8001070:	10c4983a 	sll	r2,r2,r3
 8001074:	21003fcc 	andi	r4,r4,255
 8001078:	2100201c 	xori	r4,r4,128
 800107c:	213fe004 	addi	r4,r4,-128
 8001080:	a007883a 	mov	r3,r20
 8001084:	80a0b03a 	or	r16,r16,r2
 8001088:	203ff416 	blt	r4,zero,800105c <__alt_mem_bufferram_out+0xf7e0105c>
 800108c:	003fe006 	br	8001010 <__alt_mem_bufferram_out+0xf7e01010>
 8001090:	0005883a 	mov	r2,zero
 8001094:	dfc00917 	ldw	ra,36(sp)
 8001098:	dd000817 	ldw	r20,32(sp)
 800109c:	dcc00717 	ldw	r19,28(sp)
 80010a0:	dc800617 	ldw	r18,24(sp)
 80010a4:	dc400517 	ldw	r17,20(sp)
 80010a8:	dc000417 	ldw	r16,16(sp)
 80010ac:	dec00a04 	addi	sp,sp,40
 80010b0:	f800283a 	ret

080010b4 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>:
 80010b4:	defffb04 	addi	sp,sp,-20
 80010b8:	dc000115 	stw	r16,4(sp)
 80010bc:	24000317 	ldw	r16,12(r4)
 80010c0:	01ce303a 	nor	r7,zero,r7
 80010c4:	dc800315 	stw	r18,12(sp)
 80010c8:	dc400215 	stw	r17,8(sp)
 80010cc:	dfc00415 	stw	ra,16(sp)
 80010d0:	2023883a 	mov	r17,r4
 80010d4:	2825883a 	mov	r18,r5
 80010d8:	d9800015 	stw	r6,0(sp)
 80010dc:	81e1883a 	add	r16,r16,r7
 80010e0:	800d883a 	mov	r6,r16
 80010e4:	000b883a 	mov	r5,zero
 80010e8:	0009883a 	mov	r4,zero
 80010ec:	30800003 	ldbu	r2,0(r6)
 80010f0:	84000044 	addi	r16,r16,1
 80010f4:	800d883a 	mov	r6,r16
 80010f8:	10c01fcc 	andi	r3,r2,127
 80010fc:	1906983a 	sll	r3,r3,r4
 8001100:	10803fcc 	andi	r2,r2,255
 8001104:	1080201c 	xori	r2,r2,128
 8001108:	10bfe004 	addi	r2,r2,-128
 800110c:	28cab03a 	or	r5,r5,r3
 8001110:	210001c4 	addi	r4,r4,7
 8001114:	103ff516 	blt	r2,zero,80010ec <__alt_mem_bufferram_out+0xf7e010ec>
 8001118:	28000e26 	beq	r5,zero,8001154 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xa0>
 800111c:	8809883a 	mov	r4,r17
 8001120:	8000c580 	call	8000c58 <_ZL15get_ttype_entryP16lsda_header_infom>
 8001124:	d80d883a 	mov	r6,sp
 8001128:	900b883a 	mov	r5,r18
 800112c:	1009883a 	mov	r4,r2
 8001130:	8000e6c0 	call	8000e6c <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
 8001134:	10c03fcc 	andi	r3,r2,255
 8001138:	183fe926 	beq	r3,zero,80010e0 <__alt_mem_bufferram_out+0xf7e010e0>
 800113c:	dfc00417 	ldw	ra,16(sp)
 8001140:	dc800317 	ldw	r18,12(sp)
 8001144:	dc400217 	ldw	r17,8(sp)
 8001148:	dc000117 	ldw	r16,4(sp)
 800114c:	dec00504 	addi	sp,sp,20
 8001150:	f800283a 	ret
 8001154:	0005883a 	mov	r2,zero
 8001158:	003ff806 	br	800113c <__alt_mem_bufferram_out+0xf7e0113c>

0800115c <__gxx_personality_sj0>:
 800115c:	00820034 	movhi	r2,2048
 8001160:	deffdd04 	addi	sp,sp,-140
 8001164:	10845704 	addi	r2,r2,4444
 8001168:	d8800e15 	stw	r2,56(sp)
 800116c:	00820074 	movhi	r2,2049
 8001170:	10a2f704 	addi	r2,r2,-29732
 8001174:	d8800f15 	stw	r2,60(sp)
 8001178:	00820034 	movhi	r2,2048
 800117c:	1085cd04 	addi	r2,r2,5940
 8001180:	d9001515 	stw	r4,84(sp)
 8001184:	d9000804 	addi	r4,sp,32
 8001188:	d8801115 	stw	r2,68(sp)
 800118c:	dfc02215 	stw	ra,136(sp)
 8001190:	df002115 	stw	fp,132(sp)
 8001194:	dec01015 	stw	sp,64(sp)
 8001198:	dec01215 	stw	sp,72(sp)
 800119c:	d9401915 	stw	r5,100(sp)
 80011a0:	d9801615 	stw	r6,88(sp)
 80011a4:	d9c01715 	stw	r7,92(sp)
 80011a8:	8002a3c0 	call	8002a3c <_Unwind_SjLj_Register>
 80011ac:	d8c01517 	ldw	r3,84(sp)
 80011b0:	d8000715 	stw	zero,28(sp)
 80011b4:	d8000615 	stw	zero,24(sp)
 80011b8:	00800044 	movi	r2,1
 80011bc:	18800926 	beq	r3,r2,80011e4 <__gxx_personality_sj0+0x88>
 80011c0:	01c000c4 	movi	r7,3
 80011c4:	d9c01515 	stw	r7,84(sp)
 80011c8:	d9000804 	addi	r4,sp,32
 80011cc:	8002a540 	call	8002a54 <_Unwind_SjLj_Unregister>
 80011d0:	d8801517 	ldw	r2,84(sp)
 80011d4:	dfc02217 	ldw	ra,136(sp)
 80011d8:	df002117 	ldw	fp,132(sp)
 80011dc:	dec02304 	addi	sp,sp,140
 80011e0:	f800283a 	ret
 80011e4:	d9001617 	ldw	r4,88(sp)
 80011e8:	00af3574 	movhi	r2,48341
 80011ec:	d9c01717 	ldw	r7,92(sp)
 80011f0:	10b54004 	addi	r2,r2,-11008
 80011f4:	00ee2cb4 	movhi	r3,47282
 80011f8:	2085883a 	add	r2,r4,r2
 80011fc:	18eaaf04 	addi	r3,r3,-21828
 8001200:	d8801b15 	stw	r2,108(sp)
 8001204:	38c7883a 	add	r3,r7,r3
 8001208:	1105803a 	cmpltu	r2,r2,r4
 800120c:	10c7883a 	add	r3,r2,r3
 8001210:	d8c01c15 	stw	r3,112(sp)
 8001214:	d8c01917 	ldw	r3,100(sp)
 8001218:	00800184 	movi	r2,6
 800121c:	18805426 	beq	r3,r2,8001370 <__gxx_personality_sj0+0x214>
 8001220:	d9002417 	ldw	r4,144(sp)
 8001224:	00bfffc4 	movi	r2,-1
 8001228:	d8800915 	stw	r2,36(sp)
 800122c:	8002af80 	call	8002af8 <_Unwind_GetLanguageSpecificData>
 8001230:	d8801a15 	stw	r2,104(sp)
 8001234:	1000c926 	beq	r2,zero,800155c <__gxx_personality_sj0+0x400>
 8001238:	d9002417 	ldw	r4,144(sp)
 800123c:	d80d883a 	mov	r6,sp
 8001240:	100b883a 	mov	r5,r2
 8001244:	8000d380 	call	8000d38 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8001248:	d9402417 	ldw	r5,144(sp)
 800124c:	d9000503 	ldbu	r4,20(sp)
 8001250:	d8801515 	stw	r2,84(sp)
 8001254:	8000cac0 	call	8000cac <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8001258:	d9002417 	ldw	r4,144(sp)
 800125c:	d9400604 	addi	r5,sp,24
 8001260:	d8800215 	stw	r2,8(sp)
 8001264:	8002ac80 	call	8002ac8 <_Unwind_GetIPInfo>
 8001268:	d8c00617 	ldw	r3,24(sp)
 800126c:	18006126 	beq	r3,zero,80013f4 <__gxx_personality_sj0+0x298>
 8001270:	1000ba16 	blt	r2,zero,800155c <__gxx_personality_sj0+0x400>
 8001274:	10002f1e 	bne	r2,zero,8001334 <__gxx_personality_sj0+0x1d8>
 8001278:	d8001515 	stw	zero,84(sp)
 800127c:	d8001f15 	stw	zero,124(sp)
 8001280:	d8001815 	stw	zero,96(sp)
 8001284:	00c00044 	movi	r3,1
 8001288:	d9001917 	ldw	r4,100(sp)
 800128c:	2080004c 	andi	r2,r4,1
 8001290:	1000b51e 	bne	r2,zero,8001568 <__gxx_personality_sj0+0x40c>
 8001294:	d9001917 	ldw	r4,100(sp)
 8001298:	2080020c 	andi	r2,r4,8
 800129c:	1000b71e 	bne	r2,zero,800157c <__gxx_personality_sj0+0x420>
 80012a0:	d9c01c17 	ldw	r7,112(sp)
 80012a4:	3800b826 	beq	r7,zero,8001588 <__gxx_personality_sj0+0x42c>
 80012a8:	00800044 	movi	r2,1
 80012ac:	1880b526 	beq	r3,r2,8001584 <__gxx_personality_sj0+0x428>
 80012b0:	d9c01517 	ldw	r7,84(sp)
 80012b4:	3800f516 	blt	r7,zero,800168c <__gxx_personality_sj0+0x530>
 80012b8:	d9002417 	ldw	r4,144(sp)
 80012bc:	d9802317 	ldw	r6,140(sp)
 80012c0:	00bfffc4 	movi	r2,-1
 80012c4:	000b883a 	mov	r5,zero
 80012c8:	d8800915 	stw	r2,36(sp)
 80012cc:	8002a9c0 	call	8002a9c <_Unwind_SetGR>
 80012d0:	d9801517 	ldw	r6,84(sp)
 80012d4:	d9002417 	ldw	r4,144(sp)
 80012d8:	01400044 	movi	r5,1
 80012dc:	8002a9c0 	call	8002a9c <_Unwind_SetGR>
 80012e0:	d9002417 	ldw	r4,144(sp)
 80012e4:	d9401f17 	ldw	r5,124(sp)
 80012e8:	8002ae80 	call	8002ae8 <_Unwind_SetIP>
 80012ec:	010001c4 	movi	r4,7
 80012f0:	d9001515 	stw	r4,84(sp)
 80012f4:	003fb406 	br	80011c8 <__alt_mem_bufferram_out+0xf7e011c8>
 80012f8:	000f883a 	mov	r7,zero
 80012fc:	000d883a 	mov	r6,zero
 8001300:	19000003 	ldbu	r4,0(r3)
 8001304:	18c00044 	addi	r3,r3,1
 8001308:	d8c01515 	stw	r3,84(sp)
 800130c:	21401fcc 	andi	r5,r4,127
 8001310:	298a983a 	sll	r5,r5,r6
 8001314:	21003fcc 	andi	r4,r4,255
 8001318:	2100201c 	xori	r4,r4,128
 800131c:	213fe004 	addi	r4,r4,-128
 8001320:	394eb03a 	or	r7,r7,r5
 8001324:	318001c4 	addi	r6,r6,7
 8001328:	203ff516 	blt	r4,zero,8001300 <__alt_mem_bufferram_out+0xf7e01300>
 800132c:	10bfffc4 	addi	r2,r2,-1
 8001330:	10003226 	beq	r2,zero,80013fc <__gxx_personality_sj0+0x2a0>
 8001334:	d9c01517 	ldw	r7,84(sp)
 8001338:	0011883a 	mov	r8,zero
 800133c:	000d883a 	mov	r6,zero
 8001340:	39000003 	ldbu	r4,0(r7)
 8001344:	38c00044 	addi	r3,r7,1
 8001348:	180f883a 	mov	r7,r3
 800134c:	21401fcc 	andi	r5,r4,127
 8001350:	298a983a 	sll	r5,r5,r6
 8001354:	21003fcc 	andi	r4,r4,255
 8001358:	2100201c 	xori	r4,r4,128
 800135c:	213fe004 	addi	r4,r4,-128
 8001360:	4150b03a 	or	r8,r8,r5
 8001364:	318001c4 	addi	r6,r6,7
 8001368:	203ff516 	blt	r4,zero,8001340 <__alt_mem_bufferram_out+0xf7e01340>
 800136c:	003fe206 	br	80012f8 <__alt_mem_bufferram_out+0xf7e012f8>
 8001370:	d9001c17 	ldw	r4,112(sp)
 8001374:	203faa1e 	bne	r4,zero,8001220 <__alt_mem_bufferram_out+0xf7e01220>
 8001378:	d9c01517 	ldw	r7,84(sp)
 800137c:	d8801b17 	ldw	r2,108(sp)
 8001380:	38bfa736 	bltu	r7,r2,8001220 <__alt_mem_bufferram_out+0xf7e01220>
 8001384:	d8c02317 	ldw	r3,140(sp)
 8001388:	18fffe17 	ldw	r3,-8(r3)
 800138c:	d8c01f15 	stw	r3,124(sp)
 8001390:	18008226 	beq	r3,zero,800159c <__gxx_personality_sj0+0x440>
 8001394:	d9002317 	ldw	r4,140(sp)
 8001398:	d9c02317 	ldw	r7,140(sp)
 800139c:	213ffb17 	ldw	r4,-20(r4)
 80013a0:	39fffd17 	ldw	r7,-12(r7)
 80013a4:	d9001515 	stw	r4,84(sp)
 80013a8:	d9c01a15 	stw	r7,104(sp)
 80013ac:	d8801517 	ldw	r2,84(sp)
 80013b0:	103fc10e 	bge	r2,zero,80012b8 <__alt_mem_bufferram_out+0xf7e012b8>
 80013b4:	d9002417 	ldw	r4,144(sp)
 80013b8:	d9401a17 	ldw	r5,104(sp)
 80013bc:	d80d883a 	mov	r6,sp
 80013c0:	00bfffc4 	movi	r2,-1
 80013c4:	d8800915 	stw	r2,36(sp)
 80013c8:	8000d380 	call	8000d38 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 80013cc:	d9402417 	ldw	r5,144(sp)
 80013d0:	d9000503 	ldbu	r4,20(sp)
 80013d4:	8000cac0 	call	8000cac <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 80013d8:	d9000503 	ldbu	r4,20(sp)
 80013dc:	d9402417 	ldw	r5,144(sp)
 80013e0:	d8800215 	stw	r2,8(sp)
 80013e4:	8000cac0 	call	8000cac <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 80013e8:	d8c02317 	ldw	r3,140(sp)
 80013ec:	18bffe15 	stw	r2,-8(r3)
 80013f0:	003fb106 	br	80012b8 <__alt_mem_bufferram_out+0xf7e012b8>
 80013f4:	10bfffc4 	addi	r2,r2,-1
 80013f8:	003f9d06 	br	8001270 <__alt_mem_bufferram_out+0xf7e01270>
 80013fc:	42000044 	addi	r8,r8,1
 8001400:	da001f15 	stw	r8,124(sp)
 8001404:	38005326 	beq	r7,zero,8001554 <__gxx_personality_sj0+0x3f8>
 8001408:	d8800417 	ldw	r2,16(sp)
 800140c:	39ffffc4 	addi	r7,r7,-1
 8001410:	11c5883a 	add	r2,r2,r7
 8001414:	d8801815 	stw	r2,96(sp)
 8001418:	40005026 	beq	r8,zero,800155c <__gxx_personality_sj0+0x400>
 800141c:	10007426 	beq	r2,zero,80015f0 <__gxx_personality_sj0+0x494>
 8001420:	d8801917 	ldw	r2,100(sp)
 8001424:	1080020c 	andi	r2,r2,8
 8001428:	d8802015 	stw	r2,128(sp)
 800142c:	1000a21e 	bne	r2,zero,80016b8 <__gxx_personality_sj0+0x55c>
 8001430:	d8c01c17 	ldw	r3,112(sp)
 8001434:	1800b026 	beq	r3,zero,80016f8 <__gxx_personality_sj0+0x59c>
 8001438:	01c20074 	movhi	r7,2049
 800143c:	39ec4704 	addi	r7,r7,-20196
 8001440:	d9c01e15 	stw	r7,120(sp)
 8001444:	d8001d05 	stb	zero,116(sp)
 8001448:	d8c01817 	ldw	r3,96(sp)
 800144c:	d8001515 	stw	zero,84(sp)
 8001450:	0009883a 	mov	r4,zero
 8001454:	19400003 	ldbu	r5,0(r3)
 8001458:	18800044 	addi	r2,r3,1
 800145c:	d9c01517 	ldw	r7,84(sp)
 8001460:	28c01fcc 	andi	r3,r5,127
 8001464:	1906983a 	sll	r3,r3,r4
 8001468:	29803fcc 	andi	r6,r5,255
 800146c:	3180201c 	xori	r6,r6,128
 8001470:	38ceb03a 	or	r7,r7,r3
 8001474:	d8801715 	stw	r2,92(sp)
 8001478:	31bfe004 	addi	r6,r6,-128
 800147c:	d9c01515 	stw	r7,84(sp)
 8001480:	210001c4 	addi	r4,r4,7
 8001484:	1007883a 	mov	r3,r2
 8001488:	303ff216 	blt	r6,zero,8001454 <__alt_mem_bufferram_out+0xf7e01454>
 800148c:	00c007c4 	movi	r3,31
 8001490:	19000836 	bltu	r3,r4,80014b4 <__gxx_personality_sj0+0x358>
 8001494:	2940100c 	andi	r5,r5,64
 8001498:	28000626 	beq	r5,zero,80014b4 <__gxx_personality_sj0+0x358>
 800149c:	01c00044 	movi	r7,1
 80014a0:	3908983a 	sll	r4,r7,r4
 80014a4:	d8c01517 	ldw	r3,84(sp)
 80014a8:	0109c83a 	sub	r4,zero,r4
 80014ac:	1906b03a 	or	r3,r3,r4
 80014b0:	d8c01515 	stw	r3,84(sp)
 80014b4:	d8001615 	stw	zero,88(sp)
 80014b8:	0009883a 	mov	r4,zero
 80014bc:	11400003 	ldbu	r5,0(r2)
 80014c0:	d9c01617 	ldw	r7,88(sp)
 80014c4:	10800044 	addi	r2,r2,1
 80014c8:	28c01fcc 	andi	r3,r5,127
 80014cc:	1906983a 	sll	r3,r3,r4
 80014d0:	29803fcc 	andi	r6,r5,255
 80014d4:	3180201c 	xori	r6,r6,128
 80014d8:	38ceb03a 	or	r7,r7,r3
 80014dc:	31bfe004 	addi	r6,r6,-128
 80014e0:	d9c01615 	stw	r7,88(sp)
 80014e4:	210001c4 	addi	r4,r4,7
 80014e8:	303ff416 	blt	r6,zero,80014bc <__alt_mem_bufferram_out+0xf7e014bc>
 80014ec:	008007c4 	movi	r2,31
 80014f0:	11000736 	bltu	r2,r4,8001510 <__gxx_personality_sj0+0x3b4>
 80014f4:	2940100c 	andi	r5,r5,64
 80014f8:	28000526 	beq	r5,zero,8001510 <__gxx_personality_sj0+0x3b4>
 80014fc:	00c00044 	movi	r3,1
 8001500:	1908983a 	sll	r4,r3,r4
 8001504:	0109c83a 	sub	r4,zero,r4
 8001508:	390eb03a 	or	r7,r7,r4
 800150c:	d9c01615 	stw	r7,88(sp)
 8001510:	d9001517 	ldw	r4,84(sp)
 8001514:	20003c26 	beq	r4,zero,8001608 <__gxx_personality_sj0+0x4ac>
 8001518:	01003e0e 	bge	zero,r4,8001614 <__gxx_personality_sj0+0x4b8>
 800151c:	01ffffc4 	movi	r7,-1
 8001520:	200b883a 	mov	r5,r4
 8001524:	d809883a 	mov	r4,sp
 8001528:	d9c00915 	stw	r7,36(sp)
 800152c:	8000c580 	call	8000c58 <_ZL15get_ttype_entryP16lsda_header_infom>
 8001530:	10005f26 	beq	r2,zero,80016b0 <__gxx_personality_sj0+0x554>
 8001534:	d8c01e17 	ldw	r3,120(sp)
 8001538:	1800571e 	bne	r3,zero,8001698 <__gxx_personality_sj0+0x53c>
 800153c:	d9001617 	ldw	r4,88(sp)
 8001540:	20002926 	beq	r4,zero,80015e8 <__gxx_personality_sj0+0x48c>
 8001544:	d9c01717 	ldw	r7,92(sp)
 8001548:	390f883a 	add	r7,r7,r4
 800154c:	d9c01815 	stw	r7,96(sp)
 8001550:	003fbd06 	br	8001448 <__alt_mem_bufferram_out+0xf7e01448>
 8001554:	d8c01f17 	ldw	r3,124(sp)
 8001558:	1800251e 	bne	r3,zero,80015f0 <__gxx_personality_sj0+0x494>
 800155c:	01000204 	movi	r4,8
 8001560:	d9001515 	stw	r4,84(sp)
 8001564:	003f1806 	br	80011c8 <__alt_mem_bufferram_out+0xf7e011c8>
 8001568:	d8801c17 	ldw	r2,112(sp)
 800156c:	10000d26 	beq	r2,zero,80015a4 <__gxx_personality_sj0+0x448>
 8001570:	00800184 	movi	r2,6
 8001574:	d8801515 	stw	r2,84(sp)
 8001578:	003f1306 	br	80011c8 <__alt_mem_bufferram_out+0xf7e011c8>
 800157c:	00800044 	movi	r2,1
 8001580:	18bf4d1e 	bne	r3,r2,80012b8 <__alt_mem_bufferram_out+0xf7e012b8>
 8001584:	8001bdc0 	call	8001bdc <_ZSt9terminatev>
 8001588:	d9001b17 	ldw	r4,108(sp)
 800158c:	00800044 	movi	r2,1
 8001590:	113f4536 	bltu	r2,r4,80012a8 <__alt_mem_bufferram_out+0xf7e012a8>
 8001594:	00800044 	movi	r2,1
 8001598:	18bf841e 	bne	r3,r2,80013ac <__alt_mem_bufferram_out+0xf7e013ac>
 800159c:	d9002317 	ldw	r4,140(sp)
 80015a0:	80021400 	call	8002140 <__cxa_call_terminate>
 80015a4:	d8c01b17 	ldw	r3,108(sp)
 80015a8:	00800044 	movi	r2,1
 80015ac:	10fff036 	bltu	r2,r3,8001570 <__alt_mem_bufferram_out+0xf7e01570>
 80015b0:	d9002317 	ldw	r4,140(sp)
 80015b4:	d8801817 	ldw	r2,96(sp)
 80015b8:	d9c01517 	ldw	r7,84(sp)
 80015bc:	d8c01a17 	ldw	r3,104(sp)
 80015c0:	20bffc15 	stw	r2,-16(r4)
 80015c4:	d8800717 	ldw	r2,28(sp)
 80015c8:	21fffb15 	stw	r7,-20(r4)
 80015cc:	d9c01f17 	ldw	r7,124(sp)
 80015d0:	20bfff15 	stw	r2,-4(r4)
 80015d4:	00800184 	movi	r2,6
 80015d8:	20fffd15 	stw	r3,-12(r4)
 80015dc:	21fffe15 	stw	r7,-8(r4)
 80015e0:	d8801515 	stw	r2,84(sp)
 80015e4:	003ef806 	br	80011c8 <__alt_mem_bufferram_out+0xf7e011c8>
 80015e8:	d8801d03 	ldbu	r2,116(sp)
 80015ec:	103fdb26 	beq	r2,zero,800155c <__alt_mem_bufferram_out+0xf7e0155c>
 80015f0:	d8c01917 	ldw	r3,100(sp)
 80015f4:	1880004c 	andi	r2,r3,1
 80015f8:	103fd81e 	bne	r2,zero,800155c <__alt_mem_bufferram_out+0xf7e0155c>
 80015fc:	d8001515 	stw	zero,84(sp)
 8001600:	00c00084 	movi	r3,2
 8001604:	003f2306 	br	8001294 <__alt_mem_bufferram_out+0xf7e01294>
 8001608:	00c00044 	movi	r3,1
 800160c:	d8c01d05 	stb	r3,116(sp)
 8001610:	003fca06 	br	800153c <__alt_mem_bufferram_out+0xf7e0153c>
 8001614:	d9001e17 	ldw	r4,120(sp)
 8001618:	20000426 	beq	r4,zero,800162c <__gxx_personality_sj0+0x4d0>
 800161c:	d9c02017 	ldw	r7,128(sp)
 8001620:	3800021e 	bne	r7,zero,800162c <__gxx_personality_sj0+0x4d0>
 8001624:	d8801c17 	ldw	r2,112(sp)
 8001628:	10002726 	beq	r2,zero,80016c8 <__gxx_personality_sj0+0x56c>
 800162c:	d8801517 	ldw	r2,84(sp)
 8001630:	000d883a 	mov	r6,zero
 8001634:	000b883a 	mov	r5,zero
 8001638:	0088303a 	nor	r4,zero,r2
 800163c:	d8800317 	ldw	r2,12(sp)
 8001640:	1109883a 	add	r4,r2,r4
 8001644:	20800003 	ldbu	r2,0(r4)
 8001648:	21000044 	addi	r4,r4,1
 800164c:	10c01fcc 	andi	r3,r2,127
 8001650:	1946983a 	sll	r3,r3,r5
 8001654:	10803fcc 	andi	r2,r2,255
 8001658:	1080201c 	xori	r2,r2,128
 800165c:	10bfe004 	addi	r2,r2,-128
 8001660:	30ccb03a 	or	r6,r6,r3
 8001664:	294001c4 	addi	r5,r5,7
 8001668:	103ff616 	blt	r2,zero,8001644 <__alt_mem_bufferram_out+0xf7e01644>
 800166c:	3005003a 	cmpeq	r2,r6,zero
 8001670:	10803fcc 	andi	r2,r2,255
 8001674:	103fb126 	beq	r2,zero,800153c <__alt_mem_bufferram_out+0xf7e0153c>
 8001678:	d9c01917 	ldw	r7,100(sp)
 800167c:	3880004c 	andi	r2,r7,1
 8001680:	103fb91e 	bne	r2,zero,8001568 <__alt_mem_bufferram_out+0xf7e01568>
 8001684:	d8802017 	ldw	r2,128(sp)
 8001688:	10002d26 	beq	r2,zero,8001740 <__gxx_personality_sj0+0x5e4>
 800168c:	00800044 	movi	r2,1
 8001690:	d8800915 	stw	r2,36(sp)
 8001694:	8001c040 	call	8001c04 <_ZSt10unexpectedv>
 8001698:	d9800704 	addi	r6,sp,28
 800169c:	180b883a 	mov	r5,r3
 80016a0:	1009883a 	mov	r4,r2
 80016a4:	8000e6c0 	call	8000e6c <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
 80016a8:	10803fcc 	andi	r2,r2,255
 80016ac:	103fa326 	beq	r2,zero,800153c <__alt_mem_bufferram_out+0xf7e0153c>
 80016b0:	00c000c4 	movi	r3,3
 80016b4:	003ef406 	br	8001288 <__alt_mem_bufferram_out+0xf7e01288>
 80016b8:	01020074 	movhi	r4,2049
 80016bc:	212c4504 	addi	r4,r4,-20204
 80016c0:	d9001e15 	stw	r4,120(sp)
 80016c4:	003f5f06 	br	8001444 <__alt_mem_bufferram_out+0xf7e01444>
 80016c8:	d9001b17 	ldw	r4,108(sp)
 80016cc:	00c00044 	movi	r3,1
 80016d0:	193fd636 	bltu	r3,r4,800162c <__alt_mem_bufferram_out+0xf7e0162c>
 80016d4:	01ffffc4 	movi	r7,-1
 80016d8:	d9c00915 	stw	r7,36(sp)
 80016dc:	d9800717 	ldw	r6,28(sp)
 80016e0:	d9c01517 	ldw	r7,84(sp)
 80016e4:	d9401e17 	ldw	r5,120(sp)
 80016e8:	d809883a 	mov	r4,sp
 80016ec:	80010b40 	call	80010b4 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
 80016f0:	1080005c 	xori	r2,r2,1
 80016f4:	003fde06 	br	8001670 <__alt_mem_bufferram_out+0xf7e01670>
 80016f8:	d9001b17 	ldw	r4,108(sp)
 80016fc:	00800044 	movi	r2,1
 8001700:	113f4d36 	bltu	r2,r4,8001438 <__alt_mem_bufferram_out+0xf7e01438>
 8001704:	d9c02317 	ldw	r7,140(sp)
 8001708:	38800017 	ldw	r2,0(r7)
 800170c:	1080004c 	andi	r2,r2,1
 8001710:	1000061e 	bne	r2,zero,800172c <__gxx_personality_sj0+0x5d0>
 8001714:	d8c02317 	ldw	r3,140(sp)
 8001718:	18800504 	addi	r2,r3,20
 800171c:	d8800715 	stw	r2,28(sp)
 8001720:	10bff017 	ldw	r2,-64(r2)
 8001724:	d8801e15 	stw	r2,120(sp)
 8001728:	003f4606 	br	8001444 <__alt_mem_bufferram_out+0xf7e01444>
 800172c:	38bff517 	ldw	r2,-44(r7)
 8001730:	003ffa06 	br	800171c <__alt_mem_bufferram_out+0xf7e0171c>
 8001734:	d9000a17 	ldw	r4,40(sp)
 8001738:	80019940 	call	8001994 <__cxa_begin_catch>
 800173c:	003f9106 	br	8001584 <__alt_mem_bufferram_out+0xf7e01584>
 8001740:	d9c01c17 	ldw	r7,112(sp)
 8001744:	383eda1e 	bne	r7,zero,80012b0 <__alt_mem_bufferram_out+0xf7e012b0>
 8001748:	d8c01b17 	ldw	r3,108(sp)
 800174c:	00800044 	movi	r2,1
 8001750:	10fed736 	bltu	r2,r3,80012b0 <__alt_mem_bufferram_out+0xf7e012b0>
 8001754:	00c000c4 	movi	r3,3
 8001758:	003f8e06 	br	8001594 <__alt_mem_bufferram_out+0xf7e01594>

0800175c <__cxa_call_unexpected>:
 800175c:	00820034 	movhi	r2,2048
 8001760:	deffe604 	addi	sp,sp,-104
 8001764:	10845704 	addi	r2,r2,4444
 8001768:	d8800d15 	stw	r2,52(sp)
 800176c:	00820074 	movhi	r2,2049
 8001770:	10a2fb04 	addi	r2,r2,-29716
 8001774:	d8800e15 	stw	r2,56(sp)
 8001778:	d8800104 	addi	r2,sp,4
 800177c:	d8800f15 	stw	r2,60(sp)
 8001780:	00820034 	movhi	r2,2048
 8001784:	1085fa04 	addi	r2,r2,6120
 8001788:	d9001415 	stw	r4,80(sp)
 800178c:	d9000704 	addi	r4,sp,28
 8001790:	dfc01915 	stw	ra,100(sp)
 8001794:	d8801015 	stw	r2,64(sp)
 8001798:	df001815 	stw	fp,96(sp)
 800179c:	dec01115 	stw	sp,68(sp)
 80017a0:	8002a3c0 	call	8002a3c <_Unwind_SjLj_Register>
 80017a4:	d9001417 	ldw	r4,80(sp)
 80017a8:	80019940 	call	8001994 <__cxa_begin_catch>
 80017ac:	d8c01417 	ldw	r3,80(sp)
 80017b0:	18bffe17 	ldw	r2,-8(r3)
 80017b4:	193ff717 	ldw	r4,-36(r3)
 80017b8:	18fffd17 	ldw	r3,-12(r3)
 80017bc:	d8800315 	stw	r2,12(sp)
 80017c0:	d8c01615 	stw	r3,88(sp)
 80017c4:	d8c01417 	ldw	r3,80(sp)
 80017c8:	18fffb17 	ldw	r3,-20(r3)
 80017cc:	d8c01515 	stw	r3,84(sp)
 80017d0:	d8c01417 	ldw	r3,80(sp)
 80017d4:	18fff817 	ldw	r3,-32(r3)
 80017d8:	d8c01415 	stw	r3,80(sp)
 80017dc:	00c00044 	movi	r3,1
 80017e0:	d8c00815 	stw	r3,32(sp)
 80017e4:	8001bf40 	call	8001bf4 <_ZN10__cxxabiv112__unexpectedEPFvvE>
 80017e8:	d8c00917 	ldw	r3,36(sp)
 80017ec:	d8800817 	ldw	r2,32(sp)
 80017f0:	d8c01715 	stw	r3,92(sp)
 80017f4:	10000a26 	beq	r2,zero,8001820 <__cxa_call_unexpected+0xc4>
 80017f8:	10bfffc4 	addi	r2,r2,-1
 80017fc:	10000126 	beq	r2,zero,8001804 <__cxa_call_unexpected+0xa8>
 8001800:	003b68fa 	trap	3
 8001804:	d8000815 	stw	zero,32(sp)
 8001808:	8001a480 	call	8001a48 <__cxa_end_catch>
 800180c:	8001a480 	call	8001a48 <__cxa_end_catch>
 8001810:	d9001717 	ldw	r4,92(sp)
 8001814:	00bfffc4 	movi	r2,-1
 8001818:	d8800815 	stw	r2,32(sp)
 800181c:	8002c380 	call	8002c38 <_Unwind_SjLj_Resume>
 8001820:	d9001717 	ldw	r4,92(sp)
 8001824:	80019940 	call	8001994 <__cxa_begin_catch>
 8001828:	8001cd40 	call	8001cd4 <__cxa_get_globals_fast>
 800182c:	10800017 	ldw	r2,0(r2)
 8001830:	10c00b17 	ldw	r3,44(r2)
 8001834:	18c0004c 	andi	r3,r3,1
 8001838:	18001e26 	beq	r3,zero,80018b4 <__cxa_call_unexpected+0x158>
 800183c:	10800017 	ldw	r2,0(r2)
 8001840:	d8801715 	stw	r2,92(sp)
 8001844:	d8801517 	ldw	r2,84(sp)
 8001848:	00802b0e 	bge	zero,r2,80018f8 <__cxa_call_unexpected+0x19c>
 800184c:	d8c01717 	ldw	r3,92(sp)
 8001850:	d8800317 	ldw	r2,12(sp)
 8001854:	d9c01517 	ldw	r7,84(sp)
 8001858:	193ff017 	ldw	r4,-64(r3)
 800185c:	d9801617 	ldw	r6,88(sp)
 8001860:	d8800015 	stw	r2,0(sp)
 8001864:	180b883a 	mov	r5,r3
 8001868:	00800084 	movi	r2,2
 800186c:	d8800815 	stw	r2,32(sp)
 8001870:	8000ef40 	call	8000ef4 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
 8001874:	10803fcc 	andi	r2,r2,255
 8001878:	10001e1e 	bne	r2,zero,80018f4 <__cxa_call_unexpected+0x198>
 800187c:	d8800317 	ldw	r2,12(sp)
 8001880:	d9c01517 	ldw	r7,84(sp)
 8001884:	d9801617 	ldw	r6,88(sp)
 8001888:	01020074 	movhi	r4,2049
 800188c:	d8800015 	stw	r2,0(sp)
 8001890:	21252504 	addi	r4,r4,-27500
 8001894:	00800084 	movi	r2,2
 8001898:	000b883a 	mov	r5,zero
 800189c:	d8800815 	stw	r2,32(sp)
 80018a0:	8000ef40 	call	8000ef4 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
 80018a4:	10803fcc 	andi	r2,r2,255
 80018a8:	1000051e 	bne	r2,zero,80018c0 <__cxa_call_unexpected+0x164>
 80018ac:	d9001417 	ldw	r4,80(sp)
 80018b0:	8001b1c0 	call	8001b1c <_ZN10__cxxabiv111__terminateEPFvvE>
 80018b4:	10801004 	addi	r2,r2,64
 80018b8:	d8801715 	stw	r2,92(sp)
 80018bc:	003fe106 	br	8001844 <__alt_mem_bufferram_out+0xf7e01844>
 80018c0:	01000104 	movi	r4,4
 80018c4:	8001e4c0 	call	8001e4c <__cxa_allocate_exception>
 80018c8:	00c20074 	movhi	r3,2049
 80018cc:	18e54004 	addi	r3,r3,-27392
 80018d0:	01820034 	movhi	r6,2048
 80018d4:	01420074 	movhi	r5,2049
 80018d8:	10c00015 	stw	r3,0(r2)
 80018dc:	3187ed04 	addi	r6,r6,8116
 80018e0:	00c00084 	movi	r3,2
 80018e4:	29652504 	addi	r5,r5,-27500
 80018e8:	1009883a 	mov	r4,r2
 80018ec:	d8c00815 	stw	r3,32(sp)
 80018f0:	800202c0 	call	800202c <__cxa_throw>
 80018f4:	80020bc0 	call	80020bc <__cxa_rethrow>
 80018f8:	d9401617 	ldw	r5,88(sp)
 80018fc:	00800084 	movi	r2,2
 8001900:	d9800104 	addi	r6,sp,4
 8001904:	0009883a 	mov	r4,zero
 8001908:	d8800815 	stw	r2,32(sp)
 800190c:	8000d380 	call	8000d38 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8001910:	d9801717 	ldw	r6,92(sp)
 8001914:	d9c01517 	ldw	r7,84(sp)
 8001918:	d9000104 	addi	r4,sp,4
 800191c:	317ff017 	ldw	r5,-64(r6)
 8001920:	80010b40 	call	80010b4 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
 8001924:	10803fcc 	andi	r2,r2,255
 8001928:	1000171e 	bne	r2,zero,8001988 <__cxa_call_unexpected+0x22c>
 800192c:	d9c01517 	ldw	r7,84(sp)
 8001930:	01420074 	movhi	r5,2049
 8001934:	00800084 	movi	r2,2
 8001938:	29652504 	addi	r5,r5,-27500
 800193c:	000d883a 	mov	r6,zero
 8001940:	d9000104 	addi	r4,sp,4
 8001944:	d8800815 	stw	r2,32(sp)
 8001948:	80010b40 	call	80010b4 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
 800194c:	10803fcc 	andi	r2,r2,255
 8001950:	103fd626 	beq	r2,zero,80018ac <__alt_mem_bufferram_out+0xf7e018ac>
 8001954:	01000104 	movi	r4,4
 8001958:	8001e4c0 	call	8001e4c <__cxa_allocate_exception>
 800195c:	00c20074 	movhi	r3,2049
 8001960:	18e54004 	addi	r3,r3,-27392
 8001964:	01820034 	movhi	r6,2048
 8001968:	01420074 	movhi	r5,2049
 800196c:	10c00015 	stw	r3,0(r2)
 8001970:	3187ed04 	addi	r6,r6,8116
 8001974:	00c00084 	movi	r3,2
 8001978:	29652504 	addi	r5,r5,-27500
 800197c:	1009883a 	mov	r4,r2
 8001980:	d8c00815 	stw	r3,32(sp)
 8001984:	800202c0 	call	800202c <__cxa_throw>
 8001988:	80020bc0 	call	80020bc <__cxa_rethrow>

0800198c <__cxa_get_exception_ptr>:
 800198c:	20bfff17 	ldw	r2,-4(r4)
 8001990:	f800283a 	ret

08001994 <__cxa_begin_catch>:
 8001994:	defffe04 	addi	sp,sp,-8
 8001998:	dc000015 	stw	r16,0(sp)
 800199c:	dfc00115 	stw	ra,4(sp)
 80019a0:	2021883a 	mov	r16,r4
 80019a4:	8001ce00 	call	8001ce0 <__cxa_get_globals>
 80019a8:	81000017 	ldw	r4,0(r16)
 80019ac:	80c00117 	ldw	r3,4(r16)
 80019b0:	01af3574 	movhi	r6,48341
 80019b4:	31b54004 	addi	r6,r6,-11008
 80019b8:	016e2cb4 	movhi	r5,47282
 80019bc:	296aaf04 	addi	r5,r5,-21828
 80019c0:	218d883a 	add	r6,r4,r6
 80019c4:	3109803a 	cmpltu	r4,r6,r4
 80019c8:	1947883a 	add	r3,r3,r5
 80019cc:	20c7883a 	add	r3,r4,r3
 80019d0:	817ff504 	addi	r5,r16,-44
 80019d4:	11000017 	ldw	r4,0(r2)
 80019d8:	18000726 	beq	r3,zero,80019f8 <__cxa_begin_catch+0x64>
 80019dc:	2000191e 	bne	r4,zero,8001a44 <__cxa_begin_catch+0xb0>
 80019e0:	11400015 	stw	r5,0(r2)
 80019e4:	0005883a 	mov	r2,zero
 80019e8:	dfc00117 	ldw	ra,4(sp)
 80019ec:	dc000017 	ldw	r16,0(sp)
 80019f0:	dec00204 	addi	sp,sp,8
 80019f4:	f800283a 	ret
 80019f8:	01c00044 	movi	r7,1
 80019fc:	39bff736 	bltu	r7,r6,80019dc <__alt_mem_bufferram_out+0xf7e019dc>
 8001a00:	80fffa17 	ldw	r3,-24(r16)
 8001a04:	18000d16 	blt	r3,zero,8001a3c <__cxa_begin_catch+0xa8>
 8001a08:	18c00044 	addi	r3,r3,1
 8001a0c:	11800117 	ldw	r6,4(r2)
 8001a10:	80fffa15 	stw	r3,-24(r16)
 8001a14:	30ffffc4 	addi	r3,r6,-1
 8001a18:	10c00115 	stw	r3,4(r2)
 8001a1c:	21400226 	beq	r4,r5,8001a28 <__cxa_begin_catch+0x94>
 8001a20:	813ff915 	stw	r4,-28(r16)
 8001a24:	11400015 	stw	r5,0(r2)
 8001a28:	80bfff17 	ldw	r2,-4(r16)
 8001a2c:	dfc00117 	ldw	ra,4(sp)
 8001a30:	dc000017 	ldw	r16,0(sp)
 8001a34:	dec00204 	addi	sp,sp,8
 8001a38:	f800283a 	ret
 8001a3c:	38c7c83a 	sub	r3,r7,r3
 8001a40:	003ff206 	br	8001a0c <__alt_mem_bufferram_out+0xf7e01a0c>
 8001a44:	8001bdc0 	call	8001bdc <_ZSt9terminatev>

08001a48 <__cxa_end_catch>:
 8001a48:	deffff04 	addi	sp,sp,-4
 8001a4c:	dfc00015 	stw	ra,0(sp)
 8001a50:	8001cd40 	call	8001cd4 <__cxa_get_globals_fast>
 8001a54:	11000017 	ldw	r4,0(r2)
 8001a58:	20001426 	beq	r4,zero,8001aac <__cxa_end_catch+0x64>
 8001a5c:	21400b17 	ldw	r5,44(r4)
 8001a60:	01ef3574 	movhi	r7,48341
 8001a64:	39f54004 	addi	r7,r7,-11008
 8001a68:	29cf883a 	add	r7,r5,r7
 8001a6c:	20c00c17 	ldw	r3,48(r4)
 8001a70:	394d803a 	cmpltu	r6,r7,r5
 8001a74:	016e2cb4 	movhi	r5,47282
 8001a78:	296aaf04 	addi	r5,r5,-21828
 8001a7c:	1947883a 	add	r3,r3,r5
 8001a80:	30c7883a 	add	r3,r6,r3
 8001a84:	18000c1e 	bne	r3,zero,8001ab8 <__cxa_end_catch+0x70>
 8001a88:	00c00044 	movi	r3,1
 8001a8c:	19c00a36 	bltu	r3,r7,8001ab8 <__cxa_end_catch+0x70>
 8001a90:	20c00517 	ldw	r3,20(r4)
 8001a94:	18000d16 	blt	r3,zero,8001acc <__cxa_end_catch+0x84>
 8001a98:	18ffffc4 	addi	r3,r3,-1
 8001a9c:	18001026 	beq	r3,zero,8001ae0 <__cxa_end_catch+0x98>
 8001aa0:	00bfffc4 	movi	r2,-1
 8001aa4:	18801426 	beq	r3,r2,8001af8 <__cxa_end_catch+0xb0>
 8001aa8:	20c00515 	stw	r3,20(r4)
 8001aac:	dfc00017 	ldw	ra,0(sp)
 8001ab0:	dec00104 	addi	sp,sp,4
 8001ab4:	f800283a 	ret
 8001ab8:	21000b04 	addi	r4,r4,44
 8001abc:	10000015 	stw	zero,0(r2)
 8001ac0:	dfc00017 	ldw	ra,0(sp)
 8001ac4:	dec00104 	addi	sp,sp,4
 8001ac8:	8002cc81 	jmpi	8002cc8 <_Unwind_DeleteException>
 8001acc:	18c00044 	addi	r3,r3,1
 8001ad0:	183ff51e 	bne	r3,zero,8001aa8 <__alt_mem_bufferram_out+0xf7e01aa8>
 8001ad4:	21400417 	ldw	r5,16(r4)
 8001ad8:	11400015 	stw	r5,0(r2)
 8001adc:	003ff206 	br	8001aa8 <__alt_mem_bufferram_out+0xf7e01aa8>
 8001ae0:	20c00417 	ldw	r3,16(r4)
 8001ae4:	21000b04 	addi	r4,r4,44
 8001ae8:	10c00015 	stw	r3,0(r2)
 8001aec:	dfc00017 	ldw	ra,0(sp)
 8001af0:	dec00104 	addi	sp,sp,4
 8001af4:	8002cc81 	jmpi	8002cc8 <_Unwind_DeleteException>
 8001af8:	8001bdc0 	call	8001bdc <_ZSt9terminatev>

08001afc <_ZSt18uncaught_exceptionv>:
 8001afc:	deffff04 	addi	sp,sp,-4
 8001b00:	dfc00015 	stw	ra,0(sp)
 8001b04:	8001ce00 	call	8001ce0 <__cxa_get_globals>
 8001b08:	10800117 	ldw	r2,4(r2)
 8001b0c:	1004c03a 	cmpne	r2,r2,zero
 8001b10:	dfc00017 	ldw	ra,0(sp)
 8001b14:	dec00104 	addi	sp,sp,4
 8001b18:	f800283a 	ret

08001b1c <_ZN10__cxxabiv111__terminateEPFvvE>:
 8001b1c:	00820034 	movhi	r2,2048
 8001b20:	deffef04 	addi	sp,sp,-68
 8001b24:	10845704 	addi	r2,r2,4444
 8001b28:	d8800615 	stw	r2,24(sp)
 8001b2c:	00820074 	movhi	r2,2049
 8001b30:	10a2ff04 	addi	r2,r2,-29700
 8001b34:	d8800715 	stw	r2,28(sp)
 8001b38:	00820034 	movhi	r2,2048
 8001b3c:	1086dd04 	addi	r2,r2,7028
 8001b40:	d9000d15 	stw	r4,52(sp)
 8001b44:	d809883a 	mov	r4,sp
 8001b48:	d8800915 	stw	r2,36(sp)
 8001b4c:	dfc01015 	stw	ra,64(sp)
 8001b50:	df000f15 	stw	fp,60(sp)
 8001b54:	dec00815 	stw	sp,32(sp)
 8001b58:	dec00a15 	stw	sp,40(sp)
 8001b5c:	8002a3c0 	call	8002a3c <_Unwind_SjLj_Register>
 8001b60:	00800044 	movi	r2,1
 8001b64:	d8800115 	stw	r2,4(sp)
 8001b68:	d8800d17 	ldw	r2,52(sp)
 8001b6c:	103ee83a 	callr	r2
 8001b70:	8002d540 	call	8002d54 <abort>
 8001b74:	d8c00217 	ldw	r3,8(sp)
 8001b78:	d8800117 	ldw	r2,4(sp)
 8001b7c:	d8c00d15 	stw	r3,52(sp)
 8001b80:	d8c00317 	ldw	r3,12(sp)
 8001b84:	d8c00e15 	stw	r3,56(sp)
 8001b88:	10000b26 	beq	r2,zero,8001bb8 <_ZN10__cxxabiv111__terminateEPFvvE+0x9c>
 8001b8c:	10bfffc4 	addi	r2,r2,-1
 8001b90:	10000126 	beq	r2,zero,8001b98 <_ZN10__cxxabiv111__terminateEPFvvE+0x7c>
 8001b94:	003b68fa 	trap	3
 8001b98:	d8000115 	stw	zero,4(sp)
 8001b9c:	8001a480 	call	8001a48 <__cxa_end_catch>
 8001ba0:	d8c00e17 	ldw	r3,56(sp)
 8001ba4:	00bfffc4 	movi	r2,-1
 8001ba8:	18800826 	beq	r3,r2,8001bcc <_ZN10__cxxabiv111__terminateEPFvvE+0xb0>
 8001bac:	d9000d17 	ldw	r4,52(sp)
 8001bb0:	d8800115 	stw	r2,4(sp)
 8001bb4:	8002c380 	call	8002c38 <_Unwind_SjLj_Resume>
 8001bb8:	d9000d17 	ldw	r4,52(sp)
 8001bbc:	80019940 	call	8001994 <__cxa_begin_catch>
 8001bc0:	00800084 	movi	r2,2
 8001bc4:	d8800115 	stw	r2,4(sp)
 8001bc8:	8002d540 	call	8002d54 <abort>
 8001bcc:	d8800e17 	ldw	r2,56(sp)
 8001bd0:	d9000d17 	ldw	r4,52(sp)
 8001bd4:	d8800115 	stw	r2,4(sp)
 8001bd8:	800175c0 	call	800175c <__cxa_call_unexpected>

08001bdc <_ZSt9terminatev>:
 8001bdc:	00820074 	movhi	r2,2049
 8001be0:	10ac4b04 	addi	r2,r2,-20180
 8001be4:	11000017 	ldw	r4,0(r2)
 8001be8:	deffff04 	addi	sp,sp,-4
 8001bec:	dfc00015 	stw	ra,0(sp)
 8001bf0:	8001b1c0 	call	8001b1c <_ZN10__cxxabiv111__terminateEPFvvE>

08001bf4 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 8001bf4:	deffff04 	addi	sp,sp,-4
 8001bf8:	dfc00015 	stw	ra,0(sp)
 8001bfc:	203ee83a 	callr	r4
 8001c00:	8001bdc0 	call	8001bdc <_ZSt9terminatev>

08001c04 <_ZSt10unexpectedv>:
 8001c04:	00820074 	movhi	r2,2049
 8001c08:	10ac4c04 	addi	r2,r2,-20176
 8001c0c:	11000017 	ldw	r4,0(r2)
 8001c10:	deffff04 	addi	sp,sp,-4
 8001c14:	dfc00015 	stw	ra,0(sp)
 8001c18:	8001bf40 	call	8001bf4 <_ZN10__cxxabiv112__unexpectedEPFvvE>

08001c1c <_ZSt13set_terminatePFvvE>:
 8001c1c:	00c20074 	movhi	r3,2049
 8001c20:	18ec4b04 	addi	r3,r3,-20180
 8001c24:	18800017 	ldw	r2,0(r3)
 8001c28:	19000015 	stw	r4,0(r3)
 8001c2c:	f800283a 	ret

08001c30 <_ZSt13get_terminatev>:
 8001c30:	00820074 	movhi	r2,2049
 8001c34:	10ac4b04 	addi	r2,r2,-20180
 8001c38:	10800017 	ldw	r2,0(r2)
 8001c3c:	f800283a 	ret

08001c40 <_ZSt14set_unexpectedPFvvE>:
 8001c40:	00c20074 	movhi	r3,2049
 8001c44:	18ec4c04 	addi	r3,r3,-20176
 8001c48:	18800017 	ldw	r2,0(r3)
 8001c4c:	19000015 	stw	r4,0(r3)
 8001c50:	f800283a 	ret

08001c54 <_ZSt14get_unexpectedv>:
 8001c54:	00820074 	movhi	r2,2049
 8001c58:	10ac4c04 	addi	r2,r2,-20176
 8001c5c:	10800017 	ldw	r2,0(r2)
 8001c60:	f800283a 	ret

08001c64 <_Znwj>:
 8001c64:	defffe04 	addi	sp,sp,-8
 8001c68:	dc000015 	stw	r16,0(sp)
 8001c6c:	dfc00115 	stw	ra,4(sp)
 8001c70:	2021883a 	mov	r16,r4
 8001c74:	2000011e 	bne	r4,zero,8001c7c <_Znwj+0x18>
 8001c78:	04000044 	movi	r16,1
 8001c7c:	8009883a 	mov	r4,r16
 8001c80:	8002e500 	call	8002e50 <malloc>
 8001c84:	10000426 	beq	r2,zero,8001c98 <_Znwj+0x34>
 8001c88:	dfc00117 	ldw	ra,4(sp)
 8001c8c:	dc000017 	ldw	r16,0(sp)
 8001c90:	dec00204 	addi	sp,sp,8
 8001c94:	f800283a 	ret
 8001c98:	800255c0 	call	800255c <_ZSt15get_new_handlerv>
 8001c9c:	10000226 	beq	r2,zero,8001ca8 <_Znwj+0x44>
 8001ca0:	103ee83a 	callr	r2
 8001ca4:	003ff506 	br	8001c7c <__alt_mem_bufferram_out+0xf7e01c7c>
 8001ca8:	01000104 	movi	r4,4
 8001cac:	8001e4c0 	call	8001e4c <__cxa_allocate_exception>
 8001cb0:	00c20074 	movhi	r3,2049
 8001cb4:	01820034 	movhi	r6,2048
 8001cb8:	01420074 	movhi	r5,2049
 8001cbc:	18e58d04 	addi	r3,r3,-27084
 8001cc0:	31894104 	addi	r6,r6,9476
 8001cc4:	29658804 	addi	r5,r5,-27104
 8001cc8:	1009883a 	mov	r4,r2
 8001ccc:	10c00015 	stw	r3,0(r2)
 8001cd0:	800202c0 	call	800202c <__cxa_throw>

08001cd4 <__cxa_get_globals_fast>:
 8001cd4:	00820074 	movhi	r2,2049
 8001cd8:	10b30204 	addi	r2,r2,-13304
 8001cdc:	f800283a 	ret

08001ce0 <__cxa_get_globals>:
 8001ce0:	00820074 	movhi	r2,2049
 8001ce4:	10b30204 	addi	r2,r2,-13304
 8001ce8:	f800283a 	ret

08001cec <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
 8001cec:	01820074 	movhi	r6,2049
 8001cf0:	31b31104 	addi	r6,r6,-13244
 8001cf4:	31400117 	ldw	r5,4(r6)
 8001cf8:	223fff04 	addi	r8,r4,-4
 8001cfc:	227fff17 	ldw	r9,-4(r4)
 8001d00:	28001326 	beq	r5,zero,8001d50 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x64>
 8001d04:	424f883a 	add	r7,r8,r9
 8001d08:	29c01426 	beq	r5,r7,8001d5c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x70>
 8001d0c:	28c00117 	ldw	r3,4(r5)
 8001d10:	18001c26 	beq	r3,zero,8001d84 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x98>
 8001d14:	38c00336 	bltu	r7,r3,8001d24 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x38>
 8001d18:	00001e06 	br	8001d94 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0xa8>
 8001d1c:	3880052e 	bgeu	r7,r2,8001d34 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x48>
 8001d20:	1007883a 	mov	r3,r2
 8001d24:	18800117 	ldw	r2,4(r3)
 8001d28:	29800104 	addi	r6,r5,4
 8001d2c:	180b883a 	mov	r5,r3
 8001d30:	103ffa1e 	bne	r2,zero,8001d1c <__alt_mem_bufferram_out+0xf7e01d1c>
 8001d34:	19400017 	ldw	r5,0(r3)
 8001d38:	194f883a 	add	r7,r3,r5
 8001d3c:	41c00e26 	beq	r8,r7,8001d78 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x8c>
 8001d40:	20800015 	stw	r2,0(r4)
 8001d44:	30800017 	ldw	r2,0(r6)
 8001d48:	12000115 	stw	r8,4(r2)
 8001d4c:	f800283a 	ret
 8001d50:	20000015 	stw	zero,0(r4)
 8001d54:	32000115 	stw	r8,4(r6)
 8001d58:	f800283a 	ret
 8001d5c:	28c00017 	ldw	r3,0(r5)
 8001d60:	28800117 	ldw	r2,4(r5)
 8001d64:	1a53883a 	add	r9,r3,r9
 8001d68:	227fff15 	stw	r9,-4(r4)
 8001d6c:	20800015 	stw	r2,0(r4)
 8001d70:	32000115 	stw	r8,4(r6)
 8001d74:	f800283a 	ret
 8001d78:	494b883a 	add	r5,r9,r5
 8001d7c:	19400015 	stw	r5,0(r3)
 8001d80:	f800283a 	ret
 8001d84:	0005883a 	mov	r2,zero
 8001d88:	2807883a 	mov	r3,r5
 8001d8c:	31800104 	addi	r6,r6,4
 8001d90:	003fe806 	br	8001d34 <__alt_mem_bufferram_out+0xf7e01d34>
 8001d94:	1805883a 	mov	r2,r3
 8001d98:	31800104 	addi	r6,r6,4
 8001d9c:	2807883a 	mov	r3,r5
 8001da0:	003fe406 	br	8001d34 <__alt_mem_bufferram_out+0xf7e01d34>

08001da4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
 8001da4:	20800104 	addi	r2,r4,4
 8001da8:	00c001c4 	movi	r3,7
 8001dac:	1880112e 	bgeu	r3,r2,8001df4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x50>
 8001db0:	20c9883a 	add	r4,r4,r3
 8001db4:	00bfff04 	movi	r2,-4
 8001db8:	208a703a 	and	r5,r4,r2
 8001dbc:	01820074 	movhi	r6,2049
 8001dc0:	31b31104 	addi	r6,r6,-13244
 8001dc4:	30c00117 	ldw	r3,4(r6)
 8001dc8:	18000826 	beq	r3,zero,8001dec <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
 8001dcc:	19000017 	ldw	r4,0(r3)
 8001dd0:	21400436 	bltu	r4,r5,8001de4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x40>
 8001dd4:	00001a06 	br	8001e40 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x9c>
 8001dd8:	11000017 	ldw	r4,0(r2)
 8001ddc:	2140072e 	bgeu	r4,r5,8001dfc <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
 8001de0:	1007883a 	mov	r3,r2
 8001de4:	18800117 	ldw	r2,4(r3)
 8001de8:	103ffb1e 	bne	r2,zero,8001dd8 <__alt_mem_bufferram_out+0xf7e01dd8>
 8001dec:	0005883a 	mov	r2,zero
 8001df0:	f800283a 	ret
 8001df4:	01400204 	movi	r5,8
 8001df8:	003ff006 	br	8001dbc <__alt_mem_bufferram_out+0xf7e01dbc>
 8001dfc:	18c00104 	addi	r3,r3,4
 8001e00:	2149c83a 	sub	r4,r4,r5
 8001e04:	018001c4 	movi	r6,7
 8001e08:	3100092e 	bgeu	r6,r4,8001e30 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x8c>
 8001e0c:	11c00117 	ldw	r7,4(r2)
 8001e10:	114d883a 	add	r6,r2,r5
 8001e14:	31000015 	stw	r4,0(r6)
 8001e18:	31c00115 	stw	r7,4(r6)
 8001e1c:	18800017 	ldw	r2,0(r3)
 8001e20:	11400015 	stw	r5,0(r2)
 8001e24:	19800015 	stw	r6,0(r3)
 8001e28:	10800104 	addi	r2,r2,4
 8001e2c:	f800283a 	ret
 8001e30:	11000117 	ldw	r4,4(r2)
 8001e34:	10800104 	addi	r2,r2,4
 8001e38:	19000015 	stw	r4,0(r3)
 8001e3c:	f800283a 	ret
 8001e40:	1805883a 	mov	r2,r3
 8001e44:	30c00104 	addi	r3,r6,4
 8001e48:	003fed06 	br	8001e00 <__alt_mem_bufferram_out+0xf7e01e00>

08001e4c <__cxa_allocate_exception>:
 8001e4c:	defffd04 	addi	sp,sp,-12
 8001e50:	dc400115 	stw	r17,4(sp)
 8001e54:	24401104 	addi	r17,r4,68
 8001e58:	8809883a 	mov	r4,r17
 8001e5c:	dc000015 	stw	r16,0(sp)
 8001e60:	dfc00215 	stw	ra,8(sp)
 8001e64:	8002e500 	call	8002e50 <malloc>
 8001e68:	1021883a 	mov	r16,r2
 8001e6c:	10000a26 	beq	r2,zero,8001e98 <__cxa_allocate_exception+0x4c>
 8001e70:	01801104 	movi	r6,68
 8001e74:	000b883a 	mov	r5,zero
 8001e78:	8009883a 	mov	r4,r16
 8001e7c:	80036840 	call	8003684 <memset>
 8001e80:	80801104 	addi	r2,r16,68
 8001e84:	dfc00217 	ldw	ra,8(sp)
 8001e88:	dc400117 	ldw	r17,4(sp)
 8001e8c:	dc000017 	ldw	r16,0(sp)
 8001e90:	dec00304 	addi	sp,sp,12
 8001e94:	f800283a 	ret
 8001e98:	8809883a 	mov	r4,r17
 8001e9c:	8001da40 	call	8001da4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
 8001ea0:	1021883a 	mov	r16,r2
 8001ea4:	103ff21e 	bne	r2,zero,8001e70 <__alt_mem_bufferram_out+0xf7e01e70>
 8001ea8:	8001bdc0 	call	8001bdc <_ZSt9terminatev>

08001eac <__cxa_free_exception>:
 8001eac:	00c20074 	movhi	r3,2049
 8001eb0:	18f31104 	addi	r3,r3,-13244
 8001eb4:	18800217 	ldw	r2,8(r3)
 8001eb8:	213fef04 	addi	r4,r4,-68
 8001ebc:	1100042e 	bgeu	r2,r4,8001ed0 <__cxa_free_exception+0x24>
 8001ec0:	18c00317 	ldw	r3,12(r3)
 8001ec4:	10c5883a 	add	r2,r2,r3
 8001ec8:	2080012e 	bgeu	r4,r2,8001ed0 <__cxa_free_exception+0x24>
 8001ecc:	8001cec1 	jmpi	8001cec <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
 8001ed0:	8002e641 	jmpi	8002e64 <free>

08001ed4 <__cxa_allocate_dependent_exception>:
 8001ed4:	defffe04 	addi	sp,sp,-8
 8001ed8:	01001004 	movi	r4,64
 8001edc:	dc000015 	stw	r16,0(sp)
 8001ee0:	dfc00115 	stw	ra,4(sp)
 8001ee4:	8002e500 	call	8002e50 <malloc>
 8001ee8:	1021883a 	mov	r16,r2
 8001eec:	10000926 	beq	r2,zero,8001f14 <__cxa_allocate_dependent_exception+0x40>
 8001ef0:	01801004 	movi	r6,64
 8001ef4:	000b883a 	mov	r5,zero
 8001ef8:	8009883a 	mov	r4,r16
 8001efc:	80036840 	call	8003684 <memset>
 8001f00:	8005883a 	mov	r2,r16
 8001f04:	dfc00117 	ldw	ra,4(sp)
 8001f08:	dc000017 	ldw	r16,0(sp)
 8001f0c:	dec00204 	addi	sp,sp,8
 8001f10:	f800283a 	ret
 8001f14:	01001004 	movi	r4,64
 8001f18:	8001da40 	call	8001da4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
 8001f1c:	1021883a 	mov	r16,r2
 8001f20:	103ff31e 	bne	r2,zero,8001ef0 <__alt_mem_bufferram_out+0xf7e01ef0>
 8001f24:	8001bdc0 	call	8001bdc <_ZSt9terminatev>

08001f28 <__cxa_free_dependent_exception>:
 8001f28:	01420074 	movhi	r5,2049
 8001f2c:	29731104 	addi	r5,r5,-13244
 8001f30:	28c00217 	ldw	r3,8(r5)
 8001f34:	2005883a 	mov	r2,r4
 8001f38:	1900042e 	bgeu	r3,r4,8001f4c <__cxa_free_dependent_exception+0x24>
 8001f3c:	29400317 	ldw	r5,12(r5)
 8001f40:	1947883a 	add	r3,r3,r5
 8001f44:	20c0012e 	bgeu	r4,r3,8001f4c <__cxa_free_dependent_exception+0x24>
 8001f48:	8001cec1 	jmpi	8001cec <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
 8001f4c:	1009883a 	mov	r4,r2
 8001f50:	8002e641 	jmpi	8002e64 <free>

08001f54 <_GLOBAL__sub_I___cxa_allocate_exception>:
 8001f54:	defffd04 	addi	sp,sp,-12
 8001f58:	dc400115 	stw	r17,4(sp)
 8001f5c:	dc000015 	stw	r16,0(sp)
 8001f60:	04424004 	movi	r17,2304
 8001f64:	04020074 	movhi	r16,2049
 8001f68:	84331104 	addi	r16,r16,-13244
 8001f6c:	8809883a 	mov	r4,r17
 8001f70:	dfc00215 	stw	ra,8(sp)
 8001f74:	84400315 	stw	r17,12(r16)
 8001f78:	8002e500 	call	8002e50 <malloc>
 8001f7c:	80800215 	stw	r2,8(r16)
 8001f80:	10000826 	beq	r2,zero,8001fa4 <_GLOBAL__sub_I___cxa_allocate_exception+0x50>
 8001f84:	80800115 	stw	r2,4(r16)
 8001f88:	14400015 	stw	r17,0(r2)
 8001f8c:	10000115 	stw	zero,4(r2)
 8001f90:	dfc00217 	ldw	ra,8(sp)
 8001f94:	dc400117 	ldw	r17,4(sp)
 8001f98:	dc000017 	ldw	r16,0(sp)
 8001f9c:	dec00304 	addi	sp,sp,12
 8001fa0:	f800283a 	ret
 8001fa4:	80000315 	stw	zero,12(r16)
 8001fa8:	80000115 	stw	zero,4(r16)
 8001fac:	003ff806 	br	8001f90 <__alt_mem_bufferram_out+0xf7e01f90>

08001fb0 <_ZNSt9exceptionD1Ev>:
 8001fb0:	f800283a 	ret

08001fb4 <_ZNSt13bad_exceptionD1Ev>:
 8001fb4:	f800283a 	ret

08001fb8 <_ZNKSt9exception4whatEv>:
 8001fb8:	00820074 	movhi	r2,2049
 8001fbc:	10a51304 	addi	r2,r2,-27572
 8001fc0:	f800283a 	ret

08001fc4 <_ZNKSt13bad_exception4whatEv>:
 8001fc4:	00820074 	movhi	r2,2049
 8001fc8:	10a51704 	addi	r2,r2,-27556
 8001fcc:	f800283a 	ret

08001fd0 <_ZNSt9exceptionD0Ev>:
 8001fd0:	80009a41 	jmpi	80009a4 <_ZdlPv>

08001fd4 <_ZNSt13bad_exceptionD0Ev>:
 8001fd4:	80009a41 	jmpi	80009a4 <_ZdlPv>

08001fd8 <_ZN10__cxxabiv115__forced_unwindD1Ev>:
 8001fd8:	f800283a 	ret

08001fdc <_ZN10__cxxabiv115__forced_unwindD0Ev>:
 8001fdc:	80009a41 	jmpi	80009a4 <_ZdlPv>

08001fe0 <_ZN10__cxxabiv119__foreign_exceptionD1Ev>:
 8001fe0:	f800283a 	ret

08001fe4 <_ZN10__cxxabiv119__foreign_exceptionD0Ev>:
 8001fe4:	80009a41 	jmpi	80009a4 <_ZdlPv>

08001fe8 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
 8001fe8:	defffe04 	addi	sp,sp,-8
 8001fec:	dfc00115 	stw	ra,4(sp)
 8001ff0:	dc000015 	stw	r16,0(sp)
 8001ff4:	00800044 	movi	r2,1
 8001ff8:	11000a36 	bltu	r2,r4,8002024 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x3c>
 8001ffc:	28bff617 	ldw	r2,-40(r5)
 8002000:	2c000504 	addi	r16,r5,20
 8002004:	10000226 	beq	r2,zero,8002010 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x28>
 8002008:	8009883a 	mov	r4,r16
 800200c:	103ee83a 	callr	r2
 8002010:	8009883a 	mov	r4,r16
 8002014:	dfc00117 	ldw	ra,4(sp)
 8002018:	dc000017 	ldw	r16,0(sp)
 800201c:	dec00204 	addi	sp,sp,8
 8002020:	8001eac1 	jmpi	8001eac <__cxa_free_exception>
 8002024:	293ff817 	ldw	r4,-32(r5)
 8002028:	8001b1c0 	call	8001b1c <_ZN10__cxxabiv111__terminateEPFvvE>

0800202c <__cxa_throw>:
 800202c:	defffb04 	addi	sp,sp,-20
 8002030:	dfc00415 	stw	ra,16(sp)
 8002034:	dcc00315 	stw	r19,12(sp)
 8002038:	dc800215 	stw	r18,8(sp)
 800203c:	2827883a 	mov	r19,r5
 8002040:	3025883a 	mov	r18,r6
 8002044:	dc400115 	stw	r17,4(sp)
 8002048:	dc000015 	stw	r16,0(sp)
 800204c:	2021883a 	mov	r16,r4
 8002050:	8001ce00 	call	8001ce0 <__cxa_get_globals>
 8002054:	10c00117 	ldw	r3,4(r2)
 8002058:	847ffb04 	addi	r17,r16,-20
 800205c:	18c00044 	addi	r3,r3,1
 8002060:	10c00115 	stw	r3,4(r2)
 8002064:	00800044 	movi	r2,1
 8002068:	80bfef15 	stw	r2,-68(r16)
 800206c:	84fff015 	stw	r19,-64(r16)
 8002070:	84bff115 	stw	r18,-60(r16)
 8002074:	8001c540 	call	8001c54 <_ZSt14get_unexpectedv>
 8002078:	80bff215 	stw	r2,-56(r16)
 800207c:	8001c300 	call	8001c30 <_ZSt13get_terminatev>
 8002080:	80bff315 	stw	r2,-52(r16)
 8002084:	0090caf4 	movhi	r2,17195
 8002088:	108ac004 	addi	r2,r2,11008
 800208c:	80bffb15 	stw	r2,-20(r16)
 8002090:	0091d3b4 	movhi	r2,18254
 8002094:	109550c4 	addi	r2,r2,21827
 8002098:	80bffc15 	stw	r2,-16(r16)
 800209c:	00820034 	movhi	r2,2048
 80020a0:	1087fa04 	addi	r2,r2,8168
 80020a4:	8809883a 	mov	r4,r17
 80020a8:	80bffd15 	stw	r2,-12(r16)
 80020ac:	8002b240 	call	8002b24 <_Unwind_SjLj_RaiseException>
 80020b0:	8809883a 	mov	r4,r17
 80020b4:	80019940 	call	8001994 <__cxa_begin_catch>
 80020b8:	8001bdc0 	call	8001bdc <_ZSt9terminatev>

080020bc <__cxa_rethrow>:
 80020bc:	defffe04 	addi	sp,sp,-8
 80020c0:	dfc00115 	stw	ra,4(sp)
 80020c4:	dc000015 	stw	r16,0(sp)
 80020c8:	8001ce00 	call	8001ce0 <__cxa_get_globals>
 80020cc:	10c00117 	ldw	r3,4(r2)
 80020d0:	11000017 	ldw	r4,0(r2)
 80020d4:	18c00044 	addi	r3,r3,1
 80020d8:	10c00115 	stw	r3,4(r2)
 80020dc:	20001126 	beq	r4,zero,8002124 <__cxa_rethrow+0x68>
 80020e0:	21400b17 	ldw	r5,44(r4)
 80020e4:	01ef3574 	movhi	r7,48341
 80020e8:	39f54004 	addi	r7,r7,-11008
 80020ec:	29cf883a 	add	r7,r5,r7
 80020f0:	20c00c17 	ldw	r3,48(r4)
 80020f4:	394d803a 	cmpltu	r6,r7,r5
 80020f8:	016e2cb4 	movhi	r5,47282
 80020fc:	296aaf04 	addi	r5,r5,-21828
 8002100:	1947883a 	add	r3,r3,r5
 8002104:	30c7883a 	add	r3,r6,r3
 8002108:	18000726 	beq	r3,zero,8002128 <__cxa_rethrow+0x6c>
 800210c:	10000015 	stw	zero,0(r2)
 8002110:	24000b04 	addi	r16,r4,44
 8002114:	8009883a 	mov	r4,r16
 8002118:	8002c7c0 	call	8002c7c <_Unwind_SjLj_Resume_or_Rethrow>
 800211c:	8009883a 	mov	r4,r16
 8002120:	80019940 	call	8001994 <__cxa_begin_catch>
 8002124:	8001bdc0 	call	8001bdc <_ZSt9terminatev>
 8002128:	00c00044 	movi	r3,1
 800212c:	19fff736 	bltu	r3,r7,800210c <__alt_mem_bufferram_out+0xf7e0210c>
 8002130:	20800517 	ldw	r2,20(r4)
 8002134:	0085c83a 	sub	r2,zero,r2
 8002138:	20800515 	stw	r2,20(r4)
 800213c:	003ff406 	br	8002110 <__alt_mem_bufferram_out+0xf7e02110>

08002140 <__cxa_call_terminate>:
 8002140:	defffe04 	addi	sp,sp,-8
 8002144:	dfc00115 	stw	ra,4(sp)
 8002148:	dc000015 	stw	r16,0(sp)
 800214c:	20000d26 	beq	r4,zero,8002184 <__cxa_call_terminate+0x44>
 8002150:	2021883a 	mov	r16,r4
 8002154:	80019940 	call	8001994 <__cxa_begin_catch>
 8002158:	80c00017 	ldw	r3,0(r16)
 800215c:	016f3574 	movhi	r5,48341
 8002160:	29754004 	addi	r5,r5,-11008
 8002164:	194b883a 	add	r5,r3,r5
 8002168:	80800117 	ldw	r2,4(r16)
 800216c:	28c9803a 	cmpltu	r4,r5,r3
 8002170:	00ee2cb4 	movhi	r3,47282
 8002174:	18eaaf04 	addi	r3,r3,-21828
 8002178:	10c5883a 	add	r2,r2,r3
 800217c:	2085883a 	add	r2,r4,r2
 8002180:	10000126 	beq	r2,zero,8002188 <__cxa_call_terminate+0x48>
 8002184:	8001bdc0 	call	8001bdc <_ZSt9terminatev>
 8002188:	00800044 	movi	r2,1
 800218c:	117ffd36 	bltu	r2,r5,8002184 <__alt_mem_bufferram_out+0xf7e02184>
 8002190:	813ff817 	ldw	r4,-32(r16)
 8002194:	8001b1c0 	call	8001b1c <_ZN10__cxxabiv111__terminateEPFvvE>

08002198 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8002198:	00820074 	movhi	r2,2049
 800219c:	10a55c04 	addi	r2,r2,-27280
 80021a0:	20800015 	stw	r2,0(r4)
 80021a4:	80025fc1 	jmpi	80025fc <_ZN10__cxxabiv117__class_type_infoD1Ev>

080021a8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 80021a8:	defffe04 	addi	sp,sp,-8
 80021ac:	00820074 	movhi	r2,2049
 80021b0:	dc000015 	stw	r16,0(sp)
 80021b4:	dfc00115 	stw	ra,4(sp)
 80021b8:	10a55c04 	addi	r2,r2,-27280
 80021bc:	20800015 	stw	r2,0(r4)
 80021c0:	2021883a 	mov	r16,r4
 80021c4:	80025fc0 	call	80025fc <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80021c8:	8009883a 	mov	r4,r16
 80021cc:	dfc00117 	ldw	ra,4(sp)
 80021d0:	dc000017 	ldw	r16,0(sp)
 80021d4:	dec00204 	addi	sp,sp,8
 80021d8:	80009a41 	jmpi	80009a4 <_ZdlPv>

080021dc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 80021dc:	defff504 	addi	sp,sp,-44
 80021e0:	dc000115 	stw	r16,4(sp)
 80021e4:	38800117 	ldw	r2,4(r7)
 80021e8:	24000117 	ldw	r16,4(r4)
 80021ec:	df000915 	stw	fp,36(sp)
 80021f0:	ddc00815 	stw	r23,32(sp)
 80021f4:	dd800715 	stw	r22,28(sp)
 80021f8:	dcc00415 	stw	r19,16(sp)
 80021fc:	dc800315 	stw	r18,12(sp)
 8002200:	dc400215 	stw	r17,8(sp)
 8002204:	dfc00a15 	stw	ra,40(sp)
 8002208:	dd400615 	stw	r21,24(sp)
 800220c:	dd000515 	stw	r20,20(sp)
 8002210:	2823883a 	mov	r17,r5
 8002214:	3039883a 	mov	fp,r6
 8002218:	dcc00b17 	ldw	r19,44(sp)
 800221c:	ddc00c17 	ldw	r23,48(sp)
 8002220:	dd800d17 	ldw	r22,52(sp)
 8002224:	dc800e17 	ldw	r18,56(sp)
 8002228:	80800b26 	beq	r16,r2,8002258 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7c>
 800222c:	80c00007 	ldb	r3,0(r16)
 8002230:	2029883a 	mov	r20,r4
 8002234:	01000a84 	movi	r4,42
 8002238:	382b883a 	mov	r21,r7
 800223c:	19001a26 	beq	r3,r4,80022a8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
 8002240:	100b883a 	mov	r5,r2
 8002244:	8009883a 	mov	r4,r16
 8002248:	d8c00015 	stw	r3,0(sp)
 800224c:	8003c600 	call	8003c60 <strcmp>
 8002250:	d8c00017 	ldw	r3,0(sp)
 8002254:	1000141e 	bne	r2,zero,80022a8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
 8002258:	94c00015 	stw	r19,0(r18)
 800225c:	97000115 	stw	fp,4(r18)
 8002260:	88002816 	blt	r17,zero,8002304 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x128>
 8002264:	9c63883a 	add	r17,r19,r17
 8002268:	b4403226 	beq	r22,r17,8002334 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x158>
 800226c:	00800044 	movi	r2,1
 8002270:	90800315 	stw	r2,12(r18)
 8002274:	0005883a 	mov	r2,zero
 8002278:	dfc00a17 	ldw	ra,40(sp)
 800227c:	df000917 	ldw	fp,36(sp)
 8002280:	ddc00817 	ldw	r23,32(sp)
 8002284:	dd800717 	ldw	r22,28(sp)
 8002288:	dd400617 	ldw	r21,24(sp)
 800228c:	dd000517 	ldw	r20,20(sp)
 8002290:	dcc00417 	ldw	r19,16(sp)
 8002294:	dc800317 	ldw	r18,12(sp)
 8002298:	dc400217 	ldw	r17,8(sp)
 800229c:	dc000117 	ldw	r16,4(sp)
 80022a0:	dec00b04 	addi	sp,sp,44
 80022a4:	f800283a 	ret
 80022a8:	9d801926 	beq	r19,r22,8002310 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x134>
 80022ac:	a1000217 	ldw	r4,8(r20)
 80022b0:	a80f883a 	mov	r7,r21
 80022b4:	e00d883a 	mov	r6,fp
 80022b8:	20800017 	ldw	r2,0(r4)
 80022bc:	dc800e15 	stw	r18,56(sp)
 80022c0:	dd800d15 	stw	r22,52(sp)
 80022c4:	ddc00c15 	stw	r23,48(sp)
 80022c8:	dcc00b15 	stw	r19,44(sp)
 80022cc:	10800717 	ldw	r2,28(r2)
 80022d0:	880b883a 	mov	r5,r17
 80022d4:	dfc00a17 	ldw	ra,40(sp)
 80022d8:	df000917 	ldw	fp,36(sp)
 80022dc:	ddc00817 	ldw	r23,32(sp)
 80022e0:	dd800717 	ldw	r22,28(sp)
 80022e4:	dd400617 	ldw	r21,24(sp)
 80022e8:	dd000517 	ldw	r20,20(sp)
 80022ec:	dcc00417 	ldw	r19,16(sp)
 80022f0:	dc800317 	ldw	r18,12(sp)
 80022f4:	dc400217 	ldw	r17,8(sp)
 80022f8:	dc000117 	ldw	r16,4(sp)
 80022fc:	dec00b04 	addi	sp,sp,44
 8002300:	1000683a 	jmp	r2
 8002304:	00bfff84 	movi	r2,-2
 8002308:	88bfda1e 	bne	r17,r2,8002274 <__alt_mem_bufferram_out+0xf7e02274>
 800230c:	003fd706 	br	800226c <__alt_mem_bufferram_out+0xf7e0226c>
 8002310:	b9400117 	ldw	r5,4(r23)
 8002314:	81400526 	beq	r16,r5,800232c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x150>
 8002318:	00800a84 	movi	r2,42
 800231c:	18bfe326 	beq	r3,r2,80022ac <__alt_mem_bufferram_out+0xf7e022ac>
 8002320:	8009883a 	mov	r4,r16
 8002324:	8003c600 	call	8003c60 <strcmp>
 8002328:	103fe01e 	bne	r2,zero,80022ac <__alt_mem_bufferram_out+0xf7e022ac>
 800232c:	97000215 	stw	fp,8(r18)
 8002330:	003fd006 	br	8002274 <__alt_mem_bufferram_out+0xf7e02274>
 8002334:	00800184 	movi	r2,6
 8002338:	003fcd06 	br	8002270 <__alt_mem_bufferram_out+0xf7e02270>

0800233c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 800233c:	defffa04 	addi	sp,sp,-24
 8002340:	dc000215 	stw	r16,8(sp)
 8002344:	dc000617 	ldw	r16,24(sp)
 8002348:	dc800415 	stw	r18,16(sp)
 800234c:	dc400315 	stw	r17,12(sp)
 8002350:	dfc00515 	stw	ra,20(sp)
 8002354:	2023883a 	mov	r17,r4
 8002358:	2825883a 	mov	r18,r5
 800235c:	81800b26 	beq	r16,r6,800238c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x50>
 8002360:	89000217 	ldw	r4,8(r17)
 8002364:	900b883a 	mov	r5,r18
 8002368:	20800017 	ldw	r2,0(r4)
 800236c:	dc000615 	stw	r16,24(sp)
 8002370:	10800817 	ldw	r2,32(r2)
 8002374:	dfc00517 	ldw	ra,20(sp)
 8002378:	dc800417 	ldw	r18,16(sp)
 800237c:	dc400317 	ldw	r17,12(sp)
 8002380:	dc000217 	ldw	r16,8(sp)
 8002384:	dec00604 	addi	sp,sp,24
 8002388:	1000683a 	jmp	r2
 800238c:	21000117 	ldw	r4,4(r4)
 8002390:	39400117 	ldw	r5,4(r7)
 8002394:	21400926 	beq	r4,r5,80023bc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x80>
 8002398:	20c00007 	ldb	r3,0(r4)
 800239c:	00800a84 	movi	r2,42
 80023a0:	18bfef26 	beq	r3,r2,8002360 <__alt_mem_bufferram_out+0xf7e02360>
 80023a4:	d9800015 	stw	r6,0(sp)
 80023a8:	d9c00115 	stw	r7,4(sp)
 80023ac:	8003c600 	call	8003c60 <strcmp>
 80023b0:	d9800017 	ldw	r6,0(sp)
 80023b4:	d9c00117 	ldw	r7,4(sp)
 80023b8:	103fe91e 	bne	r2,zero,8002360 <__alt_mem_bufferram_out+0xf7e02360>
 80023bc:	00800184 	movi	r2,6
 80023c0:	dfc00517 	ldw	ra,20(sp)
 80023c4:	dc800417 	ldw	r18,16(sp)
 80023c8:	dc400317 	ldw	r17,12(sp)
 80023cc:	dc000217 	ldw	r16,8(sp)
 80023d0:	dec00604 	addi	sp,sp,24
 80023d4:	f800283a 	ret

080023d8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 80023d8:	defffb04 	addi	sp,sp,-20
 80023dc:	dcc00315 	stw	r19,12(sp)
 80023e0:	dc800215 	stw	r18,8(sp)
 80023e4:	dc400115 	stw	r17,4(sp)
 80023e8:	dc000015 	stw	r16,0(sp)
 80023ec:	dfc00415 	stw	ra,16(sp)
 80023f0:	2027883a 	mov	r19,r4
 80023f4:	2821883a 	mov	r16,r5
 80023f8:	3023883a 	mov	r17,r6
 80023fc:	3825883a 	mov	r18,r7
 8002400:	80026400 	call	8002640 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8002404:	10c03fcc 	andi	r3,r2,255
 8002408:	18000726 	beq	r3,zero,8002428 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x50>
 800240c:	dfc00417 	ldw	ra,16(sp)
 8002410:	dcc00317 	ldw	r19,12(sp)
 8002414:	dc800217 	ldw	r18,8(sp)
 8002418:	dc400117 	ldw	r17,4(sp)
 800241c:	dc000017 	ldw	r16,0(sp)
 8002420:	dec00504 	addi	sp,sp,20
 8002424:	f800283a 	ret
 8002428:	99000217 	ldw	r4,8(r19)
 800242c:	900f883a 	mov	r7,r18
 8002430:	880d883a 	mov	r6,r17
 8002434:	20800017 	ldw	r2,0(r4)
 8002438:	800b883a 	mov	r5,r16
 800243c:	10800617 	ldw	r2,24(r2)
 8002440:	dfc00417 	ldw	ra,16(sp)
 8002444:	dcc00317 	ldw	r19,12(sp)
 8002448:	dc800217 	ldw	r18,8(sp)
 800244c:	dc400117 	ldw	r17,4(sp)
 8002450:	dc000017 	ldw	r16,0(sp)
 8002454:	dec00504 	addi	sp,sp,20
 8002458:	1000683a 	jmp	r2

0800245c <_ZNSt9type_infoD1Ev>:
 800245c:	f800283a 	ret

08002460 <_ZNKSt9type_info14__is_pointer_pEv>:
 8002460:	0005883a 	mov	r2,zero
 8002464:	f800283a 	ret

08002468 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
 8002468:	0005883a 	mov	r2,zero
 800246c:	f800283a 	ret

08002470 <_ZNSt9type_infoD0Ev>:
 8002470:	80009a41 	jmpi	80009a4 <_ZdlPv>

08002474 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
 8002474:	21000117 	ldw	r4,4(r4)
 8002478:	29400117 	ldw	r5,4(r5)
 800247c:	21400c26 	beq	r4,r5,80024b0 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x3c>
 8002480:	20c00007 	ldb	r3,0(r4)
 8002484:	00800a84 	movi	r2,42
 8002488:	18800726 	beq	r3,r2,80024a8 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x34>
 800248c:	deffff04 	addi	sp,sp,-4
 8002490:	dfc00015 	stw	ra,0(sp)
 8002494:	8003c600 	call	8003c60 <strcmp>
 8002498:	1005003a 	cmpeq	r2,r2,zero
 800249c:	dfc00017 	ldw	ra,0(sp)
 80024a0:	dec00104 	addi	sp,sp,4
 80024a4:	f800283a 	ret
 80024a8:	0005883a 	mov	r2,zero
 80024ac:	f800283a 	ret
 80024b0:	00800044 	movi	r2,1
 80024b4:	f800283a 	ret

080024b8 <__cxa_pure_virtual>:
 80024b8:	01420074 	movhi	r5,2049
 80024bc:	deffff04 	addi	sp,sp,-4
 80024c0:	29657104 	addi	r5,r5,-27196
 80024c4:	018006c4 	movi	r6,27
 80024c8:	01000084 	movi	r4,2
 80024cc:	dfc00015 	stw	ra,0(sp)
 80024d0:	8006ca40 	call	8006ca4 <write>
 80024d4:	8001bdc0 	call	8001bdc <_ZSt9terminatev>

080024d8 <__cxa_deleted_virtual>:
 80024d8:	01420074 	movhi	r5,2049
 80024dc:	deffff04 	addi	sp,sp,-4
 80024e0:	29657804 	addi	r5,r5,-27168
 80024e4:	01800784 	movi	r6,30
 80024e8:	01000084 	movi	r4,2
 80024ec:	dfc00015 	stw	ra,0(sp)
 80024f0:	8006ca40 	call	8006ca4 <write>
 80024f4:	8001bdc0 	call	8001bdc <_ZSt9terminatev>

080024f8 <_ZNKSt9bad_alloc4whatEv>:
 80024f8:	00820074 	movhi	r2,2049
 80024fc:	10a58004 	addi	r2,r2,-27136
 8002500:	f800283a 	ret

08002504 <_ZNSt9bad_allocD1Ev>:
 8002504:	00820074 	movhi	r2,2049
 8002508:	10a58d04 	addi	r2,r2,-27084
 800250c:	20800015 	stw	r2,0(r4)
 8002510:	8001fb01 	jmpi	8001fb0 <_ZNSt9exceptionD1Ev>

08002514 <_ZNSt9bad_allocD0Ev>:
 8002514:	defffe04 	addi	sp,sp,-8
 8002518:	00820074 	movhi	r2,2049
 800251c:	dc000015 	stw	r16,0(sp)
 8002520:	dfc00115 	stw	ra,4(sp)
 8002524:	10a58d04 	addi	r2,r2,-27084
 8002528:	20800015 	stw	r2,0(r4)
 800252c:	2021883a 	mov	r16,r4
 8002530:	8001fb00 	call	8001fb0 <_ZNSt9exceptionD1Ev>
 8002534:	8009883a 	mov	r4,r16
 8002538:	dfc00117 	ldw	ra,4(sp)
 800253c:	dc000017 	ldw	r16,0(sp)
 8002540:	dec00204 	addi	sp,sp,8
 8002544:	80009a41 	jmpi	80009a4 <_ZdlPv>

08002548 <_ZSt15set_new_handlerPFvvE>:
 8002548:	00c20074 	movhi	r3,2049
 800254c:	18f30404 	addi	r3,r3,-13296
 8002550:	18800017 	ldw	r2,0(r3)
 8002554:	19000015 	stw	r4,0(r3)
 8002558:	f800283a 	ret

0800255c <_ZSt15get_new_handlerv>:
 800255c:	00820074 	movhi	r2,2049
 8002560:	10b30404 	addi	r2,r2,-13296
 8002564:	10800017 	ldw	r2,0(r2)
 8002568:	f800283a 	ret

0800256c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 800256c:	20800017 	ldw	r2,0(r4)
 8002570:	defffa04 	addi	sp,sp,-24
 8002574:	dc000415 	stw	r16,16(sp)
 8002578:	10800617 	ldw	r2,24(r2)
 800257c:	3021883a 	mov	r16,r6
 8002580:	31800017 	ldw	r6,0(r6)
 8002584:	00c00404 	movi	r3,16
 8002588:	d8c00215 	stw	r3,8(sp)
 800258c:	dfc00515 	stw	ra,20(sp)
 8002590:	d8000015 	stw	zero,0(sp)
 8002594:	d8000115 	stw	zero,4(sp)
 8002598:	d8000315 	stw	zero,12(sp)
 800259c:	d80f883a 	mov	r7,sp
 80025a0:	103ee83a 	callr	r2
 80025a4:	d8800117 	ldw	r2,4(sp)
 80025a8:	00c00184 	movi	r3,6
 80025ac:	1080018c 	andi	r2,r2,6
 80025b0:	10c00526 	beq	r2,r3,80025c8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x5c>
 80025b4:	0005883a 	mov	r2,zero
 80025b8:	dfc00517 	ldw	ra,20(sp)
 80025bc:	dc000417 	ldw	r16,16(sp)
 80025c0:	dec00604 	addi	sp,sp,24
 80025c4:	f800283a 	ret
 80025c8:	d8c00017 	ldw	r3,0(sp)
 80025cc:	00800044 	movi	r2,1
 80025d0:	80c00015 	stw	r3,0(r16)
 80025d4:	dfc00517 	ldw	ra,20(sp)
 80025d8:	dc000417 	ldw	r16,16(sp)
 80025dc:	dec00604 	addi	sp,sp,24
 80025e0:	f800283a 	ret

080025e4 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 80025e4:	d8800017 	ldw	r2,0(sp)
 80025e8:	11800226 	beq	r2,r6,80025f4 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_+0x10>
 80025ec:	00800044 	movi	r2,1
 80025f0:	f800283a 	ret
 80025f4:	00800184 	movi	r2,6
 80025f8:	f800283a 	ret

080025fc <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 80025fc:	00820074 	movhi	r2,2049
 8002600:	10a59e04 	addi	r2,r2,-27016
 8002604:	20800015 	stw	r2,0(r4)
 8002608:	800245c1 	jmpi	800245c <_ZNSt9type_infoD1Ev>

0800260c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 800260c:	defffe04 	addi	sp,sp,-8
 8002610:	00820074 	movhi	r2,2049
 8002614:	dc000015 	stw	r16,0(sp)
 8002618:	dfc00115 	stw	ra,4(sp)
 800261c:	10a59e04 	addi	r2,r2,-27016
 8002620:	20800015 	stw	r2,0(r4)
 8002624:	2021883a 	mov	r16,r4
 8002628:	800245c0 	call	800245c <_ZNSt9type_infoD1Ev>
 800262c:	8009883a 	mov	r4,r16
 8002630:	dfc00117 	ldw	ra,4(sp)
 8002634:	dc000017 	ldw	r16,0(sp)
 8002638:	dec00204 	addi	sp,sp,8
 800263c:	80009a41 	jmpi	80009a4 <_ZdlPv>

08002640 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8002640:	21000117 	ldw	r4,4(r4)
 8002644:	29400117 	ldw	r5,4(r5)
 8002648:	defffd04 	addi	sp,sp,-12
 800264c:	dc400115 	stw	r17,4(sp)
 8002650:	dc000015 	stw	r16,0(sp)
 8002654:	dfc00215 	stw	ra,8(sp)
 8002658:	3023883a 	mov	r17,r6
 800265c:	3821883a 	mov	r16,r7
 8002660:	21400526 	beq	r4,r5,8002678 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x38>
 8002664:	20c00007 	ldb	r3,0(r4)
 8002668:	00800a84 	movi	r2,42
 800266c:	18800d26 	beq	r3,r2,80026a4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
 8002670:	8003c600 	call	8003c60 <strcmp>
 8002674:	10000b1e 	bne	r2,zero,80026a4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
 8002678:	00800204 	movi	r2,8
 800267c:	80800315 	stw	r2,12(r16)
 8002680:	00800184 	movi	r2,6
 8002684:	80800115 	stw	r2,4(r16)
 8002688:	84400015 	stw	r17,0(r16)
 800268c:	00800044 	movi	r2,1
 8002690:	dfc00217 	ldw	ra,8(sp)
 8002694:	dc400117 	ldw	r17,4(sp)
 8002698:	dc000017 	ldw	r16,0(sp)
 800269c:	dec00304 	addi	sp,sp,12
 80026a0:	f800283a 	ret
 80026a4:	0005883a 	mov	r2,zero
 80026a8:	003ff906 	br	8002690 <__alt_mem_bufferram_out+0xf7e02690>

080026ac <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 80026ac:	defffa04 	addi	sp,sp,-24
 80026b0:	dc800415 	stw	r18,16(sp)
 80026b4:	d8800817 	ldw	r2,32(sp)
 80026b8:	dc800617 	ldw	r18,24(sp)
 80026bc:	dc400315 	stw	r17,12(sp)
 80026c0:	dc000215 	stw	r16,8(sp)
 80026c4:	dfc00515 	stw	ra,20(sp)
 80026c8:	dc400917 	ldw	r17,36(sp)
 80026cc:	24000117 	ldw	r16,4(r4)
 80026d0:	90801526 	beq	r18,r2,8002728 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x7c>
 80026d4:	39400117 	ldw	r5,4(r7)
 80026d8:	2c000826 	beq	r5,r16,80026fc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x50>
 80026dc:	80c00007 	ldb	r3,0(r16)
 80026e0:	00800a84 	movi	r2,42
 80026e4:	18800926 	beq	r3,r2,800270c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
 80026e8:	8009883a 	mov	r4,r16
 80026ec:	d9800115 	stw	r6,4(sp)
 80026f0:	8003c600 	call	8003c60 <strcmp>
 80026f4:	d9800117 	ldw	r6,4(sp)
 80026f8:	1000041e 	bne	r2,zero,800270c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
 80026fc:	00800044 	movi	r2,1
 8002700:	8c800015 	stw	r18,0(r17)
 8002704:	89800115 	stw	r6,4(r17)
 8002708:	88800315 	stw	r2,12(r17)
 800270c:	0005883a 	mov	r2,zero
 8002710:	dfc00517 	ldw	ra,20(sp)
 8002714:	dc800417 	ldw	r18,16(sp)
 8002718:	dc400317 	ldw	r17,12(sp)
 800271c:	dc000217 	ldw	r16,8(sp)
 8002720:	dec00604 	addi	sp,sp,24
 8002724:	f800283a 	ret
 8002728:	d8800717 	ldw	r2,28(sp)
 800272c:	11400117 	ldw	r5,4(r2)
 8002730:	81400a26 	beq	r16,r5,800275c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb0>
 8002734:	80c00007 	ldb	r3,0(r16)
 8002738:	00800a84 	movi	r2,42
 800273c:	18800c26 	beq	r3,r2,8002770 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xc4>
 8002740:	8009883a 	mov	r4,r16
 8002744:	d9800115 	stw	r6,4(sp)
 8002748:	d9c00015 	stw	r7,0(sp)
 800274c:	8003c600 	call	8003c60 <strcmp>
 8002750:	d9800117 	ldw	r6,4(sp)
 8002754:	d9c00017 	ldw	r7,0(sp)
 8002758:	1000021e 	bne	r2,zero,8002764 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb8>
 800275c:	89800215 	stw	r6,8(r17)
 8002760:	003fea06 	br	800270c <__alt_mem_bufferram_out+0xf7e0270c>
 8002764:	39400117 	ldw	r5,4(r7)
 8002768:	817fdf1e 	bne	r16,r5,80026e8 <__alt_mem_bufferram_out+0xf7e026e8>
 800276c:	003fe306 	br	80026fc <__alt_mem_bufferram_out+0xf7e026fc>
 8002770:	38800117 	ldw	r2,4(r7)
 8002774:	80bfe51e 	bne	r16,r2,800270c <__alt_mem_bufferram_out+0xf7e0270c>
 8002778:	003fe006 	br	80026fc <__alt_mem_bufferram_out+0xf7e026fc>

0800277c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 800277c:	20800117 	ldw	r2,4(r4)
 8002780:	28c00117 	ldw	r3,4(r5)
 8002784:	10c02926 	beq	r2,r3,800282c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0xb0>
 8002788:	defffb04 	addi	sp,sp,-20
 800278c:	dcc00315 	stw	r19,12(sp)
 8002790:	dc800215 	stw	r18,8(sp)
 8002794:	dc400115 	stw	r17,4(sp)
 8002798:	dc000015 	stw	r16,0(sp)
 800279c:	dfc00415 	stw	ra,16(sp)
 80027a0:	2821883a 	mov	r16,r5
 80027a4:	11400007 	ldb	r5,0(r2)
 80027a8:	2025883a 	mov	r18,r4
 80027ac:	01000a84 	movi	r4,42
 80027b0:	3823883a 	mov	r17,r7
 80027b4:	3027883a 	mov	r19,r6
 80027b8:	29000626 	beq	r5,r4,80027d4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
 80027bc:	180b883a 	mov	r5,r3
 80027c0:	1009883a 	mov	r4,r2
 80027c4:	8003c600 	call	8003c60 <strcmp>
 80027c8:	1000021e 	bne	r2,zero,80027d4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
 80027cc:	00800044 	movi	r2,1
 80027d0:	00000306 	br	80027e0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x64>
 80027d4:	008000c4 	movi	r2,3
 80027d8:	1440082e 	bgeu	r2,r17,80027fc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x80>
 80027dc:	0005883a 	mov	r2,zero
 80027e0:	dfc00417 	ldw	ra,16(sp)
 80027e4:	dcc00317 	ldw	r19,12(sp)
 80027e8:	dc800217 	ldw	r18,8(sp)
 80027ec:	dc400117 	ldw	r17,4(sp)
 80027f0:	dc000017 	ldw	r16,0(sp)
 80027f4:	dec00504 	addi	sp,sp,20
 80027f8:	f800283a 	ret
 80027fc:	80800017 	ldw	r2,0(r16)
 8002800:	980d883a 	mov	r6,r19
 8002804:	900b883a 	mov	r5,r18
 8002808:	10800517 	ldw	r2,20(r2)
 800280c:	8009883a 	mov	r4,r16
 8002810:	dfc00417 	ldw	ra,16(sp)
 8002814:	dcc00317 	ldw	r19,12(sp)
 8002818:	dc800217 	ldw	r18,8(sp)
 800281c:	dc400117 	ldw	r17,4(sp)
 8002820:	dc000017 	ldw	r16,0(sp)
 8002824:	dec00504 	addi	sp,sp,20
 8002828:	1000683a 	jmp	r2
 800282c:	00800044 	movi	r2,1
 8002830:	f800283a 	ret

08002834 <_Unwind_ForcedUnwind_Phase2>:
 8002834:	defff404 	addi	sp,sp,-48
 8002838:	dd800915 	stw	r22,36(sp)
 800283c:	05820074 	movhi	r22,2049
 8002840:	ddc00a15 	stw	r23,40(sp)
 8002844:	dd400815 	stw	r21,32(sp)
 8002848:	dd000715 	stw	r20,28(sp)
 800284c:	dcc00615 	stw	r19,24(sp)
 8002850:	dc400415 	stw	r17,16(sp)
 8002854:	dc000315 	stw	r16,12(sp)
 8002858:	dfc00b15 	stw	ra,44(sp)
 800285c:	dc800515 	stw	r18,20(sp)
 8002860:	2021883a 	mov	r16,r4
 8002864:	2823883a 	mov	r17,r5
 8002868:	24c00317 	ldw	r19,12(r4)
 800286c:	25000417 	ldw	r20,16(r4)
 8002870:	28c00017 	ldw	r3,0(r5)
 8002874:	b5b30504 	addi	r22,r22,-13292
 8002878:	054001c4 	movi	r21,7
 800287c:	05c00204 	movi	r23,8
 8002880:	00001606 	br	80028dc <_Unwind_ForcedUnwind_Phase2+0xa8>
 8002884:	81800017 	ldw	r6,0(r16)
 8002888:	81c00117 	ldw	r7,4(r16)
 800288c:	1c800617 	ldw	r18,24(r3)
 8002890:	dd000215 	stw	r20,8(sp)
 8002894:	dc400115 	stw	r17,4(sp)
 8002898:	dc000015 	stw	r16,0(sp)
 800289c:	983ee83a 	callr	r19
 80028a0:	01400284 	movi	r5,10
 80028a4:	01000044 	movi	r4,1
 80028a8:	1000241e 	bne	r2,zero,800293c <_Unwind_ForcedUnwind_Phase2+0x108>
 80028ac:	90000726 	beq	r18,zero,80028cc <_Unwind_ForcedUnwind_Phase2+0x98>
 80028b0:	81800017 	ldw	r6,0(r16)
 80028b4:	81c00117 	ldw	r7,4(r16)
 80028b8:	dc400115 	stw	r17,4(sp)
 80028bc:	dc000015 	stw	r16,0(sp)
 80028c0:	903ee83a 	callr	r18
 80028c4:	15401f26 	beq	r2,r21,8002944 <_Unwind_ForcedUnwind_Phase2+0x110>
 80028c8:	15c01c1e 	bne	r2,r23,800293c <_Unwind_ForcedUnwind_Phase2+0x108>
 80028cc:	88800017 	ldw	r2,0(r17)
 80028d0:	10c00017 	ldw	r3,0(r2)
 80028d4:	b0c00015 	stw	r3,0(r22)
 80028d8:	88c00015 	stw	r3,0(r17)
 80028dc:	01400284 	movi	r5,10
 80028e0:	01000044 	movi	r4,1
 80028e4:	183fe71e 	bne	r3,zero,8002884 <__alt_mem_bufferram_out+0xf7e02884>
 80028e8:	81800017 	ldw	r6,0(r16)
 80028ec:	81c00117 	ldw	r7,4(r16)
 80028f0:	01400684 	movi	r5,26
 80028f4:	dd000215 	stw	r20,8(sp)
 80028f8:	dc400115 	stw	r17,4(sp)
 80028fc:	dc000015 	stw	r16,0(sp)
 8002900:	01000044 	movi	r4,1
 8002904:	983ee83a 	callr	r19
 8002908:	10000c1e 	bne	r2,zero,800293c <_Unwind_ForcedUnwind_Phase2+0x108>
 800290c:	00800144 	movi	r2,5
 8002910:	dfc00b17 	ldw	ra,44(sp)
 8002914:	ddc00a17 	ldw	r23,40(sp)
 8002918:	dd800917 	ldw	r22,36(sp)
 800291c:	dd400817 	ldw	r21,32(sp)
 8002920:	dd000717 	ldw	r20,28(sp)
 8002924:	dcc00617 	ldw	r19,24(sp)
 8002928:	dc800517 	ldw	r18,20(sp)
 800292c:	dc400417 	ldw	r17,16(sp)
 8002930:	dc000317 	ldw	r16,12(sp)
 8002934:	dec00c04 	addi	sp,sp,48
 8002938:	f800283a 	ret
 800293c:	00800084 	movi	r2,2
 8002940:	003ff306 	br	8002910 <__alt_mem_bufferram_out+0xf7e02910>
 8002944:	a805883a 	mov	r2,r21
 8002948:	003ff106 	br	8002910 <__alt_mem_bufferram_out+0xf7e02910>

0800294c <_Unwind_RaiseException_Phase2>:
 800294c:	28c00017 	ldw	r3,0(r5)
 8002950:	defff804 	addi	sp,sp,-32
 8002954:	dcc00515 	stw	r19,20(sp)
 8002958:	dc800415 	stw	r18,16(sp)
 800295c:	dc400315 	stw	r17,12(sp)
 8002960:	dc000215 	stw	r16,8(sp)
 8002964:	dfc00715 	stw	ra,28(sp)
 8002968:	dd000615 	stw	r20,24(sp)
 800296c:	2823883a 	mov	r17,r5
 8002970:	2021883a 	mov	r16,r4
 8002974:	048001c4 	movi	r18,7
 8002978:	04c00204 	movi	r19,8
 800297c:	18001326 	beq	r3,zero,80029cc <_Unwind_RaiseException_Phase2+0x80>
 8002980:	81000417 	ldw	r4,16(r16)
 8002984:	1a000617 	ldw	r8,24(r3)
 8002988:	19001926 	beq	r3,r4,80029f0 <_Unwind_RaiseException_Phase2+0xa4>
 800298c:	40000c26 	beq	r8,zero,80029c0 <_Unwind_RaiseException_Phase2+0x74>
 8002990:	01400084 	movi	r5,2
 8002994:	0029883a 	mov	r20,zero
 8002998:	81800017 	ldw	r6,0(r16)
 800299c:	81c00117 	ldw	r7,4(r16)
 80029a0:	01000044 	movi	r4,1
 80029a4:	dc400115 	stw	r17,4(sp)
 80029a8:	dc000015 	stw	r16,0(sp)
 80029ac:	403ee83a 	callr	r8
 80029b0:	14801326 	beq	r2,r18,8002a00 <_Unwind_RaiseException_Phase2+0xb4>
 80029b4:	14c0051e 	bne	r2,r19,80029cc <_Unwind_RaiseException_Phase2+0x80>
 80029b8:	a000131e 	bne	r20,zero,8002a08 <_Unwind_RaiseException_Phase2+0xbc>
 80029bc:	88c00017 	ldw	r3,0(r17)
 80029c0:	18c00017 	ldw	r3,0(r3)
 80029c4:	88c00015 	stw	r3,0(r17)
 80029c8:	183fed1e 	bne	r3,zero,8002980 <__alt_mem_bufferram_out+0xf7e02980>
 80029cc:	00800084 	movi	r2,2
 80029d0:	dfc00717 	ldw	ra,28(sp)
 80029d4:	dd000617 	ldw	r20,24(sp)
 80029d8:	dcc00517 	ldw	r19,20(sp)
 80029dc:	dc800417 	ldw	r18,16(sp)
 80029e0:	dc400317 	ldw	r17,12(sp)
 80029e4:	dc000217 	ldw	r16,8(sp)
 80029e8:	dec00804 	addi	sp,sp,32
 80029ec:	f800283a 	ret
 80029f0:	40000526 	beq	r8,zero,8002a08 <_Unwind_RaiseException_Phase2+0xbc>
 80029f4:	01400184 	movi	r5,6
 80029f8:	05000104 	movi	r20,4
 80029fc:	003fe606 	br	8002998 <__alt_mem_bufferram_out+0xf7e02998>
 8002a00:	9005883a 	mov	r2,r18
 8002a04:	003ff206 	br	80029d0 <__alt_mem_bufferram_out+0xf7e029d0>
 8002a08:	8002d540 	call	8002d54 <abort>

08002a0c <uw_install_context.isra.1>:
 8002a0c:	20c00017 	ldw	r3,0(r4)
 8002a10:	deffff04 	addi	sp,sp,-4
 8002a14:	01420074 	movhi	r5,2049
 8002a18:	19000917 	ldw	r4,36(r3)
 8002a1c:	df000015 	stw	fp,0(sp)
 8002a20:	18800804 	addi	r2,r3,32
 8002a24:	d839883a 	mov	fp,sp
 8002a28:	29730504 	addi	r5,r5,-13292
 8002a2c:	28c00015 	stw	r3,0(r5)
 8002a30:	17000017 	ldw	fp,0(r2)
 8002a34:	1ec00a17 	ldw	sp,40(r3)
 8002a38:	2000683a 	jmp	r4

08002a3c <_Unwind_SjLj_Register>:
 8002a3c:	00820074 	movhi	r2,2049
 8002a40:	10b30504 	addi	r2,r2,-13292
 8002a44:	10c00017 	ldw	r3,0(r2)
 8002a48:	11000015 	stw	r4,0(r2)
 8002a4c:	20c00015 	stw	r3,0(r4)
 8002a50:	f800283a 	ret

08002a54 <_Unwind_SjLj_Unregister>:
 8002a54:	20c00017 	ldw	r3,0(r4)
 8002a58:	00820074 	movhi	r2,2049
 8002a5c:	10b30504 	addi	r2,r2,-13292
 8002a60:	10c00015 	stw	r3,0(r2)
 8002a64:	f800283a 	ret

08002a68 <_Unwind_GetGR>:
 8002a68:	20800017 	ldw	r2,0(r4)
 8002a6c:	29400084 	addi	r5,r5,2
 8002a70:	294b883a 	add	r5,r5,r5
 8002a74:	294b883a 	add	r5,r5,r5
 8002a78:	114b883a 	add	r5,r2,r5
 8002a7c:	28800017 	ldw	r2,0(r5)
 8002a80:	f800283a 	ret

08002a84 <_Unwind_GetCFA>:
 8002a84:	20800017 	ldw	r2,0(r4)
 8002a88:	10000226 	beq	r2,zero,8002a94 <_Unwind_GetCFA+0x10>
 8002a8c:	10800a17 	ldw	r2,40(r2)
 8002a90:	f800283a 	ret
 8002a94:	0005883a 	mov	r2,zero
 8002a98:	f800283a 	ret

08002a9c <_Unwind_SetGR>:
 8002a9c:	20800017 	ldw	r2,0(r4)
 8002aa0:	29400084 	addi	r5,r5,2
 8002aa4:	294b883a 	add	r5,r5,r5
 8002aa8:	294b883a 	add	r5,r5,r5
 8002aac:	114b883a 	add	r5,r2,r5
 8002ab0:	29800015 	stw	r6,0(r5)
 8002ab4:	f800283a 	ret

08002ab8 <_Unwind_GetIP>:
 8002ab8:	20800017 	ldw	r2,0(r4)
 8002abc:	10800117 	ldw	r2,4(r2)
 8002ac0:	10800044 	addi	r2,r2,1
 8002ac4:	f800283a 	ret

08002ac8 <_Unwind_GetIPInfo>:
 8002ac8:	20800017 	ldw	r2,0(r4)
 8002acc:	28000015 	stw	zero,0(r5)
 8002ad0:	10000326 	beq	r2,zero,8002ae0 <_Unwind_GetIPInfo+0x18>
 8002ad4:	10800117 	ldw	r2,4(r2)
 8002ad8:	10800044 	addi	r2,r2,1
 8002adc:	f800283a 	ret
 8002ae0:	0005883a 	mov	r2,zero
 8002ae4:	f800283a 	ret

08002ae8 <_Unwind_SetIP>:
 8002ae8:	20800017 	ldw	r2,0(r4)
 8002aec:	297fffc4 	addi	r5,r5,-1
 8002af0:	11400115 	stw	r5,4(r2)
 8002af4:	f800283a 	ret

08002af8 <_Unwind_GetLanguageSpecificData>:
 8002af8:	20800017 	ldw	r2,0(r4)
 8002afc:	10800717 	ldw	r2,28(r2)
 8002b00:	f800283a 	ret

08002b04 <_Unwind_GetRegionStart>:
 8002b04:	0005883a 	mov	r2,zero
 8002b08:	f800283a 	ret

08002b0c <_Unwind_FindEnclosingFunction>:
 8002b0c:	0005883a 	mov	r2,zero
 8002b10:	f800283a 	ret

08002b14 <_Unwind_GetDataRelBase>:
 8002b14:	0005883a 	mov	r2,zero
 8002b18:	f800283a 	ret

08002b1c <_Unwind_GetTextRelBase>:
 8002b1c:	0005883a 	mov	r2,zero
 8002b20:	f800283a 	ret

08002b24 <_Unwind_SjLj_RaiseException>:
 8002b24:	00820074 	movhi	r2,2049
 8002b28:	defff804 	addi	sp,sp,-32
 8002b2c:	10b30504 	addi	r2,r2,-13292
 8002b30:	dc800515 	stw	r18,20(sp)
 8002b34:	14800017 	ldw	r18,0(r2)
 8002b38:	dfc00715 	stw	ra,28(sp)
 8002b3c:	dcc00615 	stw	r19,24(sp)
 8002b40:	dc400415 	stw	r17,16(sp)
 8002b44:	dc000315 	stw	r16,12(sp)
 8002b48:	dc800215 	stw	r18,8(sp)
 8002b4c:	90001426 	beq	r18,zero,8002ba0 <_Unwind_SjLj_RaiseException+0x7c>
 8002b50:	2021883a 	mov	r16,r4
 8002b54:	9005883a 	mov	r2,r18
 8002b58:	04400184 	movi	r17,6
 8002b5c:	04c00204 	movi	r19,8
 8002b60:	10800617 	ldw	r2,24(r2)
 8002b64:	10000a26 	beq	r2,zero,8002b90 <_Unwind_SjLj_RaiseException+0x6c>
 8002b68:	81800017 	ldw	r6,0(r16)
 8002b6c:	81c00117 	ldw	r7,4(r16)
 8002b70:	01400044 	movi	r5,1
 8002b74:	d8c00204 	addi	r3,sp,8
 8002b78:	d8c00115 	stw	r3,4(sp)
 8002b7c:	dc000015 	stw	r16,0(sp)
 8002b80:	2809883a 	mov	r4,r5
 8002b84:	103ee83a 	callr	r2
 8002b88:	14400d26 	beq	r2,r17,8002bc0 <_Unwind_SjLj_RaiseException+0x9c>
 8002b8c:	14c0171e 	bne	r2,r19,8002bec <_Unwind_SjLj_RaiseException+0xc8>
 8002b90:	d8800217 	ldw	r2,8(sp)
 8002b94:	10800017 	ldw	r2,0(r2)
 8002b98:	d8800215 	stw	r2,8(sp)
 8002b9c:	103ff01e 	bne	r2,zero,8002b60 <__alt_mem_bufferram_out+0xf7e02b60>
 8002ba0:	00800144 	movi	r2,5
 8002ba4:	dfc00717 	ldw	ra,28(sp)
 8002ba8:	dcc00617 	ldw	r19,24(sp)
 8002bac:	dc800517 	ldw	r18,20(sp)
 8002bb0:	dc400417 	ldw	r17,16(sp)
 8002bb4:	dc000317 	ldw	r16,12(sp)
 8002bb8:	dec00804 	addi	sp,sp,32
 8002bbc:	f800283a 	ret
 8002bc0:	d8800217 	ldw	r2,8(sp)
 8002bc4:	80000315 	stw	zero,12(r16)
 8002bc8:	d9400204 	addi	r5,sp,8
 8002bcc:	80800415 	stw	r2,16(r16)
 8002bd0:	8009883a 	mov	r4,r16
 8002bd4:	dc800215 	stw	r18,8(sp)
 8002bd8:	800294c0 	call	800294c <_Unwind_RaiseException_Phase2>
 8002bdc:	00c001c4 	movi	r3,7
 8002be0:	10fff01e 	bne	r2,r3,8002ba4 <__alt_mem_bufferram_out+0xf7e02ba4>
 8002be4:	d9000204 	addi	r4,sp,8
 8002be8:	8002a0c0 	call	8002a0c <uw_install_context.isra.1>
 8002bec:	008000c4 	movi	r2,3
 8002bf0:	003fec06 	br	8002ba4 <__alt_mem_bufferram_out+0xf7e02ba4>

08002bf4 <_Unwind_SjLj_ForcedUnwind>:
 8002bf4:	00c20074 	movhi	r3,2049
 8002bf8:	18f30504 	addi	r3,r3,-13292
 8002bfc:	defffe04 	addi	sp,sp,-8
 8002c00:	18c00017 	ldw	r3,0(r3)
 8002c04:	dfc00115 	stw	ra,4(sp)
 8002c08:	21400315 	stw	r5,12(r4)
 8002c0c:	21800415 	stw	r6,16(r4)
 8002c10:	d80b883a 	mov	r5,sp
 8002c14:	d8c00015 	stw	r3,0(sp)
 8002c18:	80028340 	call	8002834 <_Unwind_ForcedUnwind_Phase2>
 8002c1c:	00c001c4 	movi	r3,7
 8002c20:	10c00326 	beq	r2,r3,8002c30 <_Unwind_SjLj_ForcedUnwind+0x3c>
 8002c24:	dfc00117 	ldw	ra,4(sp)
 8002c28:	dec00204 	addi	sp,sp,8
 8002c2c:	f800283a 	ret
 8002c30:	d809883a 	mov	r4,sp
 8002c34:	8002a0c0 	call	8002a0c <uw_install_context.isra.1>

08002c38 <_Unwind_SjLj_Resume>:
 8002c38:	00c20074 	movhi	r3,2049
 8002c3c:	18f30504 	addi	r3,r3,-13292
 8002c40:	18c00017 	ldw	r3,0(r3)
 8002c44:	20800317 	ldw	r2,12(r4)
 8002c48:	defffe04 	addi	sp,sp,-8
 8002c4c:	dfc00115 	stw	ra,4(sp)
 8002c50:	d8c00015 	stw	r3,0(sp)
 8002c54:	d80b883a 	mov	r5,sp
 8002c58:	1000041e 	bne	r2,zero,8002c6c <_Unwind_SjLj_Resume+0x34>
 8002c5c:	800294c0 	call	800294c <_Unwind_RaiseException_Phase2>
 8002c60:	00c001c4 	movi	r3,7
 8002c64:	10c00326 	beq	r2,r3,8002c74 <_Unwind_SjLj_Resume+0x3c>
 8002c68:	8002d540 	call	8002d54 <abort>
 8002c6c:	80028340 	call	8002834 <_Unwind_ForcedUnwind_Phase2>
 8002c70:	003ffb06 	br	8002c60 <__alt_mem_bufferram_out+0xf7e02c60>
 8002c74:	d809883a 	mov	r4,sp
 8002c78:	8002a0c0 	call	8002a0c <uw_install_context.isra.1>

08002c7c <_Unwind_SjLj_Resume_or_Rethrow>:
 8002c7c:	20800317 	ldw	r2,12(r4)
 8002c80:	defffe04 	addi	sp,sp,-8
 8002c84:	dfc00115 	stw	ra,4(sp)
 8002c88:	1000041e 	bne	r2,zero,8002c9c <_Unwind_SjLj_Resume_or_Rethrow+0x20>
 8002c8c:	8002b240 	call	8002b24 <_Unwind_SjLj_RaiseException>
 8002c90:	dfc00117 	ldw	ra,4(sp)
 8002c94:	dec00204 	addi	sp,sp,8
 8002c98:	f800283a 	ret
 8002c9c:	00820074 	movhi	r2,2049
 8002ca0:	10b30504 	addi	r2,r2,-13292
 8002ca4:	10800017 	ldw	r2,0(r2)
 8002ca8:	d80b883a 	mov	r5,sp
 8002cac:	d8800015 	stw	r2,0(sp)
 8002cb0:	80028340 	call	8002834 <_Unwind_ForcedUnwind_Phase2>
 8002cb4:	00c001c4 	movi	r3,7
 8002cb8:	10c00126 	beq	r2,r3,8002cc0 <_Unwind_SjLj_Resume_or_Rethrow+0x44>
 8002cbc:	8002d540 	call	8002d54 <abort>
 8002cc0:	d809883a 	mov	r4,sp
 8002cc4:	8002a0c0 	call	8002a0c <uw_install_context.isra.1>

08002cc8 <_Unwind_DeleteException>:
 8002cc8:	20800217 	ldw	r2,8(r4)
 8002ccc:	10000326 	beq	r2,zero,8002cdc <_Unwind_DeleteException+0x14>
 8002cd0:	200b883a 	mov	r5,r4
 8002cd4:	01000044 	movi	r4,1
 8002cd8:	1000683a 	jmp	r2
 8002cdc:	f800283a 	ret

08002ce0 <_Unwind_Backtrace>:
 8002ce0:	00820074 	movhi	r2,2049
 8002ce4:	10b30504 	addi	r2,r2,-13292
 8002ce8:	10800017 	ldw	r2,0(r2)
 8002cec:	defffc04 	addi	sp,sp,-16
 8002cf0:	dc400215 	stw	r17,8(sp)
 8002cf4:	dc000115 	stw	r16,4(sp)
 8002cf8:	dfc00315 	stw	ra,12(sp)
 8002cfc:	2023883a 	mov	r17,r4
 8002d00:	2821883a 	mov	r16,r5
 8002d04:	d8800015 	stw	r2,0(sp)
 8002d08:	00000506 	br	8002d20 <_Unwind_Backtrace+0x40>
 8002d0c:	883ee83a 	callr	r17
 8002d10:	10000e1e 	bne	r2,zero,8002d4c <_Unwind_Backtrace+0x6c>
 8002d14:	d8800017 	ldw	r2,0(sp)
 8002d18:	10800017 	ldw	r2,0(r2)
 8002d1c:	d8800015 	stw	r2,0(sp)
 8002d20:	800b883a 	mov	r5,r16
 8002d24:	d809883a 	mov	r4,sp
 8002d28:	103ff81e 	bne	r2,zero,8002d0c <__alt_mem_bufferram_out+0xf7e02d0c>
 8002d2c:	883ee83a 	callr	r17
 8002d30:	1000061e 	bne	r2,zero,8002d4c <_Unwind_Backtrace+0x6c>
 8002d34:	00800144 	movi	r2,5
 8002d38:	dfc00317 	ldw	ra,12(sp)
 8002d3c:	dc400217 	ldw	r17,8(sp)
 8002d40:	dc000117 	ldw	r16,4(sp)
 8002d44:	dec00404 	addi	sp,sp,16
 8002d48:	f800283a 	ret
 8002d4c:	008000c4 	movi	r2,3
 8002d50:	003ff906 	br	8002d38 <__alt_mem_bufferram_out+0xf7e02d38>

08002d54 <abort>:
 8002d54:	deffff04 	addi	sp,sp,-4
 8002d58:	01000184 	movi	r4,6
 8002d5c:	dfc00015 	stw	ra,0(sp)
 8002d60:	8003bb00 	call	8003bb0 <raise>
 8002d64:	01000044 	movi	r4,1
 8002d68:	80063d00 	call	80063d0 <_exit>

08002d6c <_gets_r>:
 8002d6c:	defff904 	addi	sp,sp,-28
 8002d70:	dd400515 	stw	r21,20(sp)
 8002d74:	dd000415 	stw	r20,16(sp)
 8002d78:	dfc00615 	stw	ra,24(sp)
 8002d7c:	dcc00315 	stw	r19,12(sp)
 8002d80:	dc800215 	stw	r18,8(sp)
 8002d84:	dc400115 	stw	r17,4(sp)
 8002d88:	dc000015 	stw	r16,0(sp)
 8002d8c:	202b883a 	mov	r21,r4
 8002d90:	2829883a 	mov	r20,r5
 8002d94:	20000226 	beq	r4,zero,8002da0 <_gets_r+0x34>
 8002d98:	20800e17 	ldw	r2,56(r4)
 8002d9c:	10002326 	beq	r2,zero,8002e2c <_gets_r+0xc0>
 8002da0:	04820074 	movhi	r18,2049
 8002da4:	a021883a 	mov	r16,r20
 8002da8:	94ac4f04 	addi	r18,r18,-20164
 8002dac:	04c00284 	movi	r19,10
 8002db0:	047fffc4 	movi	r17,-1
 8002db4:	00000706 	br	8002dd4 <_gets_r+0x68>
 8002db8:	28c00017 	ldw	r3,0(r5)
 8002dbc:	19000044 	addi	r4,r3,1
 8002dc0:	29000015 	stw	r4,0(r5)
 8002dc4:	18800003 	ldbu	r2,0(r3)
 8002dc8:	14c00d26 	beq	r2,r19,8002e00 <_gets_r+0x94>
 8002dcc:	80800005 	stb	r2,0(r16)
 8002dd0:	84000044 	addi	r16,r16,1
 8002dd4:	90c00017 	ldw	r3,0(r18)
 8002dd8:	19400117 	ldw	r5,4(r3)
 8002ddc:	28c00117 	ldw	r3,4(r5)
 8002de0:	18ffffc4 	addi	r3,r3,-1
 8002de4:	28c00115 	stw	r3,4(r5)
 8002de8:	183ff30e 	bge	r3,zero,8002db8 <__alt_mem_bufferram_out+0xf7e02db8>
 8002dec:	a809883a 	mov	r4,r21
 8002df0:	80038800 	call	8003880 <__srget_r>
 8002df4:	14c00226 	beq	r2,r19,8002e00 <_gets_r+0x94>
 8002df8:	147ff41e 	bne	r2,r17,8002dcc <__alt_mem_bufferram_out+0xf7e02dcc>
 8002dfc:	85000d26 	beq	r16,r20,8002e34 <_gets_r+0xc8>
 8002e00:	80000005 	stb	zero,0(r16)
 8002e04:	a005883a 	mov	r2,r20
 8002e08:	dfc00617 	ldw	ra,24(sp)
 8002e0c:	dd400517 	ldw	r21,20(sp)
 8002e10:	dd000417 	ldw	r20,16(sp)
 8002e14:	dcc00317 	ldw	r19,12(sp)
 8002e18:	dc800217 	ldw	r18,8(sp)
 8002e1c:	dc400117 	ldw	r17,4(sp)
 8002e20:	dc000017 	ldw	r16,0(sp)
 8002e24:	dec00704 	addi	sp,sp,28
 8002e28:	f800283a 	ret
 8002e2c:	80041240 	call	8004124 <__sinit>
 8002e30:	003fdb06 	br	8002da0 <__alt_mem_bufferram_out+0xf7e02da0>
 8002e34:	0005883a 	mov	r2,zero
 8002e38:	003ff306 	br	8002e08 <__alt_mem_bufferram_out+0xf7e02e08>

08002e3c <gets>:
 8002e3c:	00820074 	movhi	r2,2049
 8002e40:	10ac4f04 	addi	r2,r2,-20164
 8002e44:	200b883a 	mov	r5,r4
 8002e48:	11000017 	ldw	r4,0(r2)
 8002e4c:	8002d6c1 	jmpi	8002d6c <_gets_r>

08002e50 <malloc>:
 8002e50:	00820074 	movhi	r2,2049
 8002e54:	10ac4f04 	addi	r2,r2,-20164
 8002e58:	200b883a 	mov	r5,r4
 8002e5c:	11000017 	ldw	r4,0(r2)
 8002e60:	8002e781 	jmpi	8002e78 <_malloc_r>

08002e64 <free>:
 8002e64:	00820074 	movhi	r2,2049
 8002e68:	10ac4f04 	addi	r2,r2,-20164
 8002e6c:	200b883a 	mov	r5,r4
 8002e70:	11000017 	ldw	r4,0(r2)
 8002e74:	80042981 	jmpi	8004298 <_free_r>

08002e78 <_malloc_r>:
 8002e78:	defff504 	addi	sp,sp,-44
 8002e7c:	dc800315 	stw	r18,12(sp)
 8002e80:	dfc00a15 	stw	ra,40(sp)
 8002e84:	df000915 	stw	fp,36(sp)
 8002e88:	ddc00815 	stw	r23,32(sp)
 8002e8c:	dd800715 	stw	r22,28(sp)
 8002e90:	dd400615 	stw	r21,24(sp)
 8002e94:	dd000515 	stw	r20,20(sp)
 8002e98:	dcc00415 	stw	r19,16(sp)
 8002e9c:	dc400215 	stw	r17,8(sp)
 8002ea0:	dc000115 	stw	r16,4(sp)
 8002ea4:	288002c4 	addi	r2,r5,11
 8002ea8:	00c00584 	movi	r3,22
 8002eac:	2025883a 	mov	r18,r4
 8002eb0:	18807f2e 	bgeu	r3,r2,80030b0 <_malloc_r+0x238>
 8002eb4:	047ffe04 	movi	r17,-8
 8002eb8:	1462703a 	and	r17,r2,r17
 8002ebc:	8800a316 	blt	r17,zero,800314c <_malloc_r+0x2d4>
 8002ec0:	8940a236 	bltu	r17,r5,800314c <_malloc_r+0x2d4>
 8002ec4:	80069d40 	call	80069d4 <__malloc_lock>
 8002ec8:	00807dc4 	movi	r2,503
 8002ecc:	1441e92e 	bgeu	r2,r17,8003674 <_malloc_r+0x7fc>
 8002ed0:	8804d27a 	srli	r2,r17,9
 8002ed4:	1000a126 	beq	r2,zero,800315c <_malloc_r+0x2e4>
 8002ed8:	00c00104 	movi	r3,4
 8002edc:	18811e36 	bltu	r3,r2,8003358 <_malloc_r+0x4e0>
 8002ee0:	8804d1ba 	srli	r2,r17,6
 8002ee4:	12000e44 	addi	r8,r2,57
 8002ee8:	11c00e04 	addi	r7,r2,56
 8002eec:	4209883a 	add	r4,r8,r8
 8002ef0:	04c20074 	movhi	r19,2049
 8002ef4:	2109883a 	add	r4,r4,r4
 8002ef8:	9ce6bf04 	addi	r19,r19,-25860
 8002efc:	2109883a 	add	r4,r4,r4
 8002f00:	9909883a 	add	r4,r19,r4
 8002f04:	24000117 	ldw	r16,4(r4)
 8002f08:	213ffe04 	addi	r4,r4,-8
 8002f0c:	24009726 	beq	r4,r16,800316c <_malloc_r+0x2f4>
 8002f10:	80800117 	ldw	r2,4(r16)
 8002f14:	01bfff04 	movi	r6,-4
 8002f18:	014003c4 	movi	r5,15
 8002f1c:	1184703a 	and	r2,r2,r6
 8002f20:	1447c83a 	sub	r3,r2,r17
 8002f24:	28c00716 	blt	r5,r3,8002f44 <_malloc_r+0xcc>
 8002f28:	1800920e 	bge	r3,zero,8003174 <_malloc_r+0x2fc>
 8002f2c:	84000317 	ldw	r16,12(r16)
 8002f30:	24008e26 	beq	r4,r16,800316c <_malloc_r+0x2f4>
 8002f34:	80800117 	ldw	r2,4(r16)
 8002f38:	1184703a 	and	r2,r2,r6
 8002f3c:	1447c83a 	sub	r3,r2,r17
 8002f40:	28fff90e 	bge	r5,r3,8002f28 <__alt_mem_bufferram_out+0xf7e02f28>
 8002f44:	3809883a 	mov	r4,r7
 8002f48:	01820074 	movhi	r6,2049
 8002f4c:	9c000417 	ldw	r16,16(r19)
 8002f50:	31a6bf04 	addi	r6,r6,-25860
 8002f54:	32000204 	addi	r8,r6,8
 8002f58:	82013426 	beq	r16,r8,800342c <_malloc_r+0x5b4>
 8002f5c:	80c00117 	ldw	r3,4(r16)
 8002f60:	00bfff04 	movi	r2,-4
 8002f64:	188e703a 	and	r7,r3,r2
 8002f68:	3c45c83a 	sub	r2,r7,r17
 8002f6c:	00c003c4 	movi	r3,15
 8002f70:	18811f16 	blt	r3,r2,80033f0 <_malloc_r+0x578>
 8002f74:	32000515 	stw	r8,20(r6)
 8002f78:	32000415 	stw	r8,16(r6)
 8002f7c:	10007f0e 	bge	r2,zero,800317c <_malloc_r+0x304>
 8002f80:	00807fc4 	movi	r2,511
 8002f84:	11c0fd36 	bltu	r2,r7,800337c <_malloc_r+0x504>
 8002f88:	3806d0fa 	srli	r3,r7,3
 8002f8c:	01c00044 	movi	r7,1
 8002f90:	30800117 	ldw	r2,4(r6)
 8002f94:	19400044 	addi	r5,r3,1
 8002f98:	294b883a 	add	r5,r5,r5
 8002f9c:	1807d0ba 	srai	r3,r3,2
 8002fa0:	294b883a 	add	r5,r5,r5
 8002fa4:	294b883a 	add	r5,r5,r5
 8002fa8:	298b883a 	add	r5,r5,r6
 8002fac:	38c6983a 	sll	r3,r7,r3
 8002fb0:	29c00017 	ldw	r7,0(r5)
 8002fb4:	2a7ffe04 	addi	r9,r5,-8
 8002fb8:	1886b03a 	or	r3,r3,r2
 8002fbc:	82400315 	stw	r9,12(r16)
 8002fc0:	81c00215 	stw	r7,8(r16)
 8002fc4:	30c00115 	stw	r3,4(r6)
 8002fc8:	2c000015 	stw	r16,0(r5)
 8002fcc:	3c000315 	stw	r16,12(r7)
 8002fd0:	2005d0ba 	srai	r2,r4,2
 8002fd4:	01400044 	movi	r5,1
 8002fd8:	288a983a 	sll	r5,r5,r2
 8002fdc:	19406f36 	bltu	r3,r5,800319c <_malloc_r+0x324>
 8002fe0:	28c4703a 	and	r2,r5,r3
 8002fe4:	10000a1e 	bne	r2,zero,8003010 <_malloc_r+0x198>
 8002fe8:	00bfff04 	movi	r2,-4
 8002fec:	294b883a 	add	r5,r5,r5
 8002ff0:	2088703a 	and	r4,r4,r2
 8002ff4:	28c4703a 	and	r2,r5,r3
 8002ff8:	21000104 	addi	r4,r4,4
 8002ffc:	1000041e 	bne	r2,zero,8003010 <_malloc_r+0x198>
 8003000:	294b883a 	add	r5,r5,r5
 8003004:	28c4703a 	and	r2,r5,r3
 8003008:	21000104 	addi	r4,r4,4
 800300c:	103ffc26 	beq	r2,zero,8003000 <__alt_mem_bufferram_out+0xf7e03000>
 8003010:	02bfff04 	movi	r10,-4
 8003014:	024003c4 	movi	r9,15
 8003018:	21800044 	addi	r6,r4,1
 800301c:	318d883a 	add	r6,r6,r6
 8003020:	318d883a 	add	r6,r6,r6
 8003024:	318d883a 	add	r6,r6,r6
 8003028:	998d883a 	add	r6,r19,r6
 800302c:	333ffe04 	addi	r12,r6,-8
 8003030:	2017883a 	mov	r11,r4
 8003034:	31800104 	addi	r6,r6,4
 8003038:	34000017 	ldw	r16,0(r6)
 800303c:	31fffd04 	addi	r7,r6,-12
 8003040:	81c0041e 	bne	r16,r7,8003054 <_malloc_r+0x1dc>
 8003044:	0000fb06 	br	8003434 <_malloc_r+0x5bc>
 8003048:	1801030e 	bge	r3,zero,8003458 <_malloc_r+0x5e0>
 800304c:	84000317 	ldw	r16,12(r16)
 8003050:	81c0f826 	beq	r16,r7,8003434 <_malloc_r+0x5bc>
 8003054:	80800117 	ldw	r2,4(r16)
 8003058:	1284703a 	and	r2,r2,r10
 800305c:	1447c83a 	sub	r3,r2,r17
 8003060:	48fff90e 	bge	r9,r3,8003048 <__alt_mem_bufferram_out+0xf7e03048>
 8003064:	80800317 	ldw	r2,12(r16)
 8003068:	81000217 	ldw	r4,8(r16)
 800306c:	89400054 	ori	r5,r17,1
 8003070:	81400115 	stw	r5,4(r16)
 8003074:	20800315 	stw	r2,12(r4)
 8003078:	11000215 	stw	r4,8(r2)
 800307c:	8463883a 	add	r17,r16,r17
 8003080:	9c400515 	stw	r17,20(r19)
 8003084:	9c400415 	stw	r17,16(r19)
 8003088:	18800054 	ori	r2,r3,1
 800308c:	88800115 	stw	r2,4(r17)
 8003090:	8a000315 	stw	r8,12(r17)
 8003094:	8a000215 	stw	r8,8(r17)
 8003098:	88e3883a 	add	r17,r17,r3
 800309c:	88c00015 	stw	r3,0(r17)
 80030a0:	9009883a 	mov	r4,r18
 80030a4:	80069f80 	call	80069f8 <__malloc_unlock>
 80030a8:	80800204 	addi	r2,r16,8
 80030ac:	00001b06 	br	800311c <_malloc_r+0x2a4>
 80030b0:	04400404 	movi	r17,16
 80030b4:	89402536 	bltu	r17,r5,800314c <_malloc_r+0x2d4>
 80030b8:	80069d40 	call	80069d4 <__malloc_lock>
 80030bc:	00800184 	movi	r2,6
 80030c0:	01000084 	movi	r4,2
 80030c4:	04c20074 	movhi	r19,2049
 80030c8:	1085883a 	add	r2,r2,r2
 80030cc:	9ce6bf04 	addi	r19,r19,-25860
 80030d0:	1085883a 	add	r2,r2,r2
 80030d4:	9885883a 	add	r2,r19,r2
 80030d8:	14000117 	ldw	r16,4(r2)
 80030dc:	10fffe04 	addi	r3,r2,-8
 80030e0:	80c0d926 	beq	r16,r3,8003448 <_malloc_r+0x5d0>
 80030e4:	80c00117 	ldw	r3,4(r16)
 80030e8:	81000317 	ldw	r4,12(r16)
 80030ec:	00bfff04 	movi	r2,-4
 80030f0:	1884703a 	and	r2,r3,r2
 80030f4:	81400217 	ldw	r5,8(r16)
 80030f8:	8085883a 	add	r2,r16,r2
 80030fc:	10c00117 	ldw	r3,4(r2)
 8003100:	29000315 	stw	r4,12(r5)
 8003104:	21400215 	stw	r5,8(r4)
 8003108:	18c00054 	ori	r3,r3,1
 800310c:	10c00115 	stw	r3,4(r2)
 8003110:	9009883a 	mov	r4,r18
 8003114:	80069f80 	call	80069f8 <__malloc_unlock>
 8003118:	80800204 	addi	r2,r16,8
 800311c:	dfc00a17 	ldw	ra,40(sp)
 8003120:	df000917 	ldw	fp,36(sp)
 8003124:	ddc00817 	ldw	r23,32(sp)
 8003128:	dd800717 	ldw	r22,28(sp)
 800312c:	dd400617 	ldw	r21,24(sp)
 8003130:	dd000517 	ldw	r20,20(sp)
 8003134:	dcc00417 	ldw	r19,16(sp)
 8003138:	dc800317 	ldw	r18,12(sp)
 800313c:	dc400217 	ldw	r17,8(sp)
 8003140:	dc000117 	ldw	r16,4(sp)
 8003144:	dec00b04 	addi	sp,sp,44
 8003148:	f800283a 	ret
 800314c:	00800304 	movi	r2,12
 8003150:	90800015 	stw	r2,0(r18)
 8003154:	0005883a 	mov	r2,zero
 8003158:	003ff006 	br	800311c <__alt_mem_bufferram_out+0xf7e0311c>
 800315c:	01002004 	movi	r4,128
 8003160:	02001004 	movi	r8,64
 8003164:	01c00fc4 	movi	r7,63
 8003168:	003f6106 	br	8002ef0 <__alt_mem_bufferram_out+0xf7e02ef0>
 800316c:	4009883a 	mov	r4,r8
 8003170:	003f7506 	br	8002f48 <__alt_mem_bufferram_out+0xf7e02f48>
 8003174:	81000317 	ldw	r4,12(r16)
 8003178:	003fde06 	br	80030f4 <__alt_mem_bufferram_out+0xf7e030f4>
 800317c:	81c5883a 	add	r2,r16,r7
 8003180:	11400117 	ldw	r5,4(r2)
 8003184:	9009883a 	mov	r4,r18
 8003188:	29400054 	ori	r5,r5,1
 800318c:	11400115 	stw	r5,4(r2)
 8003190:	80069f80 	call	80069f8 <__malloc_unlock>
 8003194:	80800204 	addi	r2,r16,8
 8003198:	003fe006 	br	800311c <__alt_mem_bufferram_out+0xf7e0311c>
 800319c:	9c000217 	ldw	r16,8(r19)
 80031a0:	00bfff04 	movi	r2,-4
 80031a4:	85800117 	ldw	r22,4(r16)
 80031a8:	b0ac703a 	and	r22,r22,r2
 80031ac:	b4400336 	bltu	r22,r17,80031bc <_malloc_r+0x344>
 80031b0:	b445c83a 	sub	r2,r22,r17
 80031b4:	00c003c4 	movi	r3,15
 80031b8:	18805d16 	blt	r3,r2,8003330 <_malloc_r+0x4b8>
 80031bc:	05c20074 	movhi	r23,2049
 80031c0:	00820074 	movhi	r2,2049
 80031c4:	10b30804 	addi	r2,r2,-13280
 80031c8:	bdec5004 	addi	r23,r23,-20160
 80031cc:	15400017 	ldw	r21,0(r2)
 80031d0:	b8c00017 	ldw	r3,0(r23)
 80031d4:	00bfffc4 	movi	r2,-1
 80031d8:	858d883a 	add	r6,r16,r22
 80031dc:	8d6b883a 	add	r21,r17,r21
 80031e0:	1880ea26 	beq	r3,r2,800358c <_malloc_r+0x714>
 80031e4:	ad4403c4 	addi	r21,r21,4111
 80031e8:	00bc0004 	movi	r2,-4096
 80031ec:	a8aa703a 	and	r21,r21,r2
 80031f0:	a80b883a 	mov	r5,r21
 80031f4:	9009883a 	mov	r4,r18
 80031f8:	d9800015 	stw	r6,0(sp)
 80031fc:	80039080 	call	8003908 <_sbrk_r>
 8003200:	1029883a 	mov	r20,r2
 8003204:	00bfffc4 	movi	r2,-1
 8003208:	d9800017 	ldw	r6,0(sp)
 800320c:	a080e826 	beq	r20,r2,80035b0 <_malloc_r+0x738>
 8003210:	a180a636 	bltu	r20,r6,80034ac <_malloc_r+0x634>
 8003214:	07020074 	movhi	fp,2049
 8003218:	e7331504 	addi	fp,fp,-13228
 800321c:	e0800017 	ldw	r2,0(fp)
 8003220:	a887883a 	add	r3,r21,r2
 8003224:	e0c00015 	stw	r3,0(fp)
 8003228:	3500e626 	beq	r6,r20,80035c4 <_malloc_r+0x74c>
 800322c:	b9000017 	ldw	r4,0(r23)
 8003230:	00bfffc4 	movi	r2,-1
 8003234:	2080ee26 	beq	r4,r2,80035f0 <_malloc_r+0x778>
 8003238:	a185c83a 	sub	r2,r20,r6
 800323c:	10c5883a 	add	r2,r2,r3
 8003240:	e0800015 	stw	r2,0(fp)
 8003244:	a0c001cc 	andi	r3,r20,7
 8003248:	1800bc26 	beq	r3,zero,800353c <_malloc_r+0x6c4>
 800324c:	a0e9c83a 	sub	r20,r20,r3
 8003250:	00840204 	movi	r2,4104
 8003254:	a5000204 	addi	r20,r20,8
 8003258:	10c7c83a 	sub	r3,r2,r3
 800325c:	a545883a 	add	r2,r20,r21
 8003260:	1083ffcc 	andi	r2,r2,4095
 8003264:	18abc83a 	sub	r21,r3,r2
 8003268:	a80b883a 	mov	r5,r21
 800326c:	9009883a 	mov	r4,r18
 8003270:	80039080 	call	8003908 <_sbrk_r>
 8003274:	00ffffc4 	movi	r3,-1
 8003278:	10c0e126 	beq	r2,r3,8003600 <_malloc_r+0x788>
 800327c:	1505c83a 	sub	r2,r2,r20
 8003280:	1545883a 	add	r2,r2,r21
 8003284:	10800054 	ori	r2,r2,1
 8003288:	e0c00017 	ldw	r3,0(fp)
 800328c:	9d000215 	stw	r20,8(r19)
 8003290:	a0800115 	stw	r2,4(r20)
 8003294:	a8c7883a 	add	r3,r21,r3
 8003298:	e0c00015 	stw	r3,0(fp)
 800329c:	84c00e26 	beq	r16,r19,80032d8 <_malloc_r+0x460>
 80032a0:	018003c4 	movi	r6,15
 80032a4:	3580a72e 	bgeu	r6,r22,8003544 <_malloc_r+0x6cc>
 80032a8:	81400117 	ldw	r5,4(r16)
 80032ac:	013ffe04 	movi	r4,-8
 80032b0:	b0bffd04 	addi	r2,r22,-12
 80032b4:	1104703a 	and	r2,r2,r4
 80032b8:	2900004c 	andi	r4,r5,1
 80032bc:	2088b03a 	or	r4,r4,r2
 80032c0:	81000115 	stw	r4,4(r16)
 80032c4:	01400144 	movi	r5,5
 80032c8:	8089883a 	add	r4,r16,r2
 80032cc:	21400115 	stw	r5,4(r4)
 80032d0:	21400215 	stw	r5,8(r4)
 80032d4:	3080cd36 	bltu	r6,r2,800360c <_malloc_r+0x794>
 80032d8:	00820074 	movhi	r2,2049
 80032dc:	10b30704 	addi	r2,r2,-13284
 80032e0:	11000017 	ldw	r4,0(r2)
 80032e4:	20c0012e 	bgeu	r4,r3,80032ec <_malloc_r+0x474>
 80032e8:	10c00015 	stw	r3,0(r2)
 80032ec:	00820074 	movhi	r2,2049
 80032f0:	10b30604 	addi	r2,r2,-13288
 80032f4:	11000017 	ldw	r4,0(r2)
 80032f8:	9c000217 	ldw	r16,8(r19)
 80032fc:	20c0012e 	bgeu	r4,r3,8003304 <_malloc_r+0x48c>
 8003300:	10c00015 	stw	r3,0(r2)
 8003304:	80c00117 	ldw	r3,4(r16)
 8003308:	00bfff04 	movi	r2,-4
 800330c:	1886703a 	and	r3,r3,r2
 8003310:	1c45c83a 	sub	r2,r3,r17
 8003314:	1c400236 	bltu	r3,r17,8003320 <_malloc_r+0x4a8>
 8003318:	00c003c4 	movi	r3,15
 800331c:	18800416 	blt	r3,r2,8003330 <_malloc_r+0x4b8>
 8003320:	9009883a 	mov	r4,r18
 8003324:	80069f80 	call	80069f8 <__malloc_unlock>
 8003328:	0005883a 	mov	r2,zero
 800332c:	003f7b06 	br	800311c <__alt_mem_bufferram_out+0xf7e0311c>
 8003330:	88c00054 	ori	r3,r17,1
 8003334:	80c00115 	stw	r3,4(r16)
 8003338:	8463883a 	add	r17,r16,r17
 800333c:	10800054 	ori	r2,r2,1
 8003340:	9c400215 	stw	r17,8(r19)
 8003344:	88800115 	stw	r2,4(r17)
 8003348:	9009883a 	mov	r4,r18
 800334c:	80069f80 	call	80069f8 <__malloc_unlock>
 8003350:	80800204 	addi	r2,r16,8
 8003354:	003f7106 	br	800311c <__alt_mem_bufferram_out+0xf7e0311c>
 8003358:	00c00504 	movi	r3,20
 800335c:	18804a2e 	bgeu	r3,r2,8003488 <_malloc_r+0x610>
 8003360:	00c01504 	movi	r3,84
 8003364:	18806e36 	bltu	r3,r2,8003520 <_malloc_r+0x6a8>
 8003368:	8804d33a 	srli	r2,r17,12
 800336c:	12001bc4 	addi	r8,r2,111
 8003370:	11c01b84 	addi	r7,r2,110
 8003374:	4209883a 	add	r4,r8,r8
 8003378:	003edd06 	br	8002ef0 <__alt_mem_bufferram_out+0xf7e02ef0>
 800337c:	3804d27a 	srli	r2,r7,9
 8003380:	00c00104 	movi	r3,4
 8003384:	1880442e 	bgeu	r3,r2,8003498 <_malloc_r+0x620>
 8003388:	00c00504 	movi	r3,20
 800338c:	18808136 	bltu	r3,r2,8003594 <_malloc_r+0x71c>
 8003390:	11401704 	addi	r5,r2,92
 8003394:	10c016c4 	addi	r3,r2,91
 8003398:	294b883a 	add	r5,r5,r5
 800339c:	294b883a 	add	r5,r5,r5
 80033a0:	294b883a 	add	r5,r5,r5
 80033a4:	994b883a 	add	r5,r19,r5
 80033a8:	28800017 	ldw	r2,0(r5)
 80033ac:	01820074 	movhi	r6,2049
 80033b0:	297ffe04 	addi	r5,r5,-8
 80033b4:	31a6bf04 	addi	r6,r6,-25860
 80033b8:	28806526 	beq	r5,r2,8003550 <_malloc_r+0x6d8>
 80033bc:	01bfff04 	movi	r6,-4
 80033c0:	10c00117 	ldw	r3,4(r2)
 80033c4:	1986703a 	and	r3,r3,r6
 80033c8:	38c0022e 	bgeu	r7,r3,80033d4 <_malloc_r+0x55c>
 80033cc:	10800217 	ldw	r2,8(r2)
 80033d0:	28bffb1e 	bne	r5,r2,80033c0 <__alt_mem_bufferram_out+0xf7e033c0>
 80033d4:	11400317 	ldw	r5,12(r2)
 80033d8:	98c00117 	ldw	r3,4(r19)
 80033dc:	81400315 	stw	r5,12(r16)
 80033e0:	80800215 	stw	r2,8(r16)
 80033e4:	2c000215 	stw	r16,8(r5)
 80033e8:	14000315 	stw	r16,12(r2)
 80033ec:	003ef806 	br	8002fd0 <__alt_mem_bufferram_out+0xf7e02fd0>
 80033f0:	88c00054 	ori	r3,r17,1
 80033f4:	80c00115 	stw	r3,4(r16)
 80033f8:	8463883a 	add	r17,r16,r17
 80033fc:	34400515 	stw	r17,20(r6)
 8003400:	34400415 	stw	r17,16(r6)
 8003404:	10c00054 	ori	r3,r2,1
 8003408:	8a000315 	stw	r8,12(r17)
 800340c:	8a000215 	stw	r8,8(r17)
 8003410:	88c00115 	stw	r3,4(r17)
 8003414:	88a3883a 	add	r17,r17,r2
 8003418:	88800015 	stw	r2,0(r17)
 800341c:	9009883a 	mov	r4,r18
 8003420:	80069f80 	call	80069f8 <__malloc_unlock>
 8003424:	80800204 	addi	r2,r16,8
 8003428:	003f3c06 	br	800311c <__alt_mem_bufferram_out+0xf7e0311c>
 800342c:	30c00117 	ldw	r3,4(r6)
 8003430:	003ee706 	br	8002fd0 <__alt_mem_bufferram_out+0xf7e02fd0>
 8003434:	5ac00044 	addi	r11,r11,1
 8003438:	588000cc 	andi	r2,r11,3
 800343c:	31800204 	addi	r6,r6,8
 8003440:	103efd1e 	bne	r2,zero,8003038 <__alt_mem_bufferram_out+0xf7e03038>
 8003444:	00002406 	br	80034d8 <_malloc_r+0x660>
 8003448:	14000317 	ldw	r16,12(r2)
 800344c:	143f251e 	bne	r2,r16,80030e4 <__alt_mem_bufferram_out+0xf7e030e4>
 8003450:	21000084 	addi	r4,r4,2
 8003454:	003ebc06 	br	8002f48 <__alt_mem_bufferram_out+0xf7e02f48>
 8003458:	8085883a 	add	r2,r16,r2
 800345c:	10c00117 	ldw	r3,4(r2)
 8003460:	81000317 	ldw	r4,12(r16)
 8003464:	81400217 	ldw	r5,8(r16)
 8003468:	18c00054 	ori	r3,r3,1
 800346c:	10c00115 	stw	r3,4(r2)
 8003470:	29000315 	stw	r4,12(r5)
 8003474:	21400215 	stw	r5,8(r4)
 8003478:	9009883a 	mov	r4,r18
 800347c:	80069f80 	call	80069f8 <__malloc_unlock>
 8003480:	80800204 	addi	r2,r16,8
 8003484:	003f2506 	br	800311c <__alt_mem_bufferram_out+0xf7e0311c>
 8003488:	12001704 	addi	r8,r2,92
 800348c:	11c016c4 	addi	r7,r2,91
 8003490:	4209883a 	add	r4,r8,r8
 8003494:	003e9606 	br	8002ef0 <__alt_mem_bufferram_out+0xf7e02ef0>
 8003498:	3804d1ba 	srli	r2,r7,6
 800349c:	11400e44 	addi	r5,r2,57
 80034a0:	10c00e04 	addi	r3,r2,56
 80034a4:	294b883a 	add	r5,r5,r5
 80034a8:	003fbc06 	br	800339c <__alt_mem_bufferram_out+0xf7e0339c>
 80034ac:	84ff5926 	beq	r16,r19,8003214 <__alt_mem_bufferram_out+0xf7e03214>
 80034b0:	00820074 	movhi	r2,2049
 80034b4:	10a6bf04 	addi	r2,r2,-25860
 80034b8:	14000217 	ldw	r16,8(r2)
 80034bc:	00bfff04 	movi	r2,-4
 80034c0:	80c00117 	ldw	r3,4(r16)
 80034c4:	1886703a 	and	r3,r3,r2
 80034c8:	003f9106 	br	8003310 <__alt_mem_bufferram_out+0xf7e03310>
 80034cc:	60800217 	ldw	r2,8(r12)
 80034d0:	213fffc4 	addi	r4,r4,-1
 80034d4:	1300651e 	bne	r2,r12,800366c <_malloc_r+0x7f4>
 80034d8:	208000cc 	andi	r2,r4,3
 80034dc:	633ffe04 	addi	r12,r12,-8
 80034e0:	103ffa1e 	bne	r2,zero,80034cc <__alt_mem_bufferram_out+0xf7e034cc>
 80034e4:	98800117 	ldw	r2,4(r19)
 80034e8:	0146303a 	nor	r3,zero,r5
 80034ec:	1884703a 	and	r2,r3,r2
 80034f0:	98800115 	stw	r2,4(r19)
 80034f4:	294b883a 	add	r5,r5,r5
 80034f8:	117f2836 	bltu	r2,r5,800319c <__alt_mem_bufferram_out+0xf7e0319c>
 80034fc:	283f2726 	beq	r5,zero,800319c <__alt_mem_bufferram_out+0xf7e0319c>
 8003500:	2886703a 	and	r3,r5,r2
 8003504:	5809883a 	mov	r4,r11
 8003508:	183ec31e 	bne	r3,zero,8003018 <__alt_mem_bufferram_out+0xf7e03018>
 800350c:	294b883a 	add	r5,r5,r5
 8003510:	2886703a 	and	r3,r5,r2
 8003514:	21000104 	addi	r4,r4,4
 8003518:	183ffc26 	beq	r3,zero,800350c <__alt_mem_bufferram_out+0xf7e0350c>
 800351c:	003ebe06 	br	8003018 <__alt_mem_bufferram_out+0xf7e03018>
 8003520:	00c05504 	movi	r3,340
 8003524:	18801236 	bltu	r3,r2,8003570 <_malloc_r+0x6f8>
 8003528:	8804d3fa 	srli	r2,r17,15
 800352c:	12001e04 	addi	r8,r2,120
 8003530:	11c01dc4 	addi	r7,r2,119
 8003534:	4209883a 	add	r4,r8,r8
 8003538:	003e6d06 	br	8002ef0 <__alt_mem_bufferram_out+0xf7e02ef0>
 800353c:	00c40004 	movi	r3,4096
 8003540:	003f4606 	br	800325c <__alt_mem_bufferram_out+0xf7e0325c>
 8003544:	00800044 	movi	r2,1
 8003548:	a0800115 	stw	r2,4(r20)
 800354c:	003f7406 	br	8003320 <__alt_mem_bufferram_out+0xf7e03320>
 8003550:	1805d0ba 	srai	r2,r3,2
 8003554:	01c00044 	movi	r7,1
 8003558:	30c00117 	ldw	r3,4(r6)
 800355c:	388e983a 	sll	r7,r7,r2
 8003560:	2805883a 	mov	r2,r5
 8003564:	38c6b03a 	or	r3,r7,r3
 8003568:	30c00115 	stw	r3,4(r6)
 800356c:	003f9b06 	br	80033dc <__alt_mem_bufferram_out+0xf7e033dc>
 8003570:	00c15504 	movi	r3,1364
 8003574:	18801a36 	bltu	r3,r2,80035e0 <_malloc_r+0x768>
 8003578:	8804d4ba 	srli	r2,r17,18
 800357c:	12001f44 	addi	r8,r2,125
 8003580:	11c01f04 	addi	r7,r2,124
 8003584:	4209883a 	add	r4,r8,r8
 8003588:	003e5906 	br	8002ef0 <__alt_mem_bufferram_out+0xf7e02ef0>
 800358c:	ad400404 	addi	r21,r21,16
 8003590:	003f1706 	br	80031f0 <__alt_mem_bufferram_out+0xf7e031f0>
 8003594:	00c01504 	movi	r3,84
 8003598:	18802336 	bltu	r3,r2,8003628 <_malloc_r+0x7b0>
 800359c:	3804d33a 	srli	r2,r7,12
 80035a0:	11401bc4 	addi	r5,r2,111
 80035a4:	10c01b84 	addi	r3,r2,110
 80035a8:	294b883a 	add	r5,r5,r5
 80035ac:	003f7b06 	br	800339c <__alt_mem_bufferram_out+0xf7e0339c>
 80035b0:	9c000217 	ldw	r16,8(r19)
 80035b4:	00bfff04 	movi	r2,-4
 80035b8:	80c00117 	ldw	r3,4(r16)
 80035bc:	1886703a 	and	r3,r3,r2
 80035c0:	003f5306 	br	8003310 <__alt_mem_bufferram_out+0xf7e03310>
 80035c4:	3083ffcc 	andi	r2,r6,4095
 80035c8:	103f181e 	bne	r2,zero,800322c <__alt_mem_bufferram_out+0xf7e0322c>
 80035cc:	99000217 	ldw	r4,8(r19)
 80035d0:	b545883a 	add	r2,r22,r21
 80035d4:	10800054 	ori	r2,r2,1
 80035d8:	20800115 	stw	r2,4(r4)
 80035dc:	003f3e06 	br	80032d8 <__alt_mem_bufferram_out+0xf7e032d8>
 80035e0:	01003f84 	movi	r4,254
 80035e4:	02001fc4 	movi	r8,127
 80035e8:	01c01f84 	movi	r7,126
 80035ec:	003e4006 	br	8002ef0 <__alt_mem_bufferram_out+0xf7e02ef0>
 80035f0:	00820074 	movhi	r2,2049
 80035f4:	10ac5004 	addi	r2,r2,-20160
 80035f8:	15000015 	stw	r20,0(r2)
 80035fc:	003f1106 	br	8003244 <__alt_mem_bufferram_out+0xf7e03244>
 8003600:	00800044 	movi	r2,1
 8003604:	002b883a 	mov	r21,zero
 8003608:	003f1f06 	br	8003288 <__alt_mem_bufferram_out+0xf7e03288>
 800360c:	81400204 	addi	r5,r16,8
 8003610:	9009883a 	mov	r4,r18
 8003614:	80042980 	call	8004298 <_free_r>
 8003618:	00820074 	movhi	r2,2049
 800361c:	10b31504 	addi	r2,r2,-13228
 8003620:	10c00017 	ldw	r3,0(r2)
 8003624:	003f2c06 	br	80032d8 <__alt_mem_bufferram_out+0xf7e032d8>
 8003628:	00c05504 	movi	r3,340
 800362c:	18800536 	bltu	r3,r2,8003644 <_malloc_r+0x7cc>
 8003630:	3804d3fa 	srli	r2,r7,15
 8003634:	11401e04 	addi	r5,r2,120
 8003638:	10c01dc4 	addi	r3,r2,119
 800363c:	294b883a 	add	r5,r5,r5
 8003640:	003f5606 	br	800339c <__alt_mem_bufferram_out+0xf7e0339c>
 8003644:	00c15504 	movi	r3,1364
 8003648:	18800536 	bltu	r3,r2,8003660 <_malloc_r+0x7e8>
 800364c:	3804d4ba 	srli	r2,r7,18
 8003650:	11401f44 	addi	r5,r2,125
 8003654:	10c01f04 	addi	r3,r2,124
 8003658:	294b883a 	add	r5,r5,r5
 800365c:	003f4f06 	br	800339c <__alt_mem_bufferram_out+0xf7e0339c>
 8003660:	01403f84 	movi	r5,254
 8003664:	00c01f84 	movi	r3,126
 8003668:	003f4c06 	br	800339c <__alt_mem_bufferram_out+0xf7e0339c>
 800366c:	98800117 	ldw	r2,4(r19)
 8003670:	003fa006 	br	80034f4 <__alt_mem_bufferram_out+0xf7e034f4>
 8003674:	8808d0fa 	srli	r4,r17,3
 8003678:	20800044 	addi	r2,r4,1
 800367c:	1085883a 	add	r2,r2,r2
 8003680:	003e9006 	br	80030c4 <__alt_mem_bufferram_out+0xf7e030c4>

08003684 <memset>:
 8003684:	20c000cc 	andi	r3,r4,3
 8003688:	2005883a 	mov	r2,r4
 800368c:	18004426 	beq	r3,zero,80037a0 <memset+0x11c>
 8003690:	31ffffc4 	addi	r7,r6,-1
 8003694:	30004026 	beq	r6,zero,8003798 <memset+0x114>
 8003698:	2813883a 	mov	r9,r5
 800369c:	200d883a 	mov	r6,r4
 80036a0:	2007883a 	mov	r3,r4
 80036a4:	00000406 	br	80036b8 <memset+0x34>
 80036a8:	3a3fffc4 	addi	r8,r7,-1
 80036ac:	31800044 	addi	r6,r6,1
 80036b0:	38003926 	beq	r7,zero,8003798 <memset+0x114>
 80036b4:	400f883a 	mov	r7,r8
 80036b8:	18c00044 	addi	r3,r3,1
 80036bc:	32400005 	stb	r9,0(r6)
 80036c0:	1a0000cc 	andi	r8,r3,3
 80036c4:	403ff81e 	bne	r8,zero,80036a8 <__alt_mem_bufferram_out+0xf7e036a8>
 80036c8:	010000c4 	movi	r4,3
 80036cc:	21c02d2e 	bgeu	r4,r7,8003784 <memset+0x100>
 80036d0:	29003fcc 	andi	r4,r5,255
 80036d4:	200c923a 	slli	r6,r4,8
 80036d8:	3108b03a 	or	r4,r6,r4
 80036dc:	200c943a 	slli	r6,r4,16
 80036e0:	218cb03a 	or	r6,r4,r6
 80036e4:	010003c4 	movi	r4,15
 80036e8:	21c0182e 	bgeu	r4,r7,800374c <memset+0xc8>
 80036ec:	3b3ffc04 	addi	r12,r7,-16
 80036f0:	6018d13a 	srli	r12,r12,4
 80036f4:	1a000104 	addi	r8,r3,4
 80036f8:	1ac00204 	addi	r11,r3,8
 80036fc:	6008913a 	slli	r4,r12,4
 8003700:	1a800304 	addi	r10,r3,12
 8003704:	1813883a 	mov	r9,r3
 8003708:	21000504 	addi	r4,r4,20
 800370c:	1909883a 	add	r4,r3,r4
 8003710:	49800015 	stw	r6,0(r9)
 8003714:	41800015 	stw	r6,0(r8)
 8003718:	59800015 	stw	r6,0(r11)
 800371c:	51800015 	stw	r6,0(r10)
 8003720:	42000404 	addi	r8,r8,16
 8003724:	4a400404 	addi	r9,r9,16
 8003728:	5ac00404 	addi	r11,r11,16
 800372c:	52800404 	addi	r10,r10,16
 8003730:	413ff71e 	bne	r8,r4,8003710 <__alt_mem_bufferram_out+0xf7e03710>
 8003734:	63000044 	addi	r12,r12,1
 8003738:	6018913a 	slli	r12,r12,4
 800373c:	39c003cc 	andi	r7,r7,15
 8003740:	010000c4 	movi	r4,3
 8003744:	1b07883a 	add	r3,r3,r12
 8003748:	21c00e2e 	bgeu	r4,r7,8003784 <memset+0x100>
 800374c:	1813883a 	mov	r9,r3
 8003750:	3811883a 	mov	r8,r7
 8003754:	010000c4 	movi	r4,3
 8003758:	49800015 	stw	r6,0(r9)
 800375c:	423fff04 	addi	r8,r8,-4
 8003760:	4a400104 	addi	r9,r9,4
 8003764:	223ffc36 	bltu	r4,r8,8003758 <__alt_mem_bufferram_out+0xf7e03758>
 8003768:	393fff04 	addi	r4,r7,-4
 800376c:	2008d0ba 	srli	r4,r4,2
 8003770:	39c000cc 	andi	r7,r7,3
 8003774:	21000044 	addi	r4,r4,1
 8003778:	2109883a 	add	r4,r4,r4
 800377c:	2109883a 	add	r4,r4,r4
 8003780:	1907883a 	add	r3,r3,r4
 8003784:	38000526 	beq	r7,zero,800379c <memset+0x118>
 8003788:	19cf883a 	add	r7,r3,r7
 800378c:	19400005 	stb	r5,0(r3)
 8003790:	18c00044 	addi	r3,r3,1
 8003794:	38fffd1e 	bne	r7,r3,800378c <__alt_mem_bufferram_out+0xf7e0378c>
 8003798:	f800283a 	ret
 800379c:	f800283a 	ret
 80037a0:	2007883a 	mov	r3,r4
 80037a4:	300f883a 	mov	r7,r6
 80037a8:	003fc706 	br	80036c8 <__alt_mem_bufferram_out+0xf7e036c8>

080037ac <_puts_r>:
 80037ac:	defff604 	addi	sp,sp,-40
 80037b0:	dc000715 	stw	r16,28(sp)
 80037b4:	2021883a 	mov	r16,r4
 80037b8:	2809883a 	mov	r4,r5
 80037bc:	dc400815 	stw	r17,32(sp)
 80037c0:	dfc00915 	stw	ra,36(sp)
 80037c4:	2823883a 	mov	r17,r5
 80037c8:	8003d3c0 	call	8003d3c <strlen>
 80037cc:	10c00044 	addi	r3,r2,1
 80037d0:	d8800115 	stw	r2,4(sp)
 80037d4:	00820074 	movhi	r2,2049
 80037d8:	10a5a804 	addi	r2,r2,-26976
 80037dc:	d8800215 	stw	r2,8(sp)
 80037e0:	00800044 	movi	r2,1
 80037e4:	d8800315 	stw	r2,12(sp)
 80037e8:	00800084 	movi	r2,2
 80037ec:	dc400015 	stw	r17,0(sp)
 80037f0:	d8c00615 	stw	r3,24(sp)
 80037f4:	dec00415 	stw	sp,16(sp)
 80037f8:	d8800515 	stw	r2,20(sp)
 80037fc:	80000226 	beq	r16,zero,8003808 <_puts_r+0x5c>
 8003800:	80800e17 	ldw	r2,56(r16)
 8003804:	10001426 	beq	r2,zero,8003858 <_puts_r+0xac>
 8003808:	81400217 	ldw	r5,8(r16)
 800380c:	2880030b 	ldhu	r2,12(r5)
 8003810:	10c8000c 	andi	r3,r2,8192
 8003814:	1800061e 	bne	r3,zero,8003830 <_puts_r+0x84>
 8003818:	29001917 	ldw	r4,100(r5)
 800381c:	00f7ffc4 	movi	r3,-8193
 8003820:	10880014 	ori	r2,r2,8192
 8003824:	20c6703a 	and	r3,r4,r3
 8003828:	2880030d 	sth	r2,12(r5)
 800382c:	28c01915 	stw	r3,100(r5)
 8003830:	d9800404 	addi	r6,sp,16
 8003834:	8009883a 	mov	r4,r16
 8003838:	80045a80 	call	80045a8 <__sfvwrite_r>
 800383c:	1000091e 	bne	r2,zero,8003864 <_puts_r+0xb8>
 8003840:	00800284 	movi	r2,10
 8003844:	dfc00917 	ldw	ra,36(sp)
 8003848:	dc400817 	ldw	r17,32(sp)
 800384c:	dc000717 	ldw	r16,28(sp)
 8003850:	dec00a04 	addi	sp,sp,40
 8003854:	f800283a 	ret
 8003858:	8009883a 	mov	r4,r16
 800385c:	80041240 	call	8004124 <__sinit>
 8003860:	003fe906 	br	8003808 <__alt_mem_bufferram_out+0xf7e03808>
 8003864:	00bfffc4 	movi	r2,-1
 8003868:	003ff606 	br	8003844 <__alt_mem_bufferram_out+0xf7e03844>

0800386c <puts>:
 800386c:	00820074 	movhi	r2,2049
 8003870:	10ac4f04 	addi	r2,r2,-20164
 8003874:	200b883a 	mov	r5,r4
 8003878:	11000017 	ldw	r4,0(r2)
 800387c:	80037ac1 	jmpi	80037ac <_puts_r>

08003880 <__srget_r>:
 8003880:	defffd04 	addi	sp,sp,-12
 8003884:	dc400115 	stw	r17,4(sp)
 8003888:	dc000015 	stw	r16,0(sp)
 800388c:	dfc00215 	stw	ra,8(sp)
 8003890:	2023883a 	mov	r17,r4
 8003894:	2821883a 	mov	r16,r5
 8003898:	20000226 	beq	r4,zero,80038a4 <__srget_r+0x24>
 800389c:	20800e17 	ldw	r2,56(r4)
 80038a0:	10001026 	beq	r2,zero,80038e4 <__srget_r+0x64>
 80038a4:	800b883a 	mov	r5,r16
 80038a8:	8809883a 	mov	r4,r17
 80038ac:	80054f40 	call	80054f4 <__srefill_r>
 80038b0:	10000e1e 	bne	r2,zero,80038ec <__srget_r+0x6c>
 80038b4:	80c00017 	ldw	r3,0(r16)
 80038b8:	80800117 	ldw	r2,4(r16)
 80038bc:	19000044 	addi	r4,r3,1
 80038c0:	10bfffc4 	addi	r2,r2,-1
 80038c4:	80800115 	stw	r2,4(r16)
 80038c8:	81000015 	stw	r4,0(r16)
 80038cc:	18800003 	ldbu	r2,0(r3)
 80038d0:	dfc00217 	ldw	ra,8(sp)
 80038d4:	dc400117 	ldw	r17,4(sp)
 80038d8:	dc000017 	ldw	r16,0(sp)
 80038dc:	dec00304 	addi	sp,sp,12
 80038e0:	f800283a 	ret
 80038e4:	80041240 	call	8004124 <__sinit>
 80038e8:	003fee06 	br	80038a4 <__alt_mem_bufferram_out+0xf7e038a4>
 80038ec:	00bfffc4 	movi	r2,-1
 80038f0:	003ff706 	br	80038d0 <__alt_mem_bufferram_out+0xf7e038d0>

080038f4 <__srget>:
 80038f4:	00820074 	movhi	r2,2049
 80038f8:	10ac4f04 	addi	r2,r2,-20164
 80038fc:	200b883a 	mov	r5,r4
 8003900:	11000017 	ldw	r4,0(r2)
 8003904:	80038801 	jmpi	8003880 <__srget_r>

08003908 <_sbrk_r>:
 8003908:	defffd04 	addi	sp,sp,-12
 800390c:	dc000015 	stw	r16,0(sp)
 8003910:	04020074 	movhi	r16,2049
 8003914:	dc400115 	stw	r17,4(sp)
 8003918:	84330904 	addi	r16,r16,-13276
 800391c:	2023883a 	mov	r17,r4
 8003920:	2809883a 	mov	r4,r5
 8003924:	dfc00215 	stw	ra,8(sp)
 8003928:	80000015 	stw	zero,0(r16)
 800392c:	8006bb80 	call	8006bb8 <sbrk>
 8003930:	00ffffc4 	movi	r3,-1
 8003934:	10c00526 	beq	r2,r3,800394c <_sbrk_r+0x44>
 8003938:	dfc00217 	ldw	ra,8(sp)
 800393c:	dc400117 	ldw	r17,4(sp)
 8003940:	dc000017 	ldw	r16,0(sp)
 8003944:	dec00304 	addi	sp,sp,12
 8003948:	f800283a 	ret
 800394c:	80c00017 	ldw	r3,0(r16)
 8003950:	183ff926 	beq	r3,zero,8003938 <__alt_mem_bufferram_out+0xf7e03938>
 8003954:	88c00015 	stw	r3,0(r17)
 8003958:	003ff706 	br	8003938 <__alt_mem_bufferram_out+0xf7e03938>

0800395c <_init_signal_r>:
 800395c:	2080b717 	ldw	r2,732(r4)
 8003960:	10000226 	beq	r2,zero,800396c <_init_signal_r+0x10>
 8003964:	0005883a 	mov	r2,zero
 8003968:	f800283a 	ret
 800396c:	defffe04 	addi	sp,sp,-8
 8003970:	01402004 	movi	r5,128
 8003974:	dc000015 	stw	r16,0(sp)
 8003978:	dfc00115 	stw	ra,4(sp)
 800397c:	2021883a 	mov	r16,r4
 8003980:	8002e780 	call	8002e78 <_malloc_r>
 8003984:	8080b715 	stw	r2,732(r16)
 8003988:	10000d26 	beq	r2,zero,80039c0 <_init_signal_r+0x64>
 800398c:	0007883a 	mov	r3,zero
 8003990:	01002004 	movi	r4,128
 8003994:	00000106 	br	800399c <_init_signal_r+0x40>
 8003998:	8080b717 	ldw	r2,732(r16)
 800399c:	10c5883a 	add	r2,r2,r3
 80039a0:	10000015 	stw	zero,0(r2)
 80039a4:	18c00104 	addi	r3,r3,4
 80039a8:	193ffb1e 	bne	r3,r4,8003998 <__alt_mem_bufferram_out+0xf7e03998>
 80039ac:	0005883a 	mov	r2,zero
 80039b0:	dfc00117 	ldw	ra,4(sp)
 80039b4:	dc000017 	ldw	r16,0(sp)
 80039b8:	dec00204 	addi	sp,sp,8
 80039bc:	f800283a 	ret
 80039c0:	00bfffc4 	movi	r2,-1
 80039c4:	003ffa06 	br	80039b0 <__alt_mem_bufferram_out+0xf7e039b0>

080039c8 <_signal_r>:
 80039c8:	00c007c4 	movi	r3,31
 80039cc:	19401536 	bltu	r3,r5,8003a24 <_signal_r+0x5c>
 80039d0:	2080b717 	ldw	r2,732(r4)
 80039d4:	defffc04 	addi	sp,sp,-16
 80039d8:	dc800215 	stw	r18,8(sp)
 80039dc:	dc400115 	stw	r17,4(sp)
 80039e0:	dc000015 	stw	r16,0(sp)
 80039e4:	dfc00315 	stw	ra,12(sp)
 80039e8:	3023883a 	mov	r17,r6
 80039ec:	2021883a 	mov	r16,r4
 80039f0:	2825883a 	mov	r18,r5
 80039f4:	10000f26 	beq	r2,zero,8003a34 <_signal_r+0x6c>
 80039f8:	948b883a 	add	r5,r18,r18
 80039fc:	294b883a 	add	r5,r5,r5
 8003a00:	114b883a 	add	r5,r2,r5
 8003a04:	28800017 	ldw	r2,0(r5)
 8003a08:	2c400015 	stw	r17,0(r5)
 8003a0c:	dfc00317 	ldw	ra,12(sp)
 8003a10:	dc800217 	ldw	r18,8(sp)
 8003a14:	dc400117 	ldw	r17,4(sp)
 8003a18:	dc000017 	ldw	r16,0(sp)
 8003a1c:	dec00404 	addi	sp,sp,16
 8003a20:	f800283a 	ret
 8003a24:	00c00584 	movi	r3,22
 8003a28:	20c00015 	stw	r3,0(r4)
 8003a2c:	00bfffc4 	movi	r2,-1
 8003a30:	f800283a 	ret
 8003a34:	800395c0 	call	800395c <_init_signal_r>
 8003a38:	1000021e 	bne	r2,zero,8003a44 <_signal_r+0x7c>
 8003a3c:	8080b717 	ldw	r2,732(r16)
 8003a40:	003fed06 	br	80039f8 <__alt_mem_bufferram_out+0xf7e039f8>
 8003a44:	00bfffc4 	movi	r2,-1
 8003a48:	003ff006 	br	8003a0c <__alt_mem_bufferram_out+0xf7e03a0c>

08003a4c <_raise_r>:
 8003a4c:	008007c4 	movi	r2,31
 8003a50:	11402936 	bltu	r2,r5,8003af8 <_raise_r+0xac>
 8003a54:	20c0b717 	ldw	r3,732(r4)
 8003a58:	defffd04 	addi	sp,sp,-12
 8003a5c:	dc400115 	stw	r17,4(sp)
 8003a60:	dc000015 	stw	r16,0(sp)
 8003a64:	dfc00215 	stw	ra,8(sp)
 8003a68:	2021883a 	mov	r16,r4
 8003a6c:	2823883a 	mov	r17,r5
 8003a70:	18001726 	beq	r3,zero,8003ad0 <_raise_r+0x84>
 8003a74:	2945883a 	add	r2,r5,r5
 8003a78:	1085883a 	add	r2,r2,r2
 8003a7c:	1887883a 	add	r3,r3,r2
 8003a80:	19800017 	ldw	r6,0(r3)
 8003a84:	30001226 	beq	r6,zero,8003ad0 <_raise_r+0x84>
 8003a88:	00800044 	movi	r2,1
 8003a8c:	30800e26 	beq	r6,r2,8003ac8 <_raise_r+0x7c>
 8003a90:	013fffc4 	movi	r4,-1
 8003a94:	31000926 	beq	r6,r4,8003abc <_raise_r+0x70>
 8003a98:	18000015 	stw	zero,0(r3)
 8003a9c:	2809883a 	mov	r4,r5
 8003aa0:	303ee83a 	callr	r6
 8003aa4:	0005883a 	mov	r2,zero
 8003aa8:	dfc00217 	ldw	ra,8(sp)
 8003aac:	dc400117 	ldw	r17,4(sp)
 8003ab0:	dc000017 	ldw	r16,0(sp)
 8003ab4:	dec00304 	addi	sp,sp,12
 8003ab8:	f800283a 	ret
 8003abc:	00c00584 	movi	r3,22
 8003ac0:	80c00015 	stw	r3,0(r16)
 8003ac4:	003ff806 	br	8003aa8 <__alt_mem_bufferram_out+0xf7e03aa8>
 8003ac8:	0005883a 	mov	r2,zero
 8003acc:	003ff606 	br	8003aa8 <__alt_mem_bufferram_out+0xf7e03aa8>
 8003ad0:	8009883a 	mov	r4,r16
 8003ad4:	8003c5c0 	call	8003c5c <_getpid_r>
 8003ad8:	880d883a 	mov	r6,r17
 8003adc:	100b883a 	mov	r5,r2
 8003ae0:	8009883a 	mov	r4,r16
 8003ae4:	dfc00217 	ldw	ra,8(sp)
 8003ae8:	dc400117 	ldw	r17,4(sp)
 8003aec:	dc000017 	ldw	r16,0(sp)
 8003af0:	dec00304 	addi	sp,sp,12
 8003af4:	8003c001 	jmpi	8003c00 <_kill_r>
 8003af8:	00800584 	movi	r2,22
 8003afc:	20800015 	stw	r2,0(r4)
 8003b00:	00bfffc4 	movi	r2,-1
 8003b04:	f800283a 	ret

08003b08 <__sigtramp_r>:
 8003b08:	008007c4 	movi	r2,31
 8003b0c:	11402436 	bltu	r2,r5,8003ba0 <__sigtramp_r+0x98>
 8003b10:	20c0b717 	ldw	r3,732(r4)
 8003b14:	defffd04 	addi	sp,sp,-12
 8003b18:	dc400115 	stw	r17,4(sp)
 8003b1c:	dc000015 	stw	r16,0(sp)
 8003b20:	dfc00215 	stw	ra,8(sp)
 8003b24:	2021883a 	mov	r16,r4
 8003b28:	2823883a 	mov	r17,r5
 8003b2c:	18001826 	beq	r3,zero,8003b90 <__sigtramp_r+0x88>
 8003b30:	8c45883a 	add	r2,r17,r17
 8003b34:	1085883a 	add	r2,r2,r2
 8003b38:	1885883a 	add	r2,r3,r2
 8003b3c:	10c00017 	ldw	r3,0(r2)
 8003b40:	18001126 	beq	r3,zero,8003b88 <__sigtramp_r+0x80>
 8003b44:	013fffc4 	movi	r4,-1
 8003b48:	19000d26 	beq	r3,r4,8003b80 <__sigtramp_r+0x78>
 8003b4c:	01000044 	movi	r4,1
 8003b50:	19000926 	beq	r3,r4,8003b78 <__sigtramp_r+0x70>
 8003b54:	10000015 	stw	zero,0(r2)
 8003b58:	8809883a 	mov	r4,r17
 8003b5c:	183ee83a 	callr	r3
 8003b60:	0005883a 	mov	r2,zero
 8003b64:	dfc00217 	ldw	ra,8(sp)
 8003b68:	dc400117 	ldw	r17,4(sp)
 8003b6c:	dc000017 	ldw	r16,0(sp)
 8003b70:	dec00304 	addi	sp,sp,12
 8003b74:	f800283a 	ret
 8003b78:	008000c4 	movi	r2,3
 8003b7c:	003ff906 	br	8003b64 <__alt_mem_bufferram_out+0xf7e03b64>
 8003b80:	00800084 	movi	r2,2
 8003b84:	003ff706 	br	8003b64 <__alt_mem_bufferram_out+0xf7e03b64>
 8003b88:	00800044 	movi	r2,1
 8003b8c:	003ff506 	br	8003b64 <__alt_mem_bufferram_out+0xf7e03b64>
 8003b90:	800395c0 	call	800395c <_init_signal_r>
 8003b94:	1000041e 	bne	r2,zero,8003ba8 <__sigtramp_r+0xa0>
 8003b98:	80c0b717 	ldw	r3,732(r16)
 8003b9c:	003fe406 	br	8003b30 <__alt_mem_bufferram_out+0xf7e03b30>
 8003ba0:	00bfffc4 	movi	r2,-1
 8003ba4:	f800283a 	ret
 8003ba8:	00bfffc4 	movi	r2,-1
 8003bac:	003fed06 	br	8003b64 <__alt_mem_bufferram_out+0xf7e03b64>

08003bb0 <raise>:
 8003bb0:	00820074 	movhi	r2,2049
 8003bb4:	10ac4f04 	addi	r2,r2,-20164
 8003bb8:	200b883a 	mov	r5,r4
 8003bbc:	11000017 	ldw	r4,0(r2)
 8003bc0:	8003a4c1 	jmpi	8003a4c <_raise_r>

08003bc4 <signal>:
 8003bc4:	00820074 	movhi	r2,2049
 8003bc8:	10ac4f04 	addi	r2,r2,-20164
 8003bcc:	280d883a 	mov	r6,r5
 8003bd0:	200b883a 	mov	r5,r4
 8003bd4:	11000017 	ldw	r4,0(r2)
 8003bd8:	80039c81 	jmpi	80039c8 <_signal_r>

08003bdc <_init_signal>:
 8003bdc:	00820074 	movhi	r2,2049
 8003be0:	10ac4f04 	addi	r2,r2,-20164
 8003be4:	11000017 	ldw	r4,0(r2)
 8003be8:	800395c1 	jmpi	800395c <_init_signal_r>

08003bec <__sigtramp>:
 8003bec:	00820074 	movhi	r2,2049
 8003bf0:	10ac4f04 	addi	r2,r2,-20164
 8003bf4:	200b883a 	mov	r5,r4
 8003bf8:	11000017 	ldw	r4,0(r2)
 8003bfc:	8003b081 	jmpi	8003b08 <__sigtramp_r>

08003c00 <_kill_r>:
 8003c00:	defffd04 	addi	sp,sp,-12
 8003c04:	2805883a 	mov	r2,r5
 8003c08:	dc000015 	stw	r16,0(sp)
 8003c0c:	04020074 	movhi	r16,2049
 8003c10:	dc400115 	stw	r17,4(sp)
 8003c14:	84330904 	addi	r16,r16,-13276
 8003c18:	2023883a 	mov	r17,r4
 8003c1c:	300b883a 	mov	r5,r6
 8003c20:	1009883a 	mov	r4,r2
 8003c24:	dfc00215 	stw	ra,8(sp)
 8003c28:	80000015 	stw	zero,0(r16)
 8003c2c:	800662c0 	call	800662c <kill>
 8003c30:	00ffffc4 	movi	r3,-1
 8003c34:	10c00526 	beq	r2,r3,8003c4c <_kill_r+0x4c>
 8003c38:	dfc00217 	ldw	ra,8(sp)
 8003c3c:	dc400117 	ldw	r17,4(sp)
 8003c40:	dc000017 	ldw	r16,0(sp)
 8003c44:	dec00304 	addi	sp,sp,12
 8003c48:	f800283a 	ret
 8003c4c:	80c00017 	ldw	r3,0(r16)
 8003c50:	183ff926 	beq	r3,zero,8003c38 <__alt_mem_bufferram_out+0xf7e03c38>
 8003c54:	88c00015 	stw	r3,0(r17)
 8003c58:	003ff706 	br	8003c38 <__alt_mem_bufferram_out+0xf7e03c38>

08003c5c <_getpid_r>:
 8003c5c:	80064f01 	jmpi	80064f0 <getpid>

08003c60 <strcmp>:
 8003c60:	2144b03a 	or	r2,r4,r5
 8003c64:	108000cc 	andi	r2,r2,3
 8003c68:	1000171e 	bne	r2,zero,8003cc8 <strcmp+0x68>
 8003c6c:	20800017 	ldw	r2,0(r4)
 8003c70:	28c00017 	ldw	r3,0(r5)
 8003c74:	10c0141e 	bne	r2,r3,8003cc8 <strcmp+0x68>
 8003c78:	027fbff4 	movhi	r9,65279
 8003c7c:	4a7fbfc4 	addi	r9,r9,-257
 8003c80:	0086303a 	nor	r3,zero,r2
 8003c84:	02202074 	movhi	r8,32897
 8003c88:	1245883a 	add	r2,r2,r9
 8003c8c:	42202004 	addi	r8,r8,-32640
 8003c90:	10c4703a 	and	r2,r2,r3
 8003c94:	1204703a 	and	r2,r2,r8
 8003c98:	10000226 	beq	r2,zero,8003ca4 <strcmp+0x44>
 8003c9c:	00002306 	br	8003d2c <strcmp+0xcc>
 8003ca0:	1000221e 	bne	r2,zero,8003d2c <strcmp+0xcc>
 8003ca4:	21000104 	addi	r4,r4,4
 8003ca8:	20c00017 	ldw	r3,0(r4)
 8003cac:	29400104 	addi	r5,r5,4
 8003cb0:	29800017 	ldw	r6,0(r5)
 8003cb4:	1a4f883a 	add	r7,r3,r9
 8003cb8:	00c4303a 	nor	r2,zero,r3
 8003cbc:	3884703a 	and	r2,r7,r2
 8003cc0:	1204703a 	and	r2,r2,r8
 8003cc4:	19bff626 	beq	r3,r6,8003ca0 <__alt_mem_bufferram_out+0xf7e03ca0>
 8003cc8:	20800003 	ldbu	r2,0(r4)
 8003ccc:	10c03fcc 	andi	r3,r2,255
 8003cd0:	18c0201c 	xori	r3,r3,128
 8003cd4:	18ffe004 	addi	r3,r3,-128
 8003cd8:	18000c26 	beq	r3,zero,8003d0c <strcmp+0xac>
 8003cdc:	29800007 	ldb	r6,0(r5)
 8003ce0:	19800326 	beq	r3,r6,8003cf0 <strcmp+0x90>
 8003ce4:	00001306 	br	8003d34 <strcmp+0xd4>
 8003ce8:	29800007 	ldb	r6,0(r5)
 8003cec:	11800b1e 	bne	r2,r6,8003d1c <strcmp+0xbc>
 8003cf0:	21000044 	addi	r4,r4,1
 8003cf4:	20c00003 	ldbu	r3,0(r4)
 8003cf8:	29400044 	addi	r5,r5,1
 8003cfc:	18803fcc 	andi	r2,r3,255
 8003d00:	1080201c 	xori	r2,r2,128
 8003d04:	10bfe004 	addi	r2,r2,-128
 8003d08:	103ff71e 	bne	r2,zero,8003ce8 <__alt_mem_bufferram_out+0xf7e03ce8>
 8003d0c:	0007883a 	mov	r3,zero
 8003d10:	28800003 	ldbu	r2,0(r5)
 8003d14:	1885c83a 	sub	r2,r3,r2
 8003d18:	f800283a 	ret
 8003d1c:	28800003 	ldbu	r2,0(r5)
 8003d20:	18c03fcc 	andi	r3,r3,255
 8003d24:	1885c83a 	sub	r2,r3,r2
 8003d28:	f800283a 	ret
 8003d2c:	0005883a 	mov	r2,zero
 8003d30:	f800283a 	ret
 8003d34:	10c03fcc 	andi	r3,r2,255
 8003d38:	003ff506 	br	8003d10 <__alt_mem_bufferram_out+0xf7e03d10>

08003d3c <strlen>:
 8003d3c:	208000cc 	andi	r2,r4,3
 8003d40:	10002026 	beq	r2,zero,8003dc4 <strlen+0x88>
 8003d44:	20800007 	ldb	r2,0(r4)
 8003d48:	10002026 	beq	r2,zero,8003dcc <strlen+0x90>
 8003d4c:	2005883a 	mov	r2,r4
 8003d50:	00000206 	br	8003d5c <strlen+0x20>
 8003d54:	10c00007 	ldb	r3,0(r2)
 8003d58:	18001826 	beq	r3,zero,8003dbc <strlen+0x80>
 8003d5c:	10800044 	addi	r2,r2,1
 8003d60:	10c000cc 	andi	r3,r2,3
 8003d64:	183ffb1e 	bne	r3,zero,8003d54 <__alt_mem_bufferram_out+0xf7e03d54>
 8003d68:	10c00017 	ldw	r3,0(r2)
 8003d6c:	01ffbff4 	movhi	r7,65279
 8003d70:	39ffbfc4 	addi	r7,r7,-257
 8003d74:	00ca303a 	nor	r5,zero,r3
 8003d78:	01a02074 	movhi	r6,32897
 8003d7c:	19c7883a 	add	r3,r3,r7
 8003d80:	31a02004 	addi	r6,r6,-32640
 8003d84:	1946703a 	and	r3,r3,r5
 8003d88:	1986703a 	and	r3,r3,r6
 8003d8c:	1800091e 	bne	r3,zero,8003db4 <strlen+0x78>
 8003d90:	10800104 	addi	r2,r2,4
 8003d94:	10c00017 	ldw	r3,0(r2)
 8003d98:	19cb883a 	add	r5,r3,r7
 8003d9c:	00c6303a 	nor	r3,zero,r3
 8003da0:	28c6703a 	and	r3,r5,r3
 8003da4:	1986703a 	and	r3,r3,r6
 8003da8:	183ff926 	beq	r3,zero,8003d90 <__alt_mem_bufferram_out+0xf7e03d90>
 8003dac:	00000106 	br	8003db4 <strlen+0x78>
 8003db0:	10800044 	addi	r2,r2,1
 8003db4:	10c00007 	ldb	r3,0(r2)
 8003db8:	183ffd1e 	bne	r3,zero,8003db0 <__alt_mem_bufferram_out+0xf7e03db0>
 8003dbc:	1105c83a 	sub	r2,r2,r4
 8003dc0:	f800283a 	ret
 8003dc4:	2005883a 	mov	r2,r4
 8003dc8:	003fe706 	br	8003d68 <__alt_mem_bufferram_out+0xf7e03d68>
 8003dcc:	0005883a 	mov	r2,zero
 8003dd0:	f800283a 	ret

08003dd4 <__fp_unlock>:
 8003dd4:	0005883a 	mov	r2,zero
 8003dd8:	f800283a 	ret

08003ddc <_cleanup_r>:
 8003ddc:	01420034 	movhi	r5,2048
 8003de0:	29568304 	addi	r5,r5,23052
 8003de4:	8004b281 	jmpi	8004b28 <_fwalk_reent>

08003de8 <__sinit.part.1>:
 8003de8:	defff704 	addi	sp,sp,-36
 8003dec:	00c20034 	movhi	r3,2048
 8003df0:	dfc00815 	stw	ra,32(sp)
 8003df4:	ddc00715 	stw	r23,28(sp)
 8003df8:	dd800615 	stw	r22,24(sp)
 8003dfc:	dd400515 	stw	r21,20(sp)
 8003e00:	dd000415 	stw	r20,16(sp)
 8003e04:	dcc00315 	stw	r19,12(sp)
 8003e08:	dc800215 	stw	r18,8(sp)
 8003e0c:	dc400115 	stw	r17,4(sp)
 8003e10:	dc000015 	stw	r16,0(sp)
 8003e14:	18cf7704 	addi	r3,r3,15836
 8003e18:	24000117 	ldw	r16,4(r4)
 8003e1c:	20c00f15 	stw	r3,60(r4)
 8003e20:	2080bb04 	addi	r2,r4,748
 8003e24:	00c000c4 	movi	r3,3
 8003e28:	20c0b915 	stw	r3,740(r4)
 8003e2c:	2080ba15 	stw	r2,744(r4)
 8003e30:	2000b815 	stw	zero,736(r4)
 8003e34:	05c00204 	movi	r23,8
 8003e38:	00800104 	movi	r2,4
 8003e3c:	2025883a 	mov	r18,r4
 8003e40:	b80d883a 	mov	r6,r23
 8003e44:	81001704 	addi	r4,r16,92
 8003e48:	000b883a 	mov	r5,zero
 8003e4c:	80000015 	stw	zero,0(r16)
 8003e50:	80000115 	stw	zero,4(r16)
 8003e54:	80000215 	stw	zero,8(r16)
 8003e58:	8080030d 	sth	r2,12(r16)
 8003e5c:	80001915 	stw	zero,100(r16)
 8003e60:	8000038d 	sth	zero,14(r16)
 8003e64:	80000415 	stw	zero,16(r16)
 8003e68:	80000515 	stw	zero,20(r16)
 8003e6c:	80000615 	stw	zero,24(r16)
 8003e70:	80036840 	call	8003684 <memset>
 8003e74:	05820034 	movhi	r22,2048
 8003e78:	94400217 	ldw	r17,8(r18)
 8003e7c:	05420034 	movhi	r21,2048
 8003e80:	05020034 	movhi	r20,2048
 8003e84:	04c20034 	movhi	r19,2048
 8003e88:	b595b204 	addi	r22,r22,22216
 8003e8c:	ad55c904 	addi	r21,r21,22308
 8003e90:	a515e804 	addi	r20,r20,22432
 8003e94:	9cd5ff04 	addi	r19,r19,22524
 8003e98:	85800815 	stw	r22,32(r16)
 8003e9c:	85400915 	stw	r21,36(r16)
 8003ea0:	85000a15 	stw	r20,40(r16)
 8003ea4:	84c00b15 	stw	r19,44(r16)
 8003ea8:	84000715 	stw	r16,28(r16)
 8003eac:	00800284 	movi	r2,10
 8003eb0:	8880030d 	sth	r2,12(r17)
 8003eb4:	00800044 	movi	r2,1
 8003eb8:	b80d883a 	mov	r6,r23
 8003ebc:	89001704 	addi	r4,r17,92
 8003ec0:	000b883a 	mov	r5,zero
 8003ec4:	88000015 	stw	zero,0(r17)
 8003ec8:	88000115 	stw	zero,4(r17)
 8003ecc:	88000215 	stw	zero,8(r17)
 8003ed0:	88001915 	stw	zero,100(r17)
 8003ed4:	8880038d 	sth	r2,14(r17)
 8003ed8:	88000415 	stw	zero,16(r17)
 8003edc:	88000515 	stw	zero,20(r17)
 8003ee0:	88000615 	stw	zero,24(r17)
 8003ee4:	80036840 	call	8003684 <memset>
 8003ee8:	94000317 	ldw	r16,12(r18)
 8003eec:	00800484 	movi	r2,18
 8003ef0:	8c400715 	stw	r17,28(r17)
 8003ef4:	8d800815 	stw	r22,32(r17)
 8003ef8:	8d400915 	stw	r21,36(r17)
 8003efc:	8d000a15 	stw	r20,40(r17)
 8003f00:	8cc00b15 	stw	r19,44(r17)
 8003f04:	8080030d 	sth	r2,12(r16)
 8003f08:	00800084 	movi	r2,2
 8003f0c:	80000015 	stw	zero,0(r16)
 8003f10:	80000115 	stw	zero,4(r16)
 8003f14:	80000215 	stw	zero,8(r16)
 8003f18:	80001915 	stw	zero,100(r16)
 8003f1c:	8080038d 	sth	r2,14(r16)
 8003f20:	80000415 	stw	zero,16(r16)
 8003f24:	80000515 	stw	zero,20(r16)
 8003f28:	80000615 	stw	zero,24(r16)
 8003f2c:	b80d883a 	mov	r6,r23
 8003f30:	000b883a 	mov	r5,zero
 8003f34:	81001704 	addi	r4,r16,92
 8003f38:	80036840 	call	8003684 <memset>
 8003f3c:	00800044 	movi	r2,1
 8003f40:	84000715 	stw	r16,28(r16)
 8003f44:	85800815 	stw	r22,32(r16)
 8003f48:	85400915 	stw	r21,36(r16)
 8003f4c:	85000a15 	stw	r20,40(r16)
 8003f50:	84c00b15 	stw	r19,44(r16)
 8003f54:	90800e15 	stw	r2,56(r18)
 8003f58:	dfc00817 	ldw	ra,32(sp)
 8003f5c:	ddc00717 	ldw	r23,28(sp)
 8003f60:	dd800617 	ldw	r22,24(sp)
 8003f64:	dd400517 	ldw	r21,20(sp)
 8003f68:	dd000417 	ldw	r20,16(sp)
 8003f6c:	dcc00317 	ldw	r19,12(sp)
 8003f70:	dc800217 	ldw	r18,8(sp)
 8003f74:	dc400117 	ldw	r17,4(sp)
 8003f78:	dc000017 	ldw	r16,0(sp)
 8003f7c:	dec00904 	addi	sp,sp,36
 8003f80:	f800283a 	ret

08003f84 <__fp_lock>:
 8003f84:	0005883a 	mov	r2,zero
 8003f88:	f800283a 	ret

08003f8c <__sfmoreglue>:
 8003f8c:	defffc04 	addi	sp,sp,-16
 8003f90:	dc400115 	stw	r17,4(sp)
 8003f94:	2c7fffc4 	addi	r17,r5,-1
 8003f98:	8c401a24 	muli	r17,r17,104
 8003f9c:	dc800215 	stw	r18,8(sp)
 8003fa0:	2825883a 	mov	r18,r5
 8003fa4:	89401d04 	addi	r5,r17,116
 8003fa8:	dc000015 	stw	r16,0(sp)
 8003fac:	dfc00315 	stw	ra,12(sp)
 8003fb0:	8002e780 	call	8002e78 <_malloc_r>
 8003fb4:	1021883a 	mov	r16,r2
 8003fb8:	10000726 	beq	r2,zero,8003fd8 <__sfmoreglue+0x4c>
 8003fbc:	11000304 	addi	r4,r2,12
 8003fc0:	10000015 	stw	zero,0(r2)
 8003fc4:	14800115 	stw	r18,4(r2)
 8003fc8:	11000215 	stw	r4,8(r2)
 8003fcc:	89801a04 	addi	r6,r17,104
 8003fd0:	000b883a 	mov	r5,zero
 8003fd4:	80036840 	call	8003684 <memset>
 8003fd8:	8005883a 	mov	r2,r16
 8003fdc:	dfc00317 	ldw	ra,12(sp)
 8003fe0:	dc800217 	ldw	r18,8(sp)
 8003fe4:	dc400117 	ldw	r17,4(sp)
 8003fe8:	dc000017 	ldw	r16,0(sp)
 8003fec:	dec00404 	addi	sp,sp,16
 8003ff0:	f800283a 	ret

08003ff4 <__sfp>:
 8003ff4:	defffb04 	addi	sp,sp,-20
 8003ff8:	dc000015 	stw	r16,0(sp)
 8003ffc:	04020074 	movhi	r16,2049
 8004000:	842c4e04 	addi	r16,r16,-20168
 8004004:	dcc00315 	stw	r19,12(sp)
 8004008:	2027883a 	mov	r19,r4
 800400c:	81000017 	ldw	r4,0(r16)
 8004010:	dfc00415 	stw	ra,16(sp)
 8004014:	dc800215 	stw	r18,8(sp)
 8004018:	20800e17 	ldw	r2,56(r4)
 800401c:	dc400115 	stw	r17,4(sp)
 8004020:	1000021e 	bne	r2,zero,800402c <__sfp+0x38>
 8004024:	8003de80 	call	8003de8 <__sinit.part.1>
 8004028:	81000017 	ldw	r4,0(r16)
 800402c:	2480b804 	addi	r18,r4,736
 8004030:	047fffc4 	movi	r17,-1
 8004034:	91000117 	ldw	r4,4(r18)
 8004038:	94000217 	ldw	r16,8(r18)
 800403c:	213fffc4 	addi	r4,r4,-1
 8004040:	20000a16 	blt	r4,zero,800406c <__sfp+0x78>
 8004044:	8080030f 	ldh	r2,12(r16)
 8004048:	10000c26 	beq	r2,zero,800407c <__sfp+0x88>
 800404c:	80c01d04 	addi	r3,r16,116
 8004050:	00000206 	br	800405c <__sfp+0x68>
 8004054:	18bfe60f 	ldh	r2,-104(r3)
 8004058:	10000826 	beq	r2,zero,800407c <__sfp+0x88>
 800405c:	213fffc4 	addi	r4,r4,-1
 8004060:	1c3ffd04 	addi	r16,r3,-12
 8004064:	18c01a04 	addi	r3,r3,104
 8004068:	247ffa1e 	bne	r4,r17,8004054 <__alt_mem_bufferram_out+0xf7e04054>
 800406c:	90800017 	ldw	r2,0(r18)
 8004070:	10001d26 	beq	r2,zero,80040e8 <__sfp+0xf4>
 8004074:	1025883a 	mov	r18,r2
 8004078:	003fee06 	br	8004034 <__alt_mem_bufferram_out+0xf7e04034>
 800407c:	00bfffc4 	movi	r2,-1
 8004080:	8080038d 	sth	r2,14(r16)
 8004084:	00800044 	movi	r2,1
 8004088:	8080030d 	sth	r2,12(r16)
 800408c:	80001915 	stw	zero,100(r16)
 8004090:	80000015 	stw	zero,0(r16)
 8004094:	80000215 	stw	zero,8(r16)
 8004098:	80000115 	stw	zero,4(r16)
 800409c:	80000415 	stw	zero,16(r16)
 80040a0:	80000515 	stw	zero,20(r16)
 80040a4:	80000615 	stw	zero,24(r16)
 80040a8:	01800204 	movi	r6,8
 80040ac:	000b883a 	mov	r5,zero
 80040b0:	81001704 	addi	r4,r16,92
 80040b4:	80036840 	call	8003684 <memset>
 80040b8:	8005883a 	mov	r2,r16
 80040bc:	80000c15 	stw	zero,48(r16)
 80040c0:	80000d15 	stw	zero,52(r16)
 80040c4:	80001115 	stw	zero,68(r16)
 80040c8:	80001215 	stw	zero,72(r16)
 80040cc:	dfc00417 	ldw	ra,16(sp)
 80040d0:	dcc00317 	ldw	r19,12(sp)
 80040d4:	dc800217 	ldw	r18,8(sp)
 80040d8:	dc400117 	ldw	r17,4(sp)
 80040dc:	dc000017 	ldw	r16,0(sp)
 80040e0:	dec00504 	addi	sp,sp,20
 80040e4:	f800283a 	ret
 80040e8:	01400104 	movi	r5,4
 80040ec:	9809883a 	mov	r4,r19
 80040f0:	8003f8c0 	call	8003f8c <__sfmoreglue>
 80040f4:	90800015 	stw	r2,0(r18)
 80040f8:	103fde1e 	bne	r2,zero,8004074 <__alt_mem_bufferram_out+0xf7e04074>
 80040fc:	00800304 	movi	r2,12
 8004100:	98800015 	stw	r2,0(r19)
 8004104:	0005883a 	mov	r2,zero
 8004108:	003ff006 	br	80040cc <__alt_mem_bufferram_out+0xf7e040cc>

0800410c <_cleanup>:
 800410c:	00820074 	movhi	r2,2049
 8004110:	10ac4e04 	addi	r2,r2,-20168
 8004114:	11000017 	ldw	r4,0(r2)
 8004118:	01420034 	movhi	r5,2048
 800411c:	29568304 	addi	r5,r5,23052
 8004120:	8004b281 	jmpi	8004b28 <_fwalk_reent>

08004124 <__sinit>:
 8004124:	20800e17 	ldw	r2,56(r4)
 8004128:	10000126 	beq	r2,zero,8004130 <__sinit+0xc>
 800412c:	f800283a 	ret
 8004130:	8003de81 	jmpi	8003de8 <__sinit.part.1>

08004134 <__sfp_lock_acquire>:
 8004134:	f800283a 	ret

08004138 <__sfp_lock_release>:
 8004138:	f800283a 	ret

0800413c <__sinit_lock_acquire>:
 800413c:	f800283a 	ret

08004140 <__sinit_lock_release>:
 8004140:	f800283a 	ret

08004144 <__fp_lock_all>:
 8004144:	00820074 	movhi	r2,2049
 8004148:	10ac4f04 	addi	r2,r2,-20164
 800414c:	11000017 	ldw	r4,0(r2)
 8004150:	01420034 	movhi	r5,2048
 8004154:	294fe104 	addi	r5,r5,16260
 8004158:	8004a641 	jmpi	8004a64 <_fwalk>

0800415c <__fp_unlock_all>:
 800415c:	00820074 	movhi	r2,2049
 8004160:	10ac4f04 	addi	r2,r2,-20164
 8004164:	11000017 	ldw	r4,0(r2)
 8004168:	01420034 	movhi	r5,2048
 800416c:	294f7504 	addi	r5,r5,15828
 8004170:	8004a641 	jmpi	8004a64 <_fwalk>

08004174 <_malloc_trim_r>:
 8004174:	defffb04 	addi	sp,sp,-20
 8004178:	dcc00315 	stw	r19,12(sp)
 800417c:	04c20074 	movhi	r19,2049
 8004180:	dc800215 	stw	r18,8(sp)
 8004184:	dc400115 	stw	r17,4(sp)
 8004188:	dc000015 	stw	r16,0(sp)
 800418c:	dfc00415 	stw	ra,16(sp)
 8004190:	2821883a 	mov	r16,r5
 8004194:	9ce6bf04 	addi	r19,r19,-25860
 8004198:	2025883a 	mov	r18,r4
 800419c:	80069d40 	call	80069d4 <__malloc_lock>
 80041a0:	98800217 	ldw	r2,8(r19)
 80041a4:	14400117 	ldw	r17,4(r2)
 80041a8:	00bfff04 	movi	r2,-4
 80041ac:	88a2703a 	and	r17,r17,r2
 80041b0:	8c21c83a 	sub	r16,r17,r16
 80041b4:	8403fbc4 	addi	r16,r16,4079
 80041b8:	8020d33a 	srli	r16,r16,12
 80041bc:	0083ffc4 	movi	r2,4095
 80041c0:	843fffc4 	addi	r16,r16,-1
 80041c4:	8020933a 	slli	r16,r16,12
 80041c8:	1400060e 	bge	r2,r16,80041e4 <_malloc_trim_r+0x70>
 80041cc:	000b883a 	mov	r5,zero
 80041d0:	9009883a 	mov	r4,r18
 80041d4:	80039080 	call	8003908 <_sbrk_r>
 80041d8:	98c00217 	ldw	r3,8(r19)
 80041dc:	1c47883a 	add	r3,r3,r17
 80041e0:	10c00a26 	beq	r2,r3,800420c <_malloc_trim_r+0x98>
 80041e4:	9009883a 	mov	r4,r18
 80041e8:	80069f80 	call	80069f8 <__malloc_unlock>
 80041ec:	0005883a 	mov	r2,zero
 80041f0:	dfc00417 	ldw	ra,16(sp)
 80041f4:	dcc00317 	ldw	r19,12(sp)
 80041f8:	dc800217 	ldw	r18,8(sp)
 80041fc:	dc400117 	ldw	r17,4(sp)
 8004200:	dc000017 	ldw	r16,0(sp)
 8004204:	dec00504 	addi	sp,sp,20
 8004208:	f800283a 	ret
 800420c:	040bc83a 	sub	r5,zero,r16
 8004210:	9009883a 	mov	r4,r18
 8004214:	80039080 	call	8003908 <_sbrk_r>
 8004218:	00ffffc4 	movi	r3,-1
 800421c:	10c00d26 	beq	r2,r3,8004254 <_malloc_trim_r+0xe0>
 8004220:	00c20074 	movhi	r3,2049
 8004224:	18f31504 	addi	r3,r3,-13228
 8004228:	18800017 	ldw	r2,0(r3)
 800422c:	99000217 	ldw	r4,8(r19)
 8004230:	8c23c83a 	sub	r17,r17,r16
 8004234:	8c400054 	ori	r17,r17,1
 8004238:	1421c83a 	sub	r16,r2,r16
 800423c:	24400115 	stw	r17,4(r4)
 8004240:	9009883a 	mov	r4,r18
 8004244:	1c000015 	stw	r16,0(r3)
 8004248:	80069f80 	call	80069f8 <__malloc_unlock>
 800424c:	00800044 	movi	r2,1
 8004250:	003fe706 	br	80041f0 <__alt_mem_bufferram_out+0xf7e041f0>
 8004254:	000b883a 	mov	r5,zero
 8004258:	9009883a 	mov	r4,r18
 800425c:	80039080 	call	8003908 <_sbrk_r>
 8004260:	99000217 	ldw	r4,8(r19)
 8004264:	014003c4 	movi	r5,15
 8004268:	1107c83a 	sub	r3,r2,r4
 800426c:	28ffdd0e 	bge	r5,r3,80041e4 <__alt_mem_bufferram_out+0xf7e041e4>
 8004270:	01420074 	movhi	r5,2049
 8004274:	296c5004 	addi	r5,r5,-20160
 8004278:	29400017 	ldw	r5,0(r5)
 800427c:	18c00054 	ori	r3,r3,1
 8004280:	20c00115 	stw	r3,4(r4)
 8004284:	00c20074 	movhi	r3,2049
 8004288:	1145c83a 	sub	r2,r2,r5
 800428c:	18f31504 	addi	r3,r3,-13228
 8004290:	18800015 	stw	r2,0(r3)
 8004294:	003fd306 	br	80041e4 <__alt_mem_bufferram_out+0xf7e041e4>

08004298 <_free_r>:
 8004298:	28004126 	beq	r5,zero,80043a0 <_free_r+0x108>
 800429c:	defffd04 	addi	sp,sp,-12
 80042a0:	dc400115 	stw	r17,4(sp)
 80042a4:	dc000015 	stw	r16,0(sp)
 80042a8:	2023883a 	mov	r17,r4
 80042ac:	2821883a 	mov	r16,r5
 80042b0:	dfc00215 	stw	ra,8(sp)
 80042b4:	80069d40 	call	80069d4 <__malloc_lock>
 80042b8:	81ffff17 	ldw	r7,-4(r16)
 80042bc:	00bfff84 	movi	r2,-2
 80042c0:	01020074 	movhi	r4,2049
 80042c4:	81bffe04 	addi	r6,r16,-8
 80042c8:	3884703a 	and	r2,r7,r2
 80042cc:	2126bf04 	addi	r4,r4,-25860
 80042d0:	308b883a 	add	r5,r6,r2
 80042d4:	2a400117 	ldw	r9,4(r5)
 80042d8:	22000217 	ldw	r8,8(r4)
 80042dc:	00ffff04 	movi	r3,-4
 80042e0:	48c6703a 	and	r3,r9,r3
 80042e4:	2a005726 	beq	r5,r8,8004444 <_free_r+0x1ac>
 80042e8:	28c00115 	stw	r3,4(r5)
 80042ec:	39c0004c 	andi	r7,r7,1
 80042f0:	3800091e 	bne	r7,zero,8004318 <_free_r+0x80>
 80042f4:	823ffe17 	ldw	r8,-8(r16)
 80042f8:	22400204 	addi	r9,r4,8
 80042fc:	320dc83a 	sub	r6,r6,r8
 8004300:	31c00217 	ldw	r7,8(r6)
 8004304:	1205883a 	add	r2,r2,r8
 8004308:	3a406526 	beq	r7,r9,80044a0 <_free_r+0x208>
 800430c:	32000317 	ldw	r8,12(r6)
 8004310:	3a000315 	stw	r8,12(r7)
 8004314:	41c00215 	stw	r7,8(r8)
 8004318:	28cf883a 	add	r7,r5,r3
 800431c:	39c00117 	ldw	r7,4(r7)
 8004320:	39c0004c 	andi	r7,r7,1
 8004324:	38003a26 	beq	r7,zero,8004410 <_free_r+0x178>
 8004328:	10c00054 	ori	r3,r2,1
 800432c:	30c00115 	stw	r3,4(r6)
 8004330:	3087883a 	add	r3,r6,r2
 8004334:	18800015 	stw	r2,0(r3)
 8004338:	00c07fc4 	movi	r3,511
 800433c:	18801936 	bltu	r3,r2,80043a4 <_free_r+0x10c>
 8004340:	1004d0fa 	srli	r2,r2,3
 8004344:	01c00044 	movi	r7,1
 8004348:	21400117 	ldw	r5,4(r4)
 800434c:	10c00044 	addi	r3,r2,1
 8004350:	18c7883a 	add	r3,r3,r3
 8004354:	1005d0ba 	srai	r2,r2,2
 8004358:	18c7883a 	add	r3,r3,r3
 800435c:	18c7883a 	add	r3,r3,r3
 8004360:	1907883a 	add	r3,r3,r4
 8004364:	3884983a 	sll	r2,r7,r2
 8004368:	19c00017 	ldw	r7,0(r3)
 800436c:	1a3ffe04 	addi	r8,r3,-8
 8004370:	1144b03a 	or	r2,r2,r5
 8004374:	32000315 	stw	r8,12(r6)
 8004378:	31c00215 	stw	r7,8(r6)
 800437c:	20800115 	stw	r2,4(r4)
 8004380:	19800015 	stw	r6,0(r3)
 8004384:	39800315 	stw	r6,12(r7)
 8004388:	8809883a 	mov	r4,r17
 800438c:	dfc00217 	ldw	ra,8(sp)
 8004390:	dc400117 	ldw	r17,4(sp)
 8004394:	dc000017 	ldw	r16,0(sp)
 8004398:	dec00304 	addi	sp,sp,12
 800439c:	80069f81 	jmpi	80069f8 <__malloc_unlock>
 80043a0:	f800283a 	ret
 80043a4:	100ad27a 	srli	r5,r2,9
 80043a8:	00c00104 	movi	r3,4
 80043ac:	19404a36 	bltu	r3,r5,80044d8 <_free_r+0x240>
 80043b0:	100ad1ba 	srli	r5,r2,6
 80043b4:	28c00e44 	addi	r3,r5,57
 80043b8:	18c7883a 	add	r3,r3,r3
 80043bc:	29400e04 	addi	r5,r5,56
 80043c0:	18c7883a 	add	r3,r3,r3
 80043c4:	18c7883a 	add	r3,r3,r3
 80043c8:	1909883a 	add	r4,r3,r4
 80043cc:	20c00017 	ldw	r3,0(r4)
 80043d0:	01c20074 	movhi	r7,2049
 80043d4:	213ffe04 	addi	r4,r4,-8
 80043d8:	39e6bf04 	addi	r7,r7,-25860
 80043dc:	20c04426 	beq	r4,r3,80044f0 <_free_r+0x258>
 80043e0:	01ffff04 	movi	r7,-4
 80043e4:	19400117 	ldw	r5,4(r3)
 80043e8:	29ca703a 	and	r5,r5,r7
 80043ec:	1140022e 	bgeu	r2,r5,80043f8 <_free_r+0x160>
 80043f0:	18c00217 	ldw	r3,8(r3)
 80043f4:	20fffb1e 	bne	r4,r3,80043e4 <__alt_mem_bufferram_out+0xf7e043e4>
 80043f8:	19000317 	ldw	r4,12(r3)
 80043fc:	31000315 	stw	r4,12(r6)
 8004400:	30c00215 	stw	r3,8(r6)
 8004404:	21800215 	stw	r6,8(r4)
 8004408:	19800315 	stw	r6,12(r3)
 800440c:	003fde06 	br	8004388 <__alt_mem_bufferram_out+0xf7e04388>
 8004410:	29c00217 	ldw	r7,8(r5)
 8004414:	10c5883a 	add	r2,r2,r3
 8004418:	00c20074 	movhi	r3,2049
 800441c:	18e6c104 	addi	r3,r3,-25852
 8004420:	38c03b26 	beq	r7,r3,8004510 <_free_r+0x278>
 8004424:	2a000317 	ldw	r8,12(r5)
 8004428:	11400054 	ori	r5,r2,1
 800442c:	3087883a 	add	r3,r6,r2
 8004430:	3a000315 	stw	r8,12(r7)
 8004434:	41c00215 	stw	r7,8(r8)
 8004438:	31400115 	stw	r5,4(r6)
 800443c:	18800015 	stw	r2,0(r3)
 8004440:	003fbd06 	br	8004338 <__alt_mem_bufferram_out+0xf7e04338>
 8004444:	39c0004c 	andi	r7,r7,1
 8004448:	10c5883a 	add	r2,r2,r3
 800444c:	3800071e 	bne	r7,zero,800446c <_free_r+0x1d4>
 8004450:	81fffe17 	ldw	r7,-8(r16)
 8004454:	31cdc83a 	sub	r6,r6,r7
 8004458:	30c00317 	ldw	r3,12(r6)
 800445c:	31400217 	ldw	r5,8(r6)
 8004460:	11c5883a 	add	r2,r2,r7
 8004464:	28c00315 	stw	r3,12(r5)
 8004468:	19400215 	stw	r5,8(r3)
 800446c:	10c00054 	ori	r3,r2,1
 8004470:	30c00115 	stw	r3,4(r6)
 8004474:	00c20074 	movhi	r3,2049
 8004478:	18ec5104 	addi	r3,r3,-20156
 800447c:	18c00017 	ldw	r3,0(r3)
 8004480:	21800215 	stw	r6,8(r4)
 8004484:	10ffc036 	bltu	r2,r3,8004388 <__alt_mem_bufferram_out+0xf7e04388>
 8004488:	00820074 	movhi	r2,2049
 800448c:	10b30804 	addi	r2,r2,-13280
 8004490:	11400017 	ldw	r5,0(r2)
 8004494:	8809883a 	mov	r4,r17
 8004498:	80041740 	call	8004174 <_malloc_trim_r>
 800449c:	003fba06 	br	8004388 <__alt_mem_bufferram_out+0xf7e04388>
 80044a0:	28c9883a 	add	r4,r5,r3
 80044a4:	21000117 	ldw	r4,4(r4)
 80044a8:	2100004c 	andi	r4,r4,1
 80044ac:	2000391e 	bne	r4,zero,8004594 <_free_r+0x2fc>
 80044b0:	29c00217 	ldw	r7,8(r5)
 80044b4:	29000317 	ldw	r4,12(r5)
 80044b8:	1885883a 	add	r2,r3,r2
 80044bc:	10c00054 	ori	r3,r2,1
 80044c0:	39000315 	stw	r4,12(r7)
 80044c4:	21c00215 	stw	r7,8(r4)
 80044c8:	30c00115 	stw	r3,4(r6)
 80044cc:	308d883a 	add	r6,r6,r2
 80044d0:	30800015 	stw	r2,0(r6)
 80044d4:	003fac06 	br	8004388 <__alt_mem_bufferram_out+0xf7e04388>
 80044d8:	00c00504 	movi	r3,20
 80044dc:	19401536 	bltu	r3,r5,8004534 <_free_r+0x29c>
 80044e0:	28c01704 	addi	r3,r5,92
 80044e4:	18c7883a 	add	r3,r3,r3
 80044e8:	294016c4 	addi	r5,r5,91
 80044ec:	003fb406 	br	80043c0 <__alt_mem_bufferram_out+0xf7e043c0>
 80044f0:	280bd0ba 	srai	r5,r5,2
 80044f4:	00c00044 	movi	r3,1
 80044f8:	38800117 	ldw	r2,4(r7)
 80044fc:	194a983a 	sll	r5,r3,r5
 8004500:	2007883a 	mov	r3,r4
 8004504:	2884b03a 	or	r2,r5,r2
 8004508:	38800115 	stw	r2,4(r7)
 800450c:	003fbb06 	br	80043fc <__alt_mem_bufferram_out+0xf7e043fc>
 8004510:	21800515 	stw	r6,20(r4)
 8004514:	21800415 	stw	r6,16(r4)
 8004518:	10c00054 	ori	r3,r2,1
 800451c:	31c00315 	stw	r7,12(r6)
 8004520:	31c00215 	stw	r7,8(r6)
 8004524:	30c00115 	stw	r3,4(r6)
 8004528:	308d883a 	add	r6,r6,r2
 800452c:	30800015 	stw	r2,0(r6)
 8004530:	003f9506 	br	8004388 <__alt_mem_bufferram_out+0xf7e04388>
 8004534:	00c01504 	movi	r3,84
 8004538:	19400536 	bltu	r3,r5,8004550 <_free_r+0x2b8>
 800453c:	100ad33a 	srli	r5,r2,12
 8004540:	28c01bc4 	addi	r3,r5,111
 8004544:	18c7883a 	add	r3,r3,r3
 8004548:	29401b84 	addi	r5,r5,110
 800454c:	003f9c06 	br	80043c0 <__alt_mem_bufferram_out+0xf7e043c0>
 8004550:	00c05504 	movi	r3,340
 8004554:	19400536 	bltu	r3,r5,800456c <_free_r+0x2d4>
 8004558:	100ad3fa 	srli	r5,r2,15
 800455c:	28c01e04 	addi	r3,r5,120
 8004560:	18c7883a 	add	r3,r3,r3
 8004564:	29401dc4 	addi	r5,r5,119
 8004568:	003f9506 	br	80043c0 <__alt_mem_bufferram_out+0xf7e043c0>
 800456c:	00c15504 	movi	r3,1364
 8004570:	19400536 	bltu	r3,r5,8004588 <_free_r+0x2f0>
 8004574:	100ad4ba 	srli	r5,r2,18
 8004578:	28c01f44 	addi	r3,r5,125
 800457c:	18c7883a 	add	r3,r3,r3
 8004580:	29401f04 	addi	r5,r5,124
 8004584:	003f8e06 	br	80043c0 <__alt_mem_bufferram_out+0xf7e043c0>
 8004588:	00c03f84 	movi	r3,254
 800458c:	01401f84 	movi	r5,126
 8004590:	003f8b06 	br	80043c0 <__alt_mem_bufferram_out+0xf7e043c0>
 8004594:	10c00054 	ori	r3,r2,1
 8004598:	30c00115 	stw	r3,4(r6)
 800459c:	308d883a 	add	r6,r6,r2
 80045a0:	30800015 	stw	r2,0(r6)
 80045a4:	003f7806 	br	8004388 <__alt_mem_bufferram_out+0xf7e04388>

080045a8 <__sfvwrite_r>:
 80045a8:	30800217 	ldw	r2,8(r6)
 80045ac:	10006726 	beq	r2,zero,800474c <__sfvwrite_r+0x1a4>
 80045b0:	28c0030b 	ldhu	r3,12(r5)
 80045b4:	defff404 	addi	sp,sp,-48
 80045b8:	dd400715 	stw	r21,28(sp)
 80045bc:	dd000615 	stw	r20,24(sp)
 80045c0:	dc000215 	stw	r16,8(sp)
 80045c4:	dfc00b15 	stw	ra,44(sp)
 80045c8:	df000a15 	stw	fp,40(sp)
 80045cc:	ddc00915 	stw	r23,36(sp)
 80045d0:	dd800815 	stw	r22,32(sp)
 80045d4:	dcc00515 	stw	r19,20(sp)
 80045d8:	dc800415 	stw	r18,16(sp)
 80045dc:	dc400315 	stw	r17,12(sp)
 80045e0:	1880020c 	andi	r2,r3,8
 80045e4:	2821883a 	mov	r16,r5
 80045e8:	202b883a 	mov	r21,r4
 80045ec:	3029883a 	mov	r20,r6
 80045f0:	10002726 	beq	r2,zero,8004690 <__sfvwrite_r+0xe8>
 80045f4:	28800417 	ldw	r2,16(r5)
 80045f8:	10002526 	beq	r2,zero,8004690 <__sfvwrite_r+0xe8>
 80045fc:	1880008c 	andi	r2,r3,2
 8004600:	a4400017 	ldw	r17,0(r20)
 8004604:	10002a26 	beq	r2,zero,80046b0 <__sfvwrite_r+0x108>
 8004608:	05a00034 	movhi	r22,32768
 800460c:	0027883a 	mov	r19,zero
 8004610:	0025883a 	mov	r18,zero
 8004614:	b5bf0004 	addi	r22,r22,-1024
 8004618:	980d883a 	mov	r6,r19
 800461c:	a809883a 	mov	r4,r21
 8004620:	90004626 	beq	r18,zero,800473c <__sfvwrite_r+0x194>
 8004624:	900f883a 	mov	r7,r18
 8004628:	b480022e 	bgeu	r22,r18,8004634 <__sfvwrite_r+0x8c>
 800462c:	01e00034 	movhi	r7,32768
 8004630:	39ff0004 	addi	r7,r7,-1024
 8004634:	80800917 	ldw	r2,36(r16)
 8004638:	81400717 	ldw	r5,28(r16)
 800463c:	103ee83a 	callr	r2
 8004640:	0080570e 	bge	zero,r2,80047a0 <__sfvwrite_r+0x1f8>
 8004644:	a0c00217 	ldw	r3,8(r20)
 8004648:	98a7883a 	add	r19,r19,r2
 800464c:	90a5c83a 	sub	r18,r18,r2
 8004650:	1885c83a 	sub	r2,r3,r2
 8004654:	a0800215 	stw	r2,8(r20)
 8004658:	103fef1e 	bne	r2,zero,8004618 <__alt_mem_bufferram_out+0xf7e04618>
 800465c:	0005883a 	mov	r2,zero
 8004660:	dfc00b17 	ldw	ra,44(sp)
 8004664:	df000a17 	ldw	fp,40(sp)
 8004668:	ddc00917 	ldw	r23,36(sp)
 800466c:	dd800817 	ldw	r22,32(sp)
 8004670:	dd400717 	ldw	r21,28(sp)
 8004674:	dd000617 	ldw	r20,24(sp)
 8004678:	dcc00517 	ldw	r19,20(sp)
 800467c:	dc800417 	ldw	r18,16(sp)
 8004680:	dc400317 	ldw	r17,12(sp)
 8004684:	dc000217 	ldw	r16,8(sp)
 8004688:	dec00c04 	addi	sp,sp,48
 800468c:	f800283a 	ret
 8004690:	800b883a 	mov	r5,r16
 8004694:	a809883a 	mov	r4,r21
 8004698:	80058640 	call	8005864 <__swsetup_r>
 800469c:	1000eb1e 	bne	r2,zero,8004a4c <__sfvwrite_r+0x4a4>
 80046a0:	80c0030b 	ldhu	r3,12(r16)
 80046a4:	a4400017 	ldw	r17,0(r20)
 80046a8:	1880008c 	andi	r2,r3,2
 80046ac:	103fd61e 	bne	r2,zero,8004608 <__alt_mem_bufferram_out+0xf7e04608>
 80046b0:	1880004c 	andi	r2,r3,1
 80046b4:	10003f1e 	bne	r2,zero,80047b4 <__sfvwrite_r+0x20c>
 80046b8:	0039883a 	mov	fp,zero
 80046bc:	0025883a 	mov	r18,zero
 80046c0:	90001a26 	beq	r18,zero,800472c <__sfvwrite_r+0x184>
 80046c4:	1880800c 	andi	r2,r3,512
 80046c8:	84c00217 	ldw	r19,8(r16)
 80046cc:	10002126 	beq	r2,zero,8004754 <__sfvwrite_r+0x1ac>
 80046d0:	982f883a 	mov	r23,r19
 80046d4:	94c09336 	bltu	r18,r19,8004924 <__sfvwrite_r+0x37c>
 80046d8:	1881200c 	andi	r2,r3,1152
 80046dc:	10009e1e 	bne	r2,zero,8004958 <__sfvwrite_r+0x3b0>
 80046e0:	81000017 	ldw	r4,0(r16)
 80046e4:	b80d883a 	mov	r6,r23
 80046e8:	e00b883a 	mov	r5,fp
 80046ec:	8004e180 	call	8004e18 <memmove>
 80046f0:	80c00217 	ldw	r3,8(r16)
 80046f4:	81000017 	ldw	r4,0(r16)
 80046f8:	9005883a 	mov	r2,r18
 80046fc:	1ce7c83a 	sub	r19,r3,r19
 8004700:	25cf883a 	add	r7,r4,r23
 8004704:	84c00215 	stw	r19,8(r16)
 8004708:	81c00015 	stw	r7,0(r16)
 800470c:	a0c00217 	ldw	r3,8(r20)
 8004710:	e0b9883a 	add	fp,fp,r2
 8004714:	90a5c83a 	sub	r18,r18,r2
 8004718:	18a7c83a 	sub	r19,r3,r2
 800471c:	a4c00215 	stw	r19,8(r20)
 8004720:	983fce26 	beq	r19,zero,800465c <__alt_mem_bufferram_out+0xf7e0465c>
 8004724:	80c0030b 	ldhu	r3,12(r16)
 8004728:	903fe61e 	bne	r18,zero,80046c4 <__alt_mem_bufferram_out+0xf7e046c4>
 800472c:	8f000017 	ldw	fp,0(r17)
 8004730:	8c800117 	ldw	r18,4(r17)
 8004734:	8c400204 	addi	r17,r17,8
 8004738:	003fe106 	br	80046c0 <__alt_mem_bufferram_out+0xf7e046c0>
 800473c:	8cc00017 	ldw	r19,0(r17)
 8004740:	8c800117 	ldw	r18,4(r17)
 8004744:	8c400204 	addi	r17,r17,8
 8004748:	003fb306 	br	8004618 <__alt_mem_bufferram_out+0xf7e04618>
 800474c:	0005883a 	mov	r2,zero
 8004750:	f800283a 	ret
 8004754:	81000017 	ldw	r4,0(r16)
 8004758:	80800417 	ldw	r2,16(r16)
 800475c:	11005736 	bltu	r2,r4,80048bc <__sfvwrite_r+0x314>
 8004760:	85c00517 	ldw	r23,20(r16)
 8004764:	95c05536 	bltu	r18,r23,80048bc <__sfvwrite_r+0x314>
 8004768:	00a00034 	movhi	r2,32768
 800476c:	10bfffc4 	addi	r2,r2,-1
 8004770:	9009883a 	mov	r4,r18
 8004774:	1480012e 	bgeu	r2,r18,800477c <__sfvwrite_r+0x1d4>
 8004778:	1009883a 	mov	r4,r2
 800477c:	b80b883a 	mov	r5,r23
 8004780:	80060e40 	call	80060e4 <__divsi3>
 8004784:	15cf383a 	mul	r7,r2,r23
 8004788:	81400717 	ldw	r5,28(r16)
 800478c:	80800917 	ldw	r2,36(r16)
 8004790:	e00d883a 	mov	r6,fp
 8004794:	a809883a 	mov	r4,r21
 8004798:	103ee83a 	callr	r2
 800479c:	00bfdb16 	blt	zero,r2,800470c <__alt_mem_bufferram_out+0xf7e0470c>
 80047a0:	8080030b 	ldhu	r2,12(r16)
 80047a4:	10801014 	ori	r2,r2,64
 80047a8:	8080030d 	sth	r2,12(r16)
 80047ac:	00bfffc4 	movi	r2,-1
 80047b0:	003fab06 	br	8004660 <__alt_mem_bufferram_out+0xf7e04660>
 80047b4:	0027883a 	mov	r19,zero
 80047b8:	0011883a 	mov	r8,zero
 80047bc:	0039883a 	mov	fp,zero
 80047c0:	0025883a 	mov	r18,zero
 80047c4:	90001f26 	beq	r18,zero,8004844 <__sfvwrite_r+0x29c>
 80047c8:	40005a26 	beq	r8,zero,8004934 <__sfvwrite_r+0x38c>
 80047cc:	982d883a 	mov	r22,r19
 80047d0:	94c0012e 	bgeu	r18,r19,80047d8 <__sfvwrite_r+0x230>
 80047d4:	902d883a 	mov	r22,r18
 80047d8:	81000017 	ldw	r4,0(r16)
 80047dc:	80800417 	ldw	r2,16(r16)
 80047e0:	b02f883a 	mov	r23,r22
 80047e4:	81c00517 	ldw	r7,20(r16)
 80047e8:	1100032e 	bgeu	r2,r4,80047f8 <__sfvwrite_r+0x250>
 80047ec:	80c00217 	ldw	r3,8(r16)
 80047f0:	38c7883a 	add	r3,r7,r3
 80047f4:	1d801816 	blt	r3,r22,8004858 <__sfvwrite_r+0x2b0>
 80047f8:	b1c03e16 	blt	r22,r7,80048f4 <__sfvwrite_r+0x34c>
 80047fc:	80800917 	ldw	r2,36(r16)
 8004800:	81400717 	ldw	r5,28(r16)
 8004804:	e00d883a 	mov	r6,fp
 8004808:	da000115 	stw	r8,4(sp)
 800480c:	a809883a 	mov	r4,r21
 8004810:	103ee83a 	callr	r2
 8004814:	102f883a 	mov	r23,r2
 8004818:	da000117 	ldw	r8,4(sp)
 800481c:	00bfe00e 	bge	zero,r2,80047a0 <__alt_mem_bufferram_out+0xf7e047a0>
 8004820:	9de7c83a 	sub	r19,r19,r23
 8004824:	98001f26 	beq	r19,zero,80048a4 <__sfvwrite_r+0x2fc>
 8004828:	a0800217 	ldw	r2,8(r20)
 800482c:	e5f9883a 	add	fp,fp,r23
 8004830:	95e5c83a 	sub	r18,r18,r23
 8004834:	15efc83a 	sub	r23,r2,r23
 8004838:	a5c00215 	stw	r23,8(r20)
 800483c:	b83f8726 	beq	r23,zero,800465c <__alt_mem_bufferram_out+0xf7e0465c>
 8004840:	903fe11e 	bne	r18,zero,80047c8 <__alt_mem_bufferram_out+0xf7e047c8>
 8004844:	8f000017 	ldw	fp,0(r17)
 8004848:	8c800117 	ldw	r18,4(r17)
 800484c:	0011883a 	mov	r8,zero
 8004850:	8c400204 	addi	r17,r17,8
 8004854:	003fdb06 	br	80047c4 <__alt_mem_bufferram_out+0xf7e047c4>
 8004858:	180d883a 	mov	r6,r3
 800485c:	e00b883a 	mov	r5,fp
 8004860:	da000115 	stw	r8,4(sp)
 8004864:	d8c00015 	stw	r3,0(sp)
 8004868:	8004e180 	call	8004e18 <memmove>
 800486c:	d8c00017 	ldw	r3,0(sp)
 8004870:	80800017 	ldw	r2,0(r16)
 8004874:	800b883a 	mov	r5,r16
 8004878:	a809883a 	mov	r4,r21
 800487c:	10c5883a 	add	r2,r2,r3
 8004880:	80800015 	stw	r2,0(r16)
 8004884:	d8c00015 	stw	r3,0(sp)
 8004888:	8005d2c0 	call	8005d2c <_fflush_r>
 800488c:	d8c00017 	ldw	r3,0(sp)
 8004890:	da000117 	ldw	r8,4(sp)
 8004894:	103fc21e 	bne	r2,zero,80047a0 <__alt_mem_bufferram_out+0xf7e047a0>
 8004898:	182f883a 	mov	r23,r3
 800489c:	9de7c83a 	sub	r19,r19,r23
 80048a0:	983fe11e 	bne	r19,zero,8004828 <__alt_mem_bufferram_out+0xf7e04828>
 80048a4:	800b883a 	mov	r5,r16
 80048a8:	a809883a 	mov	r4,r21
 80048ac:	8005d2c0 	call	8005d2c <_fflush_r>
 80048b0:	103fbb1e 	bne	r2,zero,80047a0 <__alt_mem_bufferram_out+0xf7e047a0>
 80048b4:	0011883a 	mov	r8,zero
 80048b8:	003fdb06 	br	8004828 <__alt_mem_bufferram_out+0xf7e04828>
 80048bc:	94c0012e 	bgeu	r18,r19,80048c4 <__sfvwrite_r+0x31c>
 80048c0:	9027883a 	mov	r19,r18
 80048c4:	980d883a 	mov	r6,r19
 80048c8:	e00b883a 	mov	r5,fp
 80048cc:	8004e180 	call	8004e18 <memmove>
 80048d0:	80800217 	ldw	r2,8(r16)
 80048d4:	80c00017 	ldw	r3,0(r16)
 80048d8:	14c5c83a 	sub	r2,r2,r19
 80048dc:	1cc7883a 	add	r3,r3,r19
 80048e0:	80800215 	stw	r2,8(r16)
 80048e4:	80c00015 	stw	r3,0(r16)
 80048e8:	10004326 	beq	r2,zero,80049f8 <__sfvwrite_r+0x450>
 80048ec:	9805883a 	mov	r2,r19
 80048f0:	003f8606 	br	800470c <__alt_mem_bufferram_out+0xf7e0470c>
 80048f4:	b00d883a 	mov	r6,r22
 80048f8:	e00b883a 	mov	r5,fp
 80048fc:	da000115 	stw	r8,4(sp)
 8004900:	8004e180 	call	8004e18 <memmove>
 8004904:	80800217 	ldw	r2,8(r16)
 8004908:	80c00017 	ldw	r3,0(r16)
 800490c:	da000117 	ldw	r8,4(sp)
 8004910:	1585c83a 	sub	r2,r2,r22
 8004914:	1dad883a 	add	r22,r3,r22
 8004918:	80800215 	stw	r2,8(r16)
 800491c:	85800015 	stw	r22,0(r16)
 8004920:	003fbf06 	br	8004820 <__alt_mem_bufferram_out+0xf7e04820>
 8004924:	81000017 	ldw	r4,0(r16)
 8004928:	9027883a 	mov	r19,r18
 800492c:	902f883a 	mov	r23,r18
 8004930:	003f6c06 	br	80046e4 <__alt_mem_bufferram_out+0xf7e046e4>
 8004934:	900d883a 	mov	r6,r18
 8004938:	01400284 	movi	r5,10
 800493c:	e009883a 	mov	r4,fp
 8004940:	8004bec0 	call	8004bec <memchr>
 8004944:	10003e26 	beq	r2,zero,8004a40 <__sfvwrite_r+0x498>
 8004948:	10800044 	addi	r2,r2,1
 800494c:	1727c83a 	sub	r19,r2,fp
 8004950:	02000044 	movi	r8,1
 8004954:	003f9d06 	br	80047cc <__alt_mem_bufferram_out+0xf7e047cc>
 8004958:	80800517 	ldw	r2,20(r16)
 800495c:	81400417 	ldw	r5,16(r16)
 8004960:	81c00017 	ldw	r7,0(r16)
 8004964:	10a7883a 	add	r19,r2,r2
 8004968:	9885883a 	add	r2,r19,r2
 800496c:	1026d7fa 	srli	r19,r2,31
 8004970:	396dc83a 	sub	r22,r7,r5
 8004974:	b1000044 	addi	r4,r22,1
 8004978:	9885883a 	add	r2,r19,r2
 800497c:	1027d07a 	srai	r19,r2,1
 8004980:	2485883a 	add	r2,r4,r18
 8004984:	980d883a 	mov	r6,r19
 8004988:	9880022e 	bgeu	r19,r2,8004994 <__sfvwrite_r+0x3ec>
 800498c:	1027883a 	mov	r19,r2
 8004990:	100d883a 	mov	r6,r2
 8004994:	18c1000c 	andi	r3,r3,1024
 8004998:	18001c26 	beq	r3,zero,8004a0c <__sfvwrite_r+0x464>
 800499c:	300b883a 	mov	r5,r6
 80049a0:	a809883a 	mov	r4,r21
 80049a4:	8002e780 	call	8002e78 <_malloc_r>
 80049a8:	102f883a 	mov	r23,r2
 80049ac:	10002926 	beq	r2,zero,8004a54 <__sfvwrite_r+0x4ac>
 80049b0:	81400417 	ldw	r5,16(r16)
 80049b4:	b00d883a 	mov	r6,r22
 80049b8:	1009883a 	mov	r4,r2
 80049bc:	8004cd00 	call	8004cd0 <memcpy>
 80049c0:	8080030b 	ldhu	r2,12(r16)
 80049c4:	00fedfc4 	movi	r3,-1153
 80049c8:	10c4703a 	and	r2,r2,r3
 80049cc:	10802014 	ori	r2,r2,128
 80049d0:	8080030d 	sth	r2,12(r16)
 80049d4:	bd89883a 	add	r4,r23,r22
 80049d8:	9d8fc83a 	sub	r7,r19,r22
 80049dc:	85c00415 	stw	r23,16(r16)
 80049e0:	84c00515 	stw	r19,20(r16)
 80049e4:	81000015 	stw	r4,0(r16)
 80049e8:	9027883a 	mov	r19,r18
 80049ec:	81c00215 	stw	r7,8(r16)
 80049f0:	902f883a 	mov	r23,r18
 80049f4:	003f3b06 	br	80046e4 <__alt_mem_bufferram_out+0xf7e046e4>
 80049f8:	800b883a 	mov	r5,r16
 80049fc:	a809883a 	mov	r4,r21
 8004a00:	8005d2c0 	call	8005d2c <_fflush_r>
 8004a04:	103fb926 	beq	r2,zero,80048ec <__alt_mem_bufferram_out+0xf7e048ec>
 8004a08:	003f6506 	br	80047a0 <__alt_mem_bufferram_out+0xf7e047a0>
 8004a0c:	a809883a 	mov	r4,r21
 8004a10:	8004f740 	call	8004f74 <_realloc_r>
 8004a14:	102f883a 	mov	r23,r2
 8004a18:	103fee1e 	bne	r2,zero,80049d4 <__alt_mem_bufferram_out+0xf7e049d4>
 8004a1c:	81400417 	ldw	r5,16(r16)
 8004a20:	a809883a 	mov	r4,r21
 8004a24:	80042980 	call	8004298 <_free_r>
 8004a28:	8080030b 	ldhu	r2,12(r16)
 8004a2c:	00ffdfc4 	movi	r3,-129
 8004a30:	1884703a 	and	r2,r3,r2
 8004a34:	00c00304 	movi	r3,12
 8004a38:	a8c00015 	stw	r3,0(r21)
 8004a3c:	003f5906 	br	80047a4 <__alt_mem_bufferram_out+0xf7e047a4>
 8004a40:	94c00044 	addi	r19,r18,1
 8004a44:	02000044 	movi	r8,1
 8004a48:	003f6006 	br	80047cc <__alt_mem_bufferram_out+0xf7e047cc>
 8004a4c:	00bfffc4 	movi	r2,-1
 8004a50:	003f0306 	br	8004660 <__alt_mem_bufferram_out+0xf7e04660>
 8004a54:	00800304 	movi	r2,12
 8004a58:	a8800015 	stw	r2,0(r21)
 8004a5c:	8080030b 	ldhu	r2,12(r16)
 8004a60:	003f5006 	br	80047a4 <__alt_mem_bufferram_out+0xf7e047a4>

08004a64 <_fwalk>:
 8004a64:	defff704 	addi	sp,sp,-36
 8004a68:	dd000415 	stw	r20,16(sp)
 8004a6c:	dfc00815 	stw	ra,32(sp)
 8004a70:	ddc00715 	stw	r23,28(sp)
 8004a74:	dd800615 	stw	r22,24(sp)
 8004a78:	dd400515 	stw	r21,20(sp)
 8004a7c:	dcc00315 	stw	r19,12(sp)
 8004a80:	dc800215 	stw	r18,8(sp)
 8004a84:	dc400115 	stw	r17,4(sp)
 8004a88:	dc000015 	stw	r16,0(sp)
 8004a8c:	2500b804 	addi	r20,r4,736
 8004a90:	a0002326 	beq	r20,zero,8004b20 <_fwalk+0xbc>
 8004a94:	282b883a 	mov	r21,r5
 8004a98:	002f883a 	mov	r23,zero
 8004a9c:	05800044 	movi	r22,1
 8004aa0:	04ffffc4 	movi	r19,-1
 8004aa4:	a4400117 	ldw	r17,4(r20)
 8004aa8:	a4800217 	ldw	r18,8(r20)
 8004aac:	8c7fffc4 	addi	r17,r17,-1
 8004ab0:	88000d16 	blt	r17,zero,8004ae8 <_fwalk+0x84>
 8004ab4:	94000304 	addi	r16,r18,12
 8004ab8:	94800384 	addi	r18,r18,14
 8004abc:	8080000b 	ldhu	r2,0(r16)
 8004ac0:	8c7fffc4 	addi	r17,r17,-1
 8004ac4:	813ffd04 	addi	r4,r16,-12
 8004ac8:	b080042e 	bgeu	r22,r2,8004adc <_fwalk+0x78>
 8004acc:	9080000f 	ldh	r2,0(r18)
 8004ad0:	14c00226 	beq	r2,r19,8004adc <_fwalk+0x78>
 8004ad4:	a83ee83a 	callr	r21
 8004ad8:	b8aeb03a 	or	r23,r23,r2
 8004adc:	84001a04 	addi	r16,r16,104
 8004ae0:	94801a04 	addi	r18,r18,104
 8004ae4:	8cfff51e 	bne	r17,r19,8004abc <__alt_mem_bufferram_out+0xf7e04abc>
 8004ae8:	a5000017 	ldw	r20,0(r20)
 8004aec:	a03fed1e 	bne	r20,zero,8004aa4 <__alt_mem_bufferram_out+0xf7e04aa4>
 8004af0:	b805883a 	mov	r2,r23
 8004af4:	dfc00817 	ldw	ra,32(sp)
 8004af8:	ddc00717 	ldw	r23,28(sp)
 8004afc:	dd800617 	ldw	r22,24(sp)
 8004b00:	dd400517 	ldw	r21,20(sp)
 8004b04:	dd000417 	ldw	r20,16(sp)
 8004b08:	dcc00317 	ldw	r19,12(sp)
 8004b0c:	dc800217 	ldw	r18,8(sp)
 8004b10:	dc400117 	ldw	r17,4(sp)
 8004b14:	dc000017 	ldw	r16,0(sp)
 8004b18:	dec00904 	addi	sp,sp,36
 8004b1c:	f800283a 	ret
 8004b20:	002f883a 	mov	r23,zero
 8004b24:	003ff206 	br	8004af0 <__alt_mem_bufferram_out+0xf7e04af0>

08004b28 <_fwalk_reent>:
 8004b28:	defff704 	addi	sp,sp,-36
 8004b2c:	dd000415 	stw	r20,16(sp)
 8004b30:	dfc00815 	stw	ra,32(sp)
 8004b34:	ddc00715 	stw	r23,28(sp)
 8004b38:	dd800615 	stw	r22,24(sp)
 8004b3c:	dd400515 	stw	r21,20(sp)
 8004b40:	dcc00315 	stw	r19,12(sp)
 8004b44:	dc800215 	stw	r18,8(sp)
 8004b48:	dc400115 	stw	r17,4(sp)
 8004b4c:	dc000015 	stw	r16,0(sp)
 8004b50:	2500b804 	addi	r20,r4,736
 8004b54:	a0002326 	beq	r20,zero,8004be4 <_fwalk_reent+0xbc>
 8004b58:	282b883a 	mov	r21,r5
 8004b5c:	2027883a 	mov	r19,r4
 8004b60:	002f883a 	mov	r23,zero
 8004b64:	05800044 	movi	r22,1
 8004b68:	04bfffc4 	movi	r18,-1
 8004b6c:	a4400117 	ldw	r17,4(r20)
 8004b70:	a4000217 	ldw	r16,8(r20)
 8004b74:	8c7fffc4 	addi	r17,r17,-1
 8004b78:	88000c16 	blt	r17,zero,8004bac <_fwalk_reent+0x84>
 8004b7c:	84000304 	addi	r16,r16,12
 8004b80:	8080000b 	ldhu	r2,0(r16)
 8004b84:	8c7fffc4 	addi	r17,r17,-1
 8004b88:	817ffd04 	addi	r5,r16,-12
 8004b8c:	b080052e 	bgeu	r22,r2,8004ba4 <_fwalk_reent+0x7c>
 8004b90:	8080008f 	ldh	r2,2(r16)
 8004b94:	9809883a 	mov	r4,r19
 8004b98:	14800226 	beq	r2,r18,8004ba4 <_fwalk_reent+0x7c>
 8004b9c:	a83ee83a 	callr	r21
 8004ba0:	b8aeb03a 	or	r23,r23,r2
 8004ba4:	84001a04 	addi	r16,r16,104
 8004ba8:	8cbff51e 	bne	r17,r18,8004b80 <__alt_mem_bufferram_out+0xf7e04b80>
 8004bac:	a5000017 	ldw	r20,0(r20)
 8004bb0:	a03fee1e 	bne	r20,zero,8004b6c <__alt_mem_bufferram_out+0xf7e04b6c>
 8004bb4:	b805883a 	mov	r2,r23
 8004bb8:	dfc00817 	ldw	ra,32(sp)
 8004bbc:	ddc00717 	ldw	r23,28(sp)
 8004bc0:	dd800617 	ldw	r22,24(sp)
 8004bc4:	dd400517 	ldw	r21,20(sp)
 8004bc8:	dd000417 	ldw	r20,16(sp)
 8004bcc:	dcc00317 	ldw	r19,12(sp)
 8004bd0:	dc800217 	ldw	r18,8(sp)
 8004bd4:	dc400117 	ldw	r17,4(sp)
 8004bd8:	dc000017 	ldw	r16,0(sp)
 8004bdc:	dec00904 	addi	sp,sp,36
 8004be0:	f800283a 	ret
 8004be4:	002f883a 	mov	r23,zero
 8004be8:	003ff206 	br	8004bb4 <__alt_mem_bufferram_out+0xf7e04bb4>

08004bec <memchr>:
 8004bec:	208000cc 	andi	r2,r4,3
 8004bf0:	280f883a 	mov	r7,r5
 8004bf4:	10003426 	beq	r2,zero,8004cc8 <memchr+0xdc>
 8004bf8:	30bfffc4 	addi	r2,r6,-1
 8004bfc:	30001a26 	beq	r6,zero,8004c68 <memchr+0x7c>
 8004c00:	20c00003 	ldbu	r3,0(r4)
 8004c04:	29803fcc 	andi	r6,r5,255
 8004c08:	30c0051e 	bne	r6,r3,8004c20 <memchr+0x34>
 8004c0c:	00001806 	br	8004c70 <memchr+0x84>
 8004c10:	10001526 	beq	r2,zero,8004c68 <memchr+0x7c>
 8004c14:	20c00003 	ldbu	r3,0(r4)
 8004c18:	10bfffc4 	addi	r2,r2,-1
 8004c1c:	30c01426 	beq	r6,r3,8004c70 <memchr+0x84>
 8004c20:	21000044 	addi	r4,r4,1
 8004c24:	20c000cc 	andi	r3,r4,3
 8004c28:	183ff91e 	bne	r3,zero,8004c10 <__alt_mem_bufferram_out+0xf7e04c10>
 8004c2c:	020000c4 	movi	r8,3
 8004c30:	40801136 	bltu	r8,r2,8004c78 <memchr+0x8c>
 8004c34:	10000c26 	beq	r2,zero,8004c68 <memchr+0x7c>
 8004c38:	20c00003 	ldbu	r3,0(r4)
 8004c3c:	29403fcc 	andi	r5,r5,255
 8004c40:	28c00b26 	beq	r5,r3,8004c70 <memchr+0x84>
 8004c44:	20c00044 	addi	r3,r4,1
 8004c48:	39803fcc 	andi	r6,r7,255
 8004c4c:	2089883a 	add	r4,r4,r2
 8004c50:	00000306 	br	8004c60 <memchr+0x74>
 8004c54:	18c00044 	addi	r3,r3,1
 8004c58:	197fffc3 	ldbu	r5,-1(r3)
 8004c5c:	31400526 	beq	r6,r5,8004c74 <memchr+0x88>
 8004c60:	1805883a 	mov	r2,r3
 8004c64:	20fffb1e 	bne	r4,r3,8004c54 <__alt_mem_bufferram_out+0xf7e04c54>
 8004c68:	0005883a 	mov	r2,zero
 8004c6c:	f800283a 	ret
 8004c70:	2005883a 	mov	r2,r4
 8004c74:	f800283a 	ret
 8004c78:	28c03fcc 	andi	r3,r5,255
 8004c7c:	1812923a 	slli	r9,r3,8
 8004c80:	02ffbff4 	movhi	r11,65279
 8004c84:	02a02074 	movhi	r10,32897
 8004c88:	48d2b03a 	or	r9,r9,r3
 8004c8c:	4806943a 	slli	r3,r9,16
 8004c90:	5affbfc4 	addi	r11,r11,-257
 8004c94:	52a02004 	addi	r10,r10,-32640
 8004c98:	48d2b03a 	or	r9,r9,r3
 8004c9c:	20c00017 	ldw	r3,0(r4)
 8004ca0:	48c6f03a 	xor	r3,r9,r3
 8004ca4:	1acd883a 	add	r6,r3,r11
 8004ca8:	00c6303a 	nor	r3,zero,r3
 8004cac:	30c6703a 	and	r3,r6,r3
 8004cb0:	1a86703a 	and	r3,r3,r10
 8004cb4:	183fe01e 	bne	r3,zero,8004c38 <__alt_mem_bufferram_out+0xf7e04c38>
 8004cb8:	10bfff04 	addi	r2,r2,-4
 8004cbc:	21000104 	addi	r4,r4,4
 8004cc0:	40bff636 	bltu	r8,r2,8004c9c <__alt_mem_bufferram_out+0xf7e04c9c>
 8004cc4:	003fdb06 	br	8004c34 <__alt_mem_bufferram_out+0xf7e04c34>
 8004cc8:	3005883a 	mov	r2,r6
 8004ccc:	003fd706 	br	8004c2c <__alt_mem_bufferram_out+0xf7e04c2c>

08004cd0 <memcpy>:
 8004cd0:	defffd04 	addi	sp,sp,-12
 8004cd4:	dfc00215 	stw	ra,8(sp)
 8004cd8:	dc400115 	stw	r17,4(sp)
 8004cdc:	dc000015 	stw	r16,0(sp)
 8004ce0:	00c003c4 	movi	r3,15
 8004ce4:	2005883a 	mov	r2,r4
 8004ce8:	1980452e 	bgeu	r3,r6,8004e00 <memcpy+0x130>
 8004cec:	2906b03a 	or	r3,r5,r4
 8004cf0:	18c000cc 	andi	r3,r3,3
 8004cf4:	1800441e 	bne	r3,zero,8004e08 <memcpy+0x138>
 8004cf8:	347ffc04 	addi	r17,r6,-16
 8004cfc:	8822d13a 	srli	r17,r17,4
 8004d00:	28c00104 	addi	r3,r5,4
 8004d04:	23400104 	addi	r13,r4,4
 8004d08:	8820913a 	slli	r16,r17,4
 8004d0c:	2b000204 	addi	r12,r5,8
 8004d10:	22c00204 	addi	r11,r4,8
 8004d14:	84000504 	addi	r16,r16,20
 8004d18:	2a800304 	addi	r10,r5,12
 8004d1c:	22400304 	addi	r9,r4,12
 8004d20:	2c21883a 	add	r16,r5,r16
 8004d24:	2811883a 	mov	r8,r5
 8004d28:	200f883a 	mov	r7,r4
 8004d2c:	41000017 	ldw	r4,0(r8)
 8004d30:	1fc00017 	ldw	ra,0(r3)
 8004d34:	63c00017 	ldw	r15,0(r12)
 8004d38:	39000015 	stw	r4,0(r7)
 8004d3c:	53800017 	ldw	r14,0(r10)
 8004d40:	6fc00015 	stw	ra,0(r13)
 8004d44:	5bc00015 	stw	r15,0(r11)
 8004d48:	4b800015 	stw	r14,0(r9)
 8004d4c:	18c00404 	addi	r3,r3,16
 8004d50:	39c00404 	addi	r7,r7,16
 8004d54:	42000404 	addi	r8,r8,16
 8004d58:	6b400404 	addi	r13,r13,16
 8004d5c:	63000404 	addi	r12,r12,16
 8004d60:	5ac00404 	addi	r11,r11,16
 8004d64:	52800404 	addi	r10,r10,16
 8004d68:	4a400404 	addi	r9,r9,16
 8004d6c:	1c3fef1e 	bne	r3,r16,8004d2c <__alt_mem_bufferram_out+0xf7e04d2c>
 8004d70:	89c00044 	addi	r7,r17,1
 8004d74:	380e913a 	slli	r7,r7,4
 8004d78:	310003cc 	andi	r4,r6,15
 8004d7c:	02c000c4 	movi	r11,3
 8004d80:	11c7883a 	add	r3,r2,r7
 8004d84:	29cb883a 	add	r5,r5,r7
 8004d88:	5900212e 	bgeu	r11,r4,8004e10 <memcpy+0x140>
 8004d8c:	1813883a 	mov	r9,r3
 8004d90:	2811883a 	mov	r8,r5
 8004d94:	200f883a 	mov	r7,r4
 8004d98:	42800017 	ldw	r10,0(r8)
 8004d9c:	4a400104 	addi	r9,r9,4
 8004da0:	39ffff04 	addi	r7,r7,-4
 8004da4:	4abfff15 	stw	r10,-4(r9)
 8004da8:	42000104 	addi	r8,r8,4
 8004dac:	59fffa36 	bltu	r11,r7,8004d98 <__alt_mem_bufferram_out+0xf7e04d98>
 8004db0:	213fff04 	addi	r4,r4,-4
 8004db4:	2008d0ba 	srli	r4,r4,2
 8004db8:	318000cc 	andi	r6,r6,3
 8004dbc:	21000044 	addi	r4,r4,1
 8004dc0:	2109883a 	add	r4,r4,r4
 8004dc4:	2109883a 	add	r4,r4,r4
 8004dc8:	1907883a 	add	r3,r3,r4
 8004dcc:	290b883a 	add	r5,r5,r4
 8004dd0:	30000626 	beq	r6,zero,8004dec <memcpy+0x11c>
 8004dd4:	198d883a 	add	r6,r3,r6
 8004dd8:	29c00003 	ldbu	r7,0(r5)
 8004ddc:	18c00044 	addi	r3,r3,1
 8004de0:	29400044 	addi	r5,r5,1
 8004de4:	19ffffc5 	stb	r7,-1(r3)
 8004de8:	19bffb1e 	bne	r3,r6,8004dd8 <__alt_mem_bufferram_out+0xf7e04dd8>
 8004dec:	dfc00217 	ldw	ra,8(sp)
 8004df0:	dc400117 	ldw	r17,4(sp)
 8004df4:	dc000017 	ldw	r16,0(sp)
 8004df8:	dec00304 	addi	sp,sp,12
 8004dfc:	f800283a 	ret
 8004e00:	2007883a 	mov	r3,r4
 8004e04:	003ff206 	br	8004dd0 <__alt_mem_bufferram_out+0xf7e04dd0>
 8004e08:	2007883a 	mov	r3,r4
 8004e0c:	003ff106 	br	8004dd4 <__alt_mem_bufferram_out+0xf7e04dd4>
 8004e10:	200d883a 	mov	r6,r4
 8004e14:	003fee06 	br	8004dd0 <__alt_mem_bufferram_out+0xf7e04dd0>

08004e18 <memmove>:
 8004e18:	2005883a 	mov	r2,r4
 8004e1c:	29000b2e 	bgeu	r5,r4,8004e4c <memmove+0x34>
 8004e20:	298f883a 	add	r7,r5,r6
 8004e24:	21c0092e 	bgeu	r4,r7,8004e4c <memmove+0x34>
 8004e28:	2187883a 	add	r3,r4,r6
 8004e2c:	198bc83a 	sub	r5,r3,r6
 8004e30:	30004826 	beq	r6,zero,8004f54 <memmove+0x13c>
 8004e34:	39ffffc4 	addi	r7,r7,-1
 8004e38:	39000003 	ldbu	r4,0(r7)
 8004e3c:	18ffffc4 	addi	r3,r3,-1
 8004e40:	19000005 	stb	r4,0(r3)
 8004e44:	28fffb1e 	bne	r5,r3,8004e34 <__alt_mem_bufferram_out+0xf7e04e34>
 8004e48:	f800283a 	ret
 8004e4c:	00c003c4 	movi	r3,15
 8004e50:	1980412e 	bgeu	r3,r6,8004f58 <memmove+0x140>
 8004e54:	2886b03a 	or	r3,r5,r2
 8004e58:	18c000cc 	andi	r3,r3,3
 8004e5c:	1800401e 	bne	r3,zero,8004f60 <memmove+0x148>
 8004e60:	33fffc04 	addi	r15,r6,-16
 8004e64:	781ed13a 	srli	r15,r15,4
 8004e68:	28c00104 	addi	r3,r5,4
 8004e6c:	13400104 	addi	r13,r2,4
 8004e70:	781c913a 	slli	r14,r15,4
 8004e74:	2b000204 	addi	r12,r5,8
 8004e78:	12c00204 	addi	r11,r2,8
 8004e7c:	73800504 	addi	r14,r14,20
 8004e80:	2a800304 	addi	r10,r5,12
 8004e84:	12400304 	addi	r9,r2,12
 8004e88:	2b9d883a 	add	r14,r5,r14
 8004e8c:	2811883a 	mov	r8,r5
 8004e90:	100f883a 	mov	r7,r2
 8004e94:	41000017 	ldw	r4,0(r8)
 8004e98:	39c00404 	addi	r7,r7,16
 8004e9c:	18c00404 	addi	r3,r3,16
 8004ea0:	393ffc15 	stw	r4,-16(r7)
 8004ea4:	193ffc17 	ldw	r4,-16(r3)
 8004ea8:	6b400404 	addi	r13,r13,16
 8004eac:	5ac00404 	addi	r11,r11,16
 8004eb0:	693ffc15 	stw	r4,-16(r13)
 8004eb4:	61000017 	ldw	r4,0(r12)
 8004eb8:	4a400404 	addi	r9,r9,16
 8004ebc:	42000404 	addi	r8,r8,16
 8004ec0:	593ffc15 	stw	r4,-16(r11)
 8004ec4:	51000017 	ldw	r4,0(r10)
 8004ec8:	63000404 	addi	r12,r12,16
 8004ecc:	52800404 	addi	r10,r10,16
 8004ed0:	493ffc15 	stw	r4,-16(r9)
 8004ed4:	1bbfef1e 	bne	r3,r14,8004e94 <__alt_mem_bufferram_out+0xf7e04e94>
 8004ed8:	79000044 	addi	r4,r15,1
 8004edc:	2008913a 	slli	r4,r4,4
 8004ee0:	328003cc 	andi	r10,r6,15
 8004ee4:	02c000c4 	movi	r11,3
 8004ee8:	1107883a 	add	r3,r2,r4
 8004eec:	290b883a 	add	r5,r5,r4
 8004ef0:	5a801e2e 	bgeu	r11,r10,8004f6c <memmove+0x154>
 8004ef4:	1813883a 	mov	r9,r3
 8004ef8:	2811883a 	mov	r8,r5
 8004efc:	500f883a 	mov	r7,r10
 8004f00:	41000017 	ldw	r4,0(r8)
 8004f04:	4a400104 	addi	r9,r9,4
 8004f08:	39ffff04 	addi	r7,r7,-4
 8004f0c:	493fff15 	stw	r4,-4(r9)
 8004f10:	42000104 	addi	r8,r8,4
 8004f14:	59fffa36 	bltu	r11,r7,8004f00 <__alt_mem_bufferram_out+0xf7e04f00>
 8004f18:	513fff04 	addi	r4,r10,-4
 8004f1c:	2008d0ba 	srli	r4,r4,2
 8004f20:	318000cc 	andi	r6,r6,3
 8004f24:	21000044 	addi	r4,r4,1
 8004f28:	2109883a 	add	r4,r4,r4
 8004f2c:	2109883a 	add	r4,r4,r4
 8004f30:	1907883a 	add	r3,r3,r4
 8004f34:	290b883a 	add	r5,r5,r4
 8004f38:	30000b26 	beq	r6,zero,8004f68 <memmove+0x150>
 8004f3c:	198d883a 	add	r6,r3,r6
 8004f40:	29c00003 	ldbu	r7,0(r5)
 8004f44:	18c00044 	addi	r3,r3,1
 8004f48:	29400044 	addi	r5,r5,1
 8004f4c:	19ffffc5 	stb	r7,-1(r3)
 8004f50:	19bffb1e 	bne	r3,r6,8004f40 <__alt_mem_bufferram_out+0xf7e04f40>
 8004f54:	f800283a 	ret
 8004f58:	1007883a 	mov	r3,r2
 8004f5c:	003ff606 	br	8004f38 <__alt_mem_bufferram_out+0xf7e04f38>
 8004f60:	1007883a 	mov	r3,r2
 8004f64:	003ff506 	br	8004f3c <__alt_mem_bufferram_out+0xf7e04f3c>
 8004f68:	f800283a 	ret
 8004f6c:	500d883a 	mov	r6,r10
 8004f70:	003ff106 	br	8004f38 <__alt_mem_bufferram_out+0xf7e04f38>

08004f74 <_realloc_r>:
 8004f74:	defff604 	addi	sp,sp,-40
 8004f78:	dc800215 	stw	r18,8(sp)
 8004f7c:	dfc00915 	stw	ra,36(sp)
 8004f80:	df000815 	stw	fp,32(sp)
 8004f84:	ddc00715 	stw	r23,28(sp)
 8004f88:	dd800615 	stw	r22,24(sp)
 8004f8c:	dd400515 	stw	r21,20(sp)
 8004f90:	dd000415 	stw	r20,16(sp)
 8004f94:	dcc00315 	stw	r19,12(sp)
 8004f98:	dc400115 	stw	r17,4(sp)
 8004f9c:	dc000015 	stw	r16,0(sp)
 8004fa0:	3025883a 	mov	r18,r6
 8004fa4:	2800b726 	beq	r5,zero,8005284 <_realloc_r+0x310>
 8004fa8:	282b883a 	mov	r21,r5
 8004fac:	2029883a 	mov	r20,r4
 8004fb0:	80069d40 	call	80069d4 <__malloc_lock>
 8004fb4:	a8bfff17 	ldw	r2,-4(r21)
 8004fb8:	043fff04 	movi	r16,-4
 8004fbc:	90c002c4 	addi	r3,r18,11
 8004fc0:	01000584 	movi	r4,22
 8004fc4:	acfffe04 	addi	r19,r21,-8
 8004fc8:	1420703a 	and	r16,r2,r16
 8004fcc:	20c0332e 	bgeu	r4,r3,800509c <_realloc_r+0x128>
 8004fd0:	047ffe04 	movi	r17,-8
 8004fd4:	1c62703a 	and	r17,r3,r17
 8004fd8:	8807883a 	mov	r3,r17
 8004fdc:	88005816 	blt	r17,zero,8005140 <_realloc_r+0x1cc>
 8004fe0:	8c805736 	bltu	r17,r18,8005140 <_realloc_r+0x1cc>
 8004fe4:	80c0300e 	bge	r16,r3,80050a8 <_realloc_r+0x134>
 8004fe8:	07020074 	movhi	fp,2049
 8004fec:	e726bf04 	addi	fp,fp,-25860
 8004ff0:	e1c00217 	ldw	r7,8(fp)
 8004ff4:	9c09883a 	add	r4,r19,r16
 8004ff8:	22000117 	ldw	r8,4(r4)
 8004ffc:	21c06326 	beq	r4,r7,800518c <_realloc_r+0x218>
 8005000:	017fff84 	movi	r5,-2
 8005004:	414a703a 	and	r5,r8,r5
 8005008:	214b883a 	add	r5,r4,r5
 800500c:	29800117 	ldw	r6,4(r5)
 8005010:	3180004c 	andi	r6,r6,1
 8005014:	30003f26 	beq	r6,zero,8005114 <_realloc_r+0x1a0>
 8005018:	1080004c 	andi	r2,r2,1
 800501c:	10008326 	beq	r2,zero,800522c <_realloc_r+0x2b8>
 8005020:	900b883a 	mov	r5,r18
 8005024:	a009883a 	mov	r4,r20
 8005028:	8002e780 	call	8002e78 <_malloc_r>
 800502c:	1025883a 	mov	r18,r2
 8005030:	10011e26 	beq	r2,zero,80054ac <_realloc_r+0x538>
 8005034:	a93fff17 	ldw	r4,-4(r21)
 8005038:	10fffe04 	addi	r3,r2,-8
 800503c:	00bfff84 	movi	r2,-2
 8005040:	2084703a 	and	r2,r4,r2
 8005044:	9885883a 	add	r2,r19,r2
 8005048:	1880ee26 	beq	r3,r2,8005404 <_realloc_r+0x490>
 800504c:	81bfff04 	addi	r6,r16,-4
 8005050:	00800904 	movi	r2,36
 8005054:	1180b836 	bltu	r2,r6,8005338 <_realloc_r+0x3c4>
 8005058:	00c004c4 	movi	r3,19
 800505c:	19809636 	bltu	r3,r6,80052b8 <_realloc_r+0x344>
 8005060:	9005883a 	mov	r2,r18
 8005064:	a807883a 	mov	r3,r21
 8005068:	19000017 	ldw	r4,0(r3)
 800506c:	11000015 	stw	r4,0(r2)
 8005070:	19000117 	ldw	r4,4(r3)
 8005074:	11000115 	stw	r4,4(r2)
 8005078:	18c00217 	ldw	r3,8(r3)
 800507c:	10c00215 	stw	r3,8(r2)
 8005080:	a80b883a 	mov	r5,r21
 8005084:	a009883a 	mov	r4,r20
 8005088:	80042980 	call	8004298 <_free_r>
 800508c:	a009883a 	mov	r4,r20
 8005090:	80069f80 	call	80069f8 <__malloc_unlock>
 8005094:	9005883a 	mov	r2,r18
 8005098:	00001206 	br	80050e4 <_realloc_r+0x170>
 800509c:	00c00404 	movi	r3,16
 80050a0:	1823883a 	mov	r17,r3
 80050a4:	003fce06 	br	8004fe0 <__alt_mem_bufferram_out+0xf7e04fe0>
 80050a8:	a825883a 	mov	r18,r21
 80050ac:	8445c83a 	sub	r2,r16,r17
 80050b0:	00c003c4 	movi	r3,15
 80050b4:	18802636 	bltu	r3,r2,8005150 <_realloc_r+0x1dc>
 80050b8:	99800117 	ldw	r6,4(r19)
 80050bc:	9c07883a 	add	r3,r19,r16
 80050c0:	3180004c 	andi	r6,r6,1
 80050c4:	3420b03a 	or	r16,r6,r16
 80050c8:	9c000115 	stw	r16,4(r19)
 80050cc:	18800117 	ldw	r2,4(r3)
 80050d0:	10800054 	ori	r2,r2,1
 80050d4:	18800115 	stw	r2,4(r3)
 80050d8:	a009883a 	mov	r4,r20
 80050dc:	80069f80 	call	80069f8 <__malloc_unlock>
 80050e0:	9005883a 	mov	r2,r18
 80050e4:	dfc00917 	ldw	ra,36(sp)
 80050e8:	df000817 	ldw	fp,32(sp)
 80050ec:	ddc00717 	ldw	r23,28(sp)
 80050f0:	dd800617 	ldw	r22,24(sp)
 80050f4:	dd400517 	ldw	r21,20(sp)
 80050f8:	dd000417 	ldw	r20,16(sp)
 80050fc:	dcc00317 	ldw	r19,12(sp)
 8005100:	dc800217 	ldw	r18,8(sp)
 8005104:	dc400117 	ldw	r17,4(sp)
 8005108:	dc000017 	ldw	r16,0(sp)
 800510c:	dec00a04 	addi	sp,sp,40
 8005110:	f800283a 	ret
 8005114:	017fff04 	movi	r5,-4
 8005118:	414a703a 	and	r5,r8,r5
 800511c:	814d883a 	add	r6,r16,r5
 8005120:	30c01f16 	blt	r6,r3,80051a0 <_realloc_r+0x22c>
 8005124:	20800317 	ldw	r2,12(r4)
 8005128:	20c00217 	ldw	r3,8(r4)
 800512c:	a825883a 	mov	r18,r21
 8005130:	3021883a 	mov	r16,r6
 8005134:	18800315 	stw	r2,12(r3)
 8005138:	10c00215 	stw	r3,8(r2)
 800513c:	003fdb06 	br	80050ac <__alt_mem_bufferram_out+0xf7e050ac>
 8005140:	00800304 	movi	r2,12
 8005144:	a0800015 	stw	r2,0(r20)
 8005148:	0005883a 	mov	r2,zero
 800514c:	003fe506 	br	80050e4 <__alt_mem_bufferram_out+0xf7e050e4>
 8005150:	98c00117 	ldw	r3,4(r19)
 8005154:	9c4b883a 	add	r5,r19,r17
 8005158:	11000054 	ori	r4,r2,1
 800515c:	18c0004c 	andi	r3,r3,1
 8005160:	1c62b03a 	or	r17,r3,r17
 8005164:	9c400115 	stw	r17,4(r19)
 8005168:	29000115 	stw	r4,4(r5)
 800516c:	2885883a 	add	r2,r5,r2
 8005170:	10c00117 	ldw	r3,4(r2)
 8005174:	29400204 	addi	r5,r5,8
 8005178:	a009883a 	mov	r4,r20
 800517c:	18c00054 	ori	r3,r3,1
 8005180:	10c00115 	stw	r3,4(r2)
 8005184:	80042980 	call	8004298 <_free_r>
 8005188:	003fd306 	br	80050d8 <__alt_mem_bufferram_out+0xf7e050d8>
 800518c:	017fff04 	movi	r5,-4
 8005190:	414a703a 	and	r5,r8,r5
 8005194:	89800404 	addi	r6,r17,16
 8005198:	8151883a 	add	r8,r16,r5
 800519c:	4180590e 	bge	r8,r6,8005304 <_realloc_r+0x390>
 80051a0:	1080004c 	andi	r2,r2,1
 80051a4:	103f9e1e 	bne	r2,zero,8005020 <__alt_mem_bufferram_out+0xf7e05020>
 80051a8:	adbffe17 	ldw	r22,-8(r21)
 80051ac:	00bfff04 	movi	r2,-4
 80051b0:	9dadc83a 	sub	r22,r19,r22
 80051b4:	b1800117 	ldw	r6,4(r22)
 80051b8:	3084703a 	and	r2,r6,r2
 80051bc:	20002026 	beq	r4,zero,8005240 <_realloc_r+0x2cc>
 80051c0:	80af883a 	add	r23,r16,r2
 80051c4:	b96f883a 	add	r23,r23,r5
 80051c8:	21c05f26 	beq	r4,r7,8005348 <_realloc_r+0x3d4>
 80051cc:	b8c01c16 	blt	r23,r3,8005240 <_realloc_r+0x2cc>
 80051d0:	20800317 	ldw	r2,12(r4)
 80051d4:	20c00217 	ldw	r3,8(r4)
 80051d8:	81bfff04 	addi	r6,r16,-4
 80051dc:	01000904 	movi	r4,36
 80051e0:	18800315 	stw	r2,12(r3)
 80051e4:	10c00215 	stw	r3,8(r2)
 80051e8:	b0c00217 	ldw	r3,8(r22)
 80051ec:	b0800317 	ldw	r2,12(r22)
 80051f0:	b4800204 	addi	r18,r22,8
 80051f4:	18800315 	stw	r2,12(r3)
 80051f8:	10c00215 	stw	r3,8(r2)
 80051fc:	21801b36 	bltu	r4,r6,800526c <_realloc_r+0x2f8>
 8005200:	008004c4 	movi	r2,19
 8005204:	1180352e 	bgeu	r2,r6,80052dc <_realloc_r+0x368>
 8005208:	a8800017 	ldw	r2,0(r21)
 800520c:	b0800215 	stw	r2,8(r22)
 8005210:	a8800117 	ldw	r2,4(r21)
 8005214:	b0800315 	stw	r2,12(r22)
 8005218:	008006c4 	movi	r2,27
 800521c:	11807f36 	bltu	r2,r6,800541c <_realloc_r+0x4a8>
 8005220:	b0800404 	addi	r2,r22,16
 8005224:	ad400204 	addi	r21,r21,8
 8005228:	00002d06 	br	80052e0 <_realloc_r+0x36c>
 800522c:	adbffe17 	ldw	r22,-8(r21)
 8005230:	00bfff04 	movi	r2,-4
 8005234:	9dadc83a 	sub	r22,r19,r22
 8005238:	b1000117 	ldw	r4,4(r22)
 800523c:	2084703a 	and	r2,r4,r2
 8005240:	b03f7726 	beq	r22,zero,8005020 <__alt_mem_bufferram_out+0xf7e05020>
 8005244:	80af883a 	add	r23,r16,r2
 8005248:	b8ff7516 	blt	r23,r3,8005020 <__alt_mem_bufferram_out+0xf7e05020>
 800524c:	b0800317 	ldw	r2,12(r22)
 8005250:	b0c00217 	ldw	r3,8(r22)
 8005254:	81bfff04 	addi	r6,r16,-4
 8005258:	01000904 	movi	r4,36
 800525c:	18800315 	stw	r2,12(r3)
 8005260:	10c00215 	stw	r3,8(r2)
 8005264:	b4800204 	addi	r18,r22,8
 8005268:	21bfe52e 	bgeu	r4,r6,8005200 <__alt_mem_bufferram_out+0xf7e05200>
 800526c:	a80b883a 	mov	r5,r21
 8005270:	9009883a 	mov	r4,r18
 8005274:	8004e180 	call	8004e18 <memmove>
 8005278:	b821883a 	mov	r16,r23
 800527c:	b027883a 	mov	r19,r22
 8005280:	003f8a06 	br	80050ac <__alt_mem_bufferram_out+0xf7e050ac>
 8005284:	300b883a 	mov	r5,r6
 8005288:	dfc00917 	ldw	ra,36(sp)
 800528c:	df000817 	ldw	fp,32(sp)
 8005290:	ddc00717 	ldw	r23,28(sp)
 8005294:	dd800617 	ldw	r22,24(sp)
 8005298:	dd400517 	ldw	r21,20(sp)
 800529c:	dd000417 	ldw	r20,16(sp)
 80052a0:	dcc00317 	ldw	r19,12(sp)
 80052a4:	dc800217 	ldw	r18,8(sp)
 80052a8:	dc400117 	ldw	r17,4(sp)
 80052ac:	dc000017 	ldw	r16,0(sp)
 80052b0:	dec00a04 	addi	sp,sp,40
 80052b4:	8002e781 	jmpi	8002e78 <_malloc_r>
 80052b8:	a8c00017 	ldw	r3,0(r21)
 80052bc:	90c00015 	stw	r3,0(r18)
 80052c0:	a8c00117 	ldw	r3,4(r21)
 80052c4:	90c00115 	stw	r3,4(r18)
 80052c8:	00c006c4 	movi	r3,27
 80052cc:	19804536 	bltu	r3,r6,80053e4 <_realloc_r+0x470>
 80052d0:	90800204 	addi	r2,r18,8
 80052d4:	a8c00204 	addi	r3,r21,8
 80052d8:	003f6306 	br	8005068 <__alt_mem_bufferram_out+0xf7e05068>
 80052dc:	9005883a 	mov	r2,r18
 80052e0:	a8c00017 	ldw	r3,0(r21)
 80052e4:	b821883a 	mov	r16,r23
 80052e8:	b027883a 	mov	r19,r22
 80052ec:	10c00015 	stw	r3,0(r2)
 80052f0:	a8c00117 	ldw	r3,4(r21)
 80052f4:	10c00115 	stw	r3,4(r2)
 80052f8:	a8c00217 	ldw	r3,8(r21)
 80052fc:	10c00215 	stw	r3,8(r2)
 8005300:	003f6a06 	br	80050ac <__alt_mem_bufferram_out+0xf7e050ac>
 8005304:	9c67883a 	add	r19,r19,r17
 8005308:	4445c83a 	sub	r2,r8,r17
 800530c:	e4c00215 	stw	r19,8(fp)
 8005310:	10800054 	ori	r2,r2,1
 8005314:	98800115 	stw	r2,4(r19)
 8005318:	a8bfff17 	ldw	r2,-4(r21)
 800531c:	a009883a 	mov	r4,r20
 8005320:	1080004c 	andi	r2,r2,1
 8005324:	1462b03a 	or	r17,r2,r17
 8005328:	ac7fff15 	stw	r17,-4(r21)
 800532c:	80069f80 	call	80069f8 <__malloc_unlock>
 8005330:	a805883a 	mov	r2,r21
 8005334:	003f6b06 	br	80050e4 <__alt_mem_bufferram_out+0xf7e050e4>
 8005338:	a80b883a 	mov	r5,r21
 800533c:	9009883a 	mov	r4,r18
 8005340:	8004e180 	call	8004e18 <memmove>
 8005344:	003f4e06 	br	8005080 <__alt_mem_bufferram_out+0xf7e05080>
 8005348:	89000404 	addi	r4,r17,16
 800534c:	b93fbc16 	blt	r23,r4,8005240 <__alt_mem_bufferram_out+0xf7e05240>
 8005350:	b0800317 	ldw	r2,12(r22)
 8005354:	b0c00217 	ldw	r3,8(r22)
 8005358:	81bfff04 	addi	r6,r16,-4
 800535c:	01000904 	movi	r4,36
 8005360:	18800315 	stw	r2,12(r3)
 8005364:	10c00215 	stw	r3,8(r2)
 8005368:	b4800204 	addi	r18,r22,8
 800536c:	21804336 	bltu	r4,r6,800547c <_realloc_r+0x508>
 8005370:	008004c4 	movi	r2,19
 8005374:	11803f2e 	bgeu	r2,r6,8005474 <_realloc_r+0x500>
 8005378:	a8800017 	ldw	r2,0(r21)
 800537c:	b0800215 	stw	r2,8(r22)
 8005380:	a8800117 	ldw	r2,4(r21)
 8005384:	b0800315 	stw	r2,12(r22)
 8005388:	008006c4 	movi	r2,27
 800538c:	11803f36 	bltu	r2,r6,800548c <_realloc_r+0x518>
 8005390:	b0800404 	addi	r2,r22,16
 8005394:	ad400204 	addi	r21,r21,8
 8005398:	a8c00017 	ldw	r3,0(r21)
 800539c:	10c00015 	stw	r3,0(r2)
 80053a0:	a8c00117 	ldw	r3,4(r21)
 80053a4:	10c00115 	stw	r3,4(r2)
 80053a8:	a8c00217 	ldw	r3,8(r21)
 80053ac:	10c00215 	stw	r3,8(r2)
 80053b0:	b447883a 	add	r3,r22,r17
 80053b4:	bc45c83a 	sub	r2,r23,r17
 80053b8:	e0c00215 	stw	r3,8(fp)
 80053bc:	10800054 	ori	r2,r2,1
 80053c0:	18800115 	stw	r2,4(r3)
 80053c4:	b0800117 	ldw	r2,4(r22)
 80053c8:	a009883a 	mov	r4,r20
 80053cc:	1080004c 	andi	r2,r2,1
 80053d0:	1462b03a 	or	r17,r2,r17
 80053d4:	b4400115 	stw	r17,4(r22)
 80053d8:	80069f80 	call	80069f8 <__malloc_unlock>
 80053dc:	9005883a 	mov	r2,r18
 80053e0:	003f4006 	br	80050e4 <__alt_mem_bufferram_out+0xf7e050e4>
 80053e4:	a8c00217 	ldw	r3,8(r21)
 80053e8:	90c00215 	stw	r3,8(r18)
 80053ec:	a8c00317 	ldw	r3,12(r21)
 80053f0:	90c00315 	stw	r3,12(r18)
 80053f4:	30801126 	beq	r6,r2,800543c <_realloc_r+0x4c8>
 80053f8:	90800404 	addi	r2,r18,16
 80053fc:	a8c00404 	addi	r3,r21,16
 8005400:	003f1906 	br	8005068 <__alt_mem_bufferram_out+0xf7e05068>
 8005404:	90ffff17 	ldw	r3,-4(r18)
 8005408:	00bfff04 	movi	r2,-4
 800540c:	a825883a 	mov	r18,r21
 8005410:	1884703a 	and	r2,r3,r2
 8005414:	80a1883a 	add	r16,r16,r2
 8005418:	003f2406 	br	80050ac <__alt_mem_bufferram_out+0xf7e050ac>
 800541c:	a8800217 	ldw	r2,8(r21)
 8005420:	b0800415 	stw	r2,16(r22)
 8005424:	a8800317 	ldw	r2,12(r21)
 8005428:	b0800515 	stw	r2,20(r22)
 800542c:	31000a26 	beq	r6,r4,8005458 <_realloc_r+0x4e4>
 8005430:	b0800604 	addi	r2,r22,24
 8005434:	ad400404 	addi	r21,r21,16
 8005438:	003fa906 	br	80052e0 <__alt_mem_bufferram_out+0xf7e052e0>
 800543c:	a9000417 	ldw	r4,16(r21)
 8005440:	90800604 	addi	r2,r18,24
 8005444:	a8c00604 	addi	r3,r21,24
 8005448:	91000415 	stw	r4,16(r18)
 800544c:	a9000517 	ldw	r4,20(r21)
 8005450:	91000515 	stw	r4,20(r18)
 8005454:	003f0406 	br	8005068 <__alt_mem_bufferram_out+0xf7e05068>
 8005458:	a8c00417 	ldw	r3,16(r21)
 800545c:	ad400604 	addi	r21,r21,24
 8005460:	b0800804 	addi	r2,r22,32
 8005464:	b0c00615 	stw	r3,24(r22)
 8005468:	a8ffff17 	ldw	r3,-4(r21)
 800546c:	b0c00715 	stw	r3,28(r22)
 8005470:	003f9b06 	br	80052e0 <__alt_mem_bufferram_out+0xf7e052e0>
 8005474:	9005883a 	mov	r2,r18
 8005478:	003fc706 	br	8005398 <__alt_mem_bufferram_out+0xf7e05398>
 800547c:	a80b883a 	mov	r5,r21
 8005480:	9009883a 	mov	r4,r18
 8005484:	8004e180 	call	8004e18 <memmove>
 8005488:	003fc906 	br	80053b0 <__alt_mem_bufferram_out+0xf7e053b0>
 800548c:	a8800217 	ldw	r2,8(r21)
 8005490:	b0800415 	stw	r2,16(r22)
 8005494:	a8800317 	ldw	r2,12(r21)
 8005498:	b0800515 	stw	r2,20(r22)
 800549c:	31000726 	beq	r6,r4,80054bc <_realloc_r+0x548>
 80054a0:	b0800604 	addi	r2,r22,24
 80054a4:	ad400404 	addi	r21,r21,16
 80054a8:	003fbb06 	br	8005398 <__alt_mem_bufferram_out+0xf7e05398>
 80054ac:	a009883a 	mov	r4,r20
 80054b0:	80069f80 	call	80069f8 <__malloc_unlock>
 80054b4:	0005883a 	mov	r2,zero
 80054b8:	003f0a06 	br	80050e4 <__alt_mem_bufferram_out+0xf7e050e4>
 80054bc:	a8c00417 	ldw	r3,16(r21)
 80054c0:	ad400604 	addi	r21,r21,24
 80054c4:	b0800804 	addi	r2,r22,32
 80054c8:	b0c00615 	stw	r3,24(r22)
 80054cc:	a8ffff17 	ldw	r3,-4(r21)
 80054d0:	b0c00715 	stw	r3,28(r22)
 80054d4:	003fb006 	br	8005398 <__alt_mem_bufferram_out+0xf7e05398>

080054d8 <lflush>:
 80054d8:	2080030b 	ldhu	r2,12(r4)
 80054dc:	00c00244 	movi	r3,9
 80054e0:	1080024c 	andi	r2,r2,9
 80054e4:	10c00226 	beq	r2,r3,80054f0 <lflush+0x18>
 80054e8:	0005883a 	mov	r2,zero
 80054ec:	f800283a 	ret
 80054f0:	8005d881 	jmpi	8005d88 <fflush>

080054f4 <__srefill_r>:
 80054f4:	defffc04 	addi	sp,sp,-16
 80054f8:	dc400115 	stw	r17,4(sp)
 80054fc:	dc000015 	stw	r16,0(sp)
 8005500:	dfc00315 	stw	ra,12(sp)
 8005504:	dc800215 	stw	r18,8(sp)
 8005508:	2023883a 	mov	r17,r4
 800550c:	2821883a 	mov	r16,r5
 8005510:	20000226 	beq	r4,zero,800551c <__srefill_r+0x28>
 8005514:	20800e17 	ldw	r2,56(r4)
 8005518:	10003c26 	beq	r2,zero,800560c <__srefill_r+0x118>
 800551c:	80c0030b 	ldhu	r3,12(r16)
 8005520:	1908000c 	andi	r4,r3,8192
 8005524:	1805883a 	mov	r2,r3
 8005528:	2000071e 	bne	r4,zero,8005548 <__srefill_r+0x54>
 800552c:	81001917 	ldw	r4,100(r16)
 8005530:	18880014 	ori	r2,r3,8192
 8005534:	00f7ffc4 	movi	r3,-8193
 8005538:	20c8703a 	and	r4,r4,r3
 800553c:	8080030d 	sth	r2,12(r16)
 8005540:	1007883a 	mov	r3,r2
 8005544:	81001915 	stw	r4,100(r16)
 8005548:	80000115 	stw	zero,4(r16)
 800554c:	1100080c 	andi	r4,r2,32
 8005550:	2000571e 	bne	r4,zero,80056b0 <__srefill_r+0x1bc>
 8005554:	1100010c 	andi	r4,r2,4
 8005558:	20001f26 	beq	r4,zero,80055d8 <__srefill_r+0xe4>
 800555c:	81400c17 	ldw	r5,48(r16)
 8005560:	28000826 	beq	r5,zero,8005584 <__srefill_r+0x90>
 8005564:	80801004 	addi	r2,r16,64
 8005568:	28800226 	beq	r5,r2,8005574 <__srefill_r+0x80>
 800556c:	8809883a 	mov	r4,r17
 8005570:	80042980 	call	8004298 <_free_r>
 8005574:	80800f17 	ldw	r2,60(r16)
 8005578:	80000c15 	stw	zero,48(r16)
 800557c:	80800115 	stw	r2,4(r16)
 8005580:	1000391e 	bne	r2,zero,8005668 <__srefill_r+0x174>
 8005584:	80800417 	ldw	r2,16(r16)
 8005588:	10004b26 	beq	r2,zero,80056b8 <__srefill_r+0x1c4>
 800558c:	8480030b 	ldhu	r18,12(r16)
 8005590:	908000cc 	andi	r2,r18,3
 8005594:	10001f1e 	bne	r2,zero,8005614 <__srefill_r+0x120>
 8005598:	81800417 	ldw	r6,16(r16)
 800559c:	80800817 	ldw	r2,32(r16)
 80055a0:	81c00517 	ldw	r7,20(r16)
 80055a4:	81400717 	ldw	r5,28(r16)
 80055a8:	81800015 	stw	r6,0(r16)
 80055ac:	8809883a 	mov	r4,r17
 80055b0:	103ee83a 	callr	r2
 80055b4:	80800115 	stw	r2,4(r16)
 80055b8:	00800e0e 	bge	zero,r2,80055f4 <__srefill_r+0x100>
 80055bc:	0005883a 	mov	r2,zero
 80055c0:	dfc00317 	ldw	ra,12(sp)
 80055c4:	dc800217 	ldw	r18,8(sp)
 80055c8:	dc400117 	ldw	r17,4(sp)
 80055cc:	dc000017 	ldw	r16,0(sp)
 80055d0:	dec00404 	addi	sp,sp,16
 80055d4:	f800283a 	ret
 80055d8:	1100040c 	andi	r4,r2,16
 80055dc:	20003026 	beq	r4,zero,80056a0 <__srefill_r+0x1ac>
 80055e0:	1080020c 	andi	r2,r2,8
 80055e4:	1000241e 	bne	r2,zero,8005678 <__srefill_r+0x184>
 80055e8:	18c00114 	ori	r3,r3,4
 80055ec:	80c0030d 	sth	r3,12(r16)
 80055f0:	003fe406 	br	8005584 <__alt_mem_bufferram_out+0xf7e05584>
 80055f4:	80c0030b 	ldhu	r3,12(r16)
 80055f8:	1000161e 	bne	r2,zero,8005654 <__srefill_r+0x160>
 80055fc:	18c00814 	ori	r3,r3,32
 8005600:	00bfffc4 	movi	r2,-1
 8005604:	80c0030d 	sth	r3,12(r16)
 8005608:	003fed06 	br	80055c0 <__alt_mem_bufferram_out+0xf7e055c0>
 800560c:	80041240 	call	8004124 <__sinit>
 8005610:	003fc206 	br	800551c <__alt_mem_bufferram_out+0xf7e0551c>
 8005614:	00820074 	movhi	r2,2049
 8005618:	10ac4e04 	addi	r2,r2,-20168
 800561c:	11000017 	ldw	r4,0(r2)
 8005620:	01420034 	movhi	r5,2048
 8005624:	00800044 	movi	r2,1
 8005628:	29553604 	addi	r5,r5,21720
 800562c:	8080030d 	sth	r2,12(r16)
 8005630:	8004a640 	call	8004a64 <_fwalk>
 8005634:	00800244 	movi	r2,9
 8005638:	8480030d 	sth	r18,12(r16)
 800563c:	9480024c 	andi	r18,r18,9
 8005640:	90bfd51e 	bne	r18,r2,8005598 <__alt_mem_bufferram_out+0xf7e05598>
 8005644:	800b883a 	mov	r5,r16
 8005648:	8809883a 	mov	r4,r17
 800564c:	8005b100 	call	8005b10 <__sflush_r>
 8005650:	003fd106 	br	8005598 <__alt_mem_bufferram_out+0xf7e05598>
 8005654:	18c01014 	ori	r3,r3,64
 8005658:	80000115 	stw	zero,4(r16)
 800565c:	00bfffc4 	movi	r2,-1
 8005660:	80c0030d 	sth	r3,12(r16)
 8005664:	003fd606 	br	80055c0 <__alt_mem_bufferram_out+0xf7e055c0>
 8005668:	80c00e17 	ldw	r3,56(r16)
 800566c:	0005883a 	mov	r2,zero
 8005670:	80c00015 	stw	r3,0(r16)
 8005674:	003fd206 	br	80055c0 <__alt_mem_bufferram_out+0xf7e055c0>
 8005678:	800b883a 	mov	r5,r16
 800567c:	8809883a 	mov	r4,r17
 8005680:	8005d2c0 	call	8005d2c <_fflush_r>
 8005684:	10000a1e 	bne	r2,zero,80056b0 <__srefill_r+0x1bc>
 8005688:	8080030b 	ldhu	r2,12(r16)
 800568c:	00fffdc4 	movi	r3,-9
 8005690:	80000215 	stw	zero,8(r16)
 8005694:	1886703a 	and	r3,r3,r2
 8005698:	80000615 	stw	zero,24(r16)
 800569c:	003fd206 	br	80055e8 <__alt_mem_bufferram_out+0xf7e055e8>
 80056a0:	00800244 	movi	r2,9
 80056a4:	88800015 	stw	r2,0(r17)
 80056a8:	18c01014 	ori	r3,r3,64
 80056ac:	80c0030d 	sth	r3,12(r16)
 80056b0:	00bfffc4 	movi	r2,-1
 80056b4:	003fc206 	br	80055c0 <__alt_mem_bufferram_out+0xf7e055c0>
 80056b8:	800b883a 	mov	r5,r16
 80056bc:	8809883a 	mov	r4,r17
 80056c0:	8005e180 	call	8005e18 <__smakebuf_r>
 80056c4:	003fb106 	br	800558c <__alt_mem_bufferram_out+0xf7e0558c>

080056c8 <__sread>:
 80056c8:	defffe04 	addi	sp,sp,-8
 80056cc:	dc000015 	stw	r16,0(sp)
 80056d0:	2821883a 	mov	r16,r5
 80056d4:	2940038f 	ldh	r5,14(r5)
 80056d8:	dfc00115 	stw	ra,4(sp)
 80056dc:	8005fd40 	call	8005fd4 <_read_r>
 80056e0:	10000716 	blt	r2,zero,8005700 <__sread+0x38>
 80056e4:	80c01417 	ldw	r3,80(r16)
 80056e8:	1887883a 	add	r3,r3,r2
 80056ec:	80c01415 	stw	r3,80(r16)
 80056f0:	dfc00117 	ldw	ra,4(sp)
 80056f4:	dc000017 	ldw	r16,0(sp)
 80056f8:	dec00204 	addi	sp,sp,8
 80056fc:	f800283a 	ret
 8005700:	80c0030b 	ldhu	r3,12(r16)
 8005704:	18fbffcc 	andi	r3,r3,61439
 8005708:	80c0030d 	sth	r3,12(r16)
 800570c:	dfc00117 	ldw	ra,4(sp)
 8005710:	dc000017 	ldw	r16,0(sp)
 8005714:	dec00204 	addi	sp,sp,8
 8005718:	f800283a 	ret

0800571c <__seofread>:
 800571c:	0005883a 	mov	r2,zero
 8005720:	f800283a 	ret

08005724 <__swrite>:
 8005724:	2880030b 	ldhu	r2,12(r5)
 8005728:	defffb04 	addi	sp,sp,-20
 800572c:	dcc00315 	stw	r19,12(sp)
 8005730:	dc800215 	stw	r18,8(sp)
 8005734:	dc400115 	stw	r17,4(sp)
 8005738:	dc000015 	stw	r16,0(sp)
 800573c:	dfc00415 	stw	ra,16(sp)
 8005740:	10c0400c 	andi	r3,r2,256
 8005744:	2821883a 	mov	r16,r5
 8005748:	2023883a 	mov	r17,r4
 800574c:	3025883a 	mov	r18,r6
 8005750:	3827883a 	mov	r19,r7
 8005754:	18000526 	beq	r3,zero,800576c <__swrite+0x48>
 8005758:	2940038f 	ldh	r5,14(r5)
 800575c:	01c00084 	movi	r7,2
 8005760:	000d883a 	mov	r6,zero
 8005764:	8005db80 	call	8005db8 <_lseek_r>
 8005768:	8080030b 	ldhu	r2,12(r16)
 800576c:	8140038f 	ldh	r5,14(r16)
 8005770:	10bbffcc 	andi	r2,r2,61439
 8005774:	980f883a 	mov	r7,r19
 8005778:	900d883a 	mov	r6,r18
 800577c:	8809883a 	mov	r4,r17
 8005780:	8080030d 	sth	r2,12(r16)
 8005784:	dfc00417 	ldw	ra,16(sp)
 8005788:	dcc00317 	ldw	r19,12(sp)
 800578c:	dc800217 	ldw	r18,8(sp)
 8005790:	dc400117 	ldw	r17,4(sp)
 8005794:	dc000017 	ldw	r16,0(sp)
 8005798:	dec00504 	addi	sp,sp,20
 800579c:	80058041 	jmpi	8005804 <_write_r>

080057a0 <__sseek>:
 80057a0:	defffe04 	addi	sp,sp,-8
 80057a4:	dc000015 	stw	r16,0(sp)
 80057a8:	2821883a 	mov	r16,r5
 80057ac:	2940038f 	ldh	r5,14(r5)
 80057b0:	dfc00115 	stw	ra,4(sp)
 80057b4:	8005db80 	call	8005db8 <_lseek_r>
 80057b8:	00ffffc4 	movi	r3,-1
 80057bc:	10c00826 	beq	r2,r3,80057e0 <__sseek+0x40>
 80057c0:	80c0030b 	ldhu	r3,12(r16)
 80057c4:	80801415 	stw	r2,80(r16)
 80057c8:	18c40014 	ori	r3,r3,4096
 80057cc:	80c0030d 	sth	r3,12(r16)
 80057d0:	dfc00117 	ldw	ra,4(sp)
 80057d4:	dc000017 	ldw	r16,0(sp)
 80057d8:	dec00204 	addi	sp,sp,8
 80057dc:	f800283a 	ret
 80057e0:	80c0030b 	ldhu	r3,12(r16)
 80057e4:	18fbffcc 	andi	r3,r3,61439
 80057e8:	80c0030d 	sth	r3,12(r16)
 80057ec:	dfc00117 	ldw	ra,4(sp)
 80057f0:	dc000017 	ldw	r16,0(sp)
 80057f4:	dec00204 	addi	sp,sp,8
 80057f8:	f800283a 	ret

080057fc <__sclose>:
 80057fc:	2940038f 	ldh	r5,14(r5)
 8005800:	80059b81 	jmpi	80059b8 <_close_r>

08005804 <_write_r>:
 8005804:	defffd04 	addi	sp,sp,-12
 8005808:	2805883a 	mov	r2,r5
 800580c:	dc000015 	stw	r16,0(sp)
 8005810:	04020074 	movhi	r16,2049
 8005814:	dc400115 	stw	r17,4(sp)
 8005818:	300b883a 	mov	r5,r6
 800581c:	84330904 	addi	r16,r16,-13276
 8005820:	2023883a 	mov	r17,r4
 8005824:	380d883a 	mov	r6,r7
 8005828:	1009883a 	mov	r4,r2
 800582c:	dfc00215 	stw	ra,8(sp)
 8005830:	80000015 	stw	zero,0(r16)
 8005834:	8006ca40 	call	8006ca4 <write>
 8005838:	00ffffc4 	movi	r3,-1
 800583c:	10c00526 	beq	r2,r3,8005854 <_write_r+0x50>
 8005840:	dfc00217 	ldw	ra,8(sp)
 8005844:	dc400117 	ldw	r17,4(sp)
 8005848:	dc000017 	ldw	r16,0(sp)
 800584c:	dec00304 	addi	sp,sp,12
 8005850:	f800283a 	ret
 8005854:	80c00017 	ldw	r3,0(r16)
 8005858:	183ff926 	beq	r3,zero,8005840 <__alt_mem_bufferram_out+0xf7e05840>
 800585c:	88c00015 	stw	r3,0(r17)
 8005860:	003ff706 	br	8005840 <__alt_mem_bufferram_out+0xf7e05840>

08005864 <__swsetup_r>:
 8005864:	00820074 	movhi	r2,2049
 8005868:	defffd04 	addi	sp,sp,-12
 800586c:	10ac4f04 	addi	r2,r2,-20164
 8005870:	dc400115 	stw	r17,4(sp)
 8005874:	2023883a 	mov	r17,r4
 8005878:	11000017 	ldw	r4,0(r2)
 800587c:	dc000015 	stw	r16,0(sp)
 8005880:	dfc00215 	stw	ra,8(sp)
 8005884:	2821883a 	mov	r16,r5
 8005888:	20000226 	beq	r4,zero,8005894 <__swsetup_r+0x30>
 800588c:	20800e17 	ldw	r2,56(r4)
 8005890:	10003126 	beq	r2,zero,8005958 <__swsetup_r+0xf4>
 8005894:	8080030b 	ldhu	r2,12(r16)
 8005898:	10c0020c 	andi	r3,r2,8
 800589c:	1009883a 	mov	r4,r2
 80058a0:	18000f26 	beq	r3,zero,80058e0 <__swsetup_r+0x7c>
 80058a4:	80c00417 	ldw	r3,16(r16)
 80058a8:	18001526 	beq	r3,zero,8005900 <__swsetup_r+0x9c>
 80058ac:	1100004c 	andi	r4,r2,1
 80058b0:	20001c1e 	bne	r4,zero,8005924 <__swsetup_r+0xc0>
 80058b4:	1080008c 	andi	r2,r2,2
 80058b8:	1000291e 	bne	r2,zero,8005960 <__swsetup_r+0xfc>
 80058bc:	80800517 	ldw	r2,20(r16)
 80058c0:	80800215 	stw	r2,8(r16)
 80058c4:	18001c26 	beq	r3,zero,8005938 <__swsetup_r+0xd4>
 80058c8:	0005883a 	mov	r2,zero
 80058cc:	dfc00217 	ldw	ra,8(sp)
 80058d0:	dc400117 	ldw	r17,4(sp)
 80058d4:	dc000017 	ldw	r16,0(sp)
 80058d8:	dec00304 	addi	sp,sp,12
 80058dc:	f800283a 	ret
 80058e0:	2080040c 	andi	r2,r4,16
 80058e4:	10002e26 	beq	r2,zero,80059a0 <__swsetup_r+0x13c>
 80058e8:	2080010c 	andi	r2,r4,4
 80058ec:	10001e1e 	bne	r2,zero,8005968 <__swsetup_r+0x104>
 80058f0:	80c00417 	ldw	r3,16(r16)
 80058f4:	20800214 	ori	r2,r4,8
 80058f8:	8080030d 	sth	r2,12(r16)
 80058fc:	183feb1e 	bne	r3,zero,80058ac <__alt_mem_bufferram_out+0xf7e058ac>
 8005900:	1100a00c 	andi	r4,r2,640
 8005904:	01408004 	movi	r5,512
 8005908:	217fe826 	beq	r4,r5,80058ac <__alt_mem_bufferram_out+0xf7e058ac>
 800590c:	800b883a 	mov	r5,r16
 8005910:	8809883a 	mov	r4,r17
 8005914:	8005e180 	call	8005e18 <__smakebuf_r>
 8005918:	8080030b 	ldhu	r2,12(r16)
 800591c:	80c00417 	ldw	r3,16(r16)
 8005920:	003fe206 	br	80058ac <__alt_mem_bufferram_out+0xf7e058ac>
 8005924:	80800517 	ldw	r2,20(r16)
 8005928:	80000215 	stw	zero,8(r16)
 800592c:	0085c83a 	sub	r2,zero,r2
 8005930:	80800615 	stw	r2,24(r16)
 8005934:	183fe41e 	bne	r3,zero,80058c8 <__alt_mem_bufferram_out+0xf7e058c8>
 8005938:	80c0030b 	ldhu	r3,12(r16)
 800593c:	0005883a 	mov	r2,zero
 8005940:	1900200c 	andi	r4,r3,128
 8005944:	203fe126 	beq	r4,zero,80058cc <__alt_mem_bufferram_out+0xf7e058cc>
 8005948:	18c01014 	ori	r3,r3,64
 800594c:	80c0030d 	sth	r3,12(r16)
 8005950:	00bfffc4 	movi	r2,-1
 8005954:	003fdd06 	br	80058cc <__alt_mem_bufferram_out+0xf7e058cc>
 8005958:	80041240 	call	8004124 <__sinit>
 800595c:	003fcd06 	br	8005894 <__alt_mem_bufferram_out+0xf7e05894>
 8005960:	0005883a 	mov	r2,zero
 8005964:	003fd606 	br	80058c0 <__alt_mem_bufferram_out+0xf7e058c0>
 8005968:	81400c17 	ldw	r5,48(r16)
 800596c:	28000626 	beq	r5,zero,8005988 <__swsetup_r+0x124>
 8005970:	80801004 	addi	r2,r16,64
 8005974:	28800326 	beq	r5,r2,8005984 <__swsetup_r+0x120>
 8005978:	8809883a 	mov	r4,r17
 800597c:	80042980 	call	8004298 <_free_r>
 8005980:	8100030b 	ldhu	r4,12(r16)
 8005984:	80000c15 	stw	zero,48(r16)
 8005988:	80c00417 	ldw	r3,16(r16)
 800598c:	00bff6c4 	movi	r2,-37
 8005990:	1108703a 	and	r4,r2,r4
 8005994:	80000115 	stw	zero,4(r16)
 8005998:	80c00015 	stw	r3,0(r16)
 800599c:	003fd506 	br	80058f4 <__alt_mem_bufferram_out+0xf7e058f4>
 80059a0:	00800244 	movi	r2,9
 80059a4:	88800015 	stw	r2,0(r17)
 80059a8:	20801014 	ori	r2,r4,64
 80059ac:	8080030d 	sth	r2,12(r16)
 80059b0:	00bfffc4 	movi	r2,-1
 80059b4:	003fc506 	br	80058cc <__alt_mem_bufferram_out+0xf7e058cc>

080059b8 <_close_r>:
 80059b8:	defffd04 	addi	sp,sp,-12
 80059bc:	dc000015 	stw	r16,0(sp)
 80059c0:	04020074 	movhi	r16,2049
 80059c4:	dc400115 	stw	r17,4(sp)
 80059c8:	84330904 	addi	r16,r16,-13276
 80059cc:	2023883a 	mov	r17,r4
 80059d0:	2809883a 	mov	r4,r5
 80059d4:	dfc00215 	stw	ra,8(sp)
 80059d8:	80000015 	stw	zero,0(r16)
 80059dc:	80062d40 	call	80062d4 <close>
 80059e0:	00ffffc4 	movi	r3,-1
 80059e4:	10c00526 	beq	r2,r3,80059fc <_close_r+0x44>
 80059e8:	dfc00217 	ldw	ra,8(sp)
 80059ec:	dc400117 	ldw	r17,4(sp)
 80059f0:	dc000017 	ldw	r16,0(sp)
 80059f4:	dec00304 	addi	sp,sp,12
 80059f8:	f800283a 	ret
 80059fc:	80c00017 	ldw	r3,0(r16)
 8005a00:	183ff926 	beq	r3,zero,80059e8 <__alt_mem_bufferram_out+0xf7e059e8>
 8005a04:	88c00015 	stw	r3,0(r17)
 8005a08:	003ff706 	br	80059e8 <__alt_mem_bufferram_out+0xf7e059e8>

08005a0c <_fclose_r>:
 8005a0c:	28003926 	beq	r5,zero,8005af4 <_fclose_r+0xe8>
 8005a10:	defffc04 	addi	sp,sp,-16
 8005a14:	dc400115 	stw	r17,4(sp)
 8005a18:	dc000015 	stw	r16,0(sp)
 8005a1c:	dfc00315 	stw	ra,12(sp)
 8005a20:	dc800215 	stw	r18,8(sp)
 8005a24:	2023883a 	mov	r17,r4
 8005a28:	2821883a 	mov	r16,r5
 8005a2c:	20000226 	beq	r4,zero,8005a38 <_fclose_r+0x2c>
 8005a30:	20800e17 	ldw	r2,56(r4)
 8005a34:	10002726 	beq	r2,zero,8005ad4 <_fclose_r+0xc8>
 8005a38:	8080030f 	ldh	r2,12(r16)
 8005a3c:	1000071e 	bne	r2,zero,8005a5c <_fclose_r+0x50>
 8005a40:	0005883a 	mov	r2,zero
 8005a44:	dfc00317 	ldw	ra,12(sp)
 8005a48:	dc800217 	ldw	r18,8(sp)
 8005a4c:	dc400117 	ldw	r17,4(sp)
 8005a50:	dc000017 	ldw	r16,0(sp)
 8005a54:	dec00404 	addi	sp,sp,16
 8005a58:	f800283a 	ret
 8005a5c:	800b883a 	mov	r5,r16
 8005a60:	8809883a 	mov	r4,r17
 8005a64:	8005b100 	call	8005b10 <__sflush_r>
 8005a68:	1025883a 	mov	r18,r2
 8005a6c:	80800b17 	ldw	r2,44(r16)
 8005a70:	10000426 	beq	r2,zero,8005a84 <_fclose_r+0x78>
 8005a74:	81400717 	ldw	r5,28(r16)
 8005a78:	8809883a 	mov	r4,r17
 8005a7c:	103ee83a 	callr	r2
 8005a80:	10001616 	blt	r2,zero,8005adc <_fclose_r+0xd0>
 8005a84:	8080030b 	ldhu	r2,12(r16)
 8005a88:	1080200c 	andi	r2,r2,128
 8005a8c:	1000151e 	bne	r2,zero,8005ae4 <_fclose_r+0xd8>
 8005a90:	81400c17 	ldw	r5,48(r16)
 8005a94:	28000526 	beq	r5,zero,8005aac <_fclose_r+0xa0>
 8005a98:	80801004 	addi	r2,r16,64
 8005a9c:	28800226 	beq	r5,r2,8005aa8 <_fclose_r+0x9c>
 8005aa0:	8809883a 	mov	r4,r17
 8005aa4:	80042980 	call	8004298 <_free_r>
 8005aa8:	80000c15 	stw	zero,48(r16)
 8005aac:	81401117 	ldw	r5,68(r16)
 8005ab0:	28000326 	beq	r5,zero,8005ac0 <_fclose_r+0xb4>
 8005ab4:	8809883a 	mov	r4,r17
 8005ab8:	80042980 	call	8004298 <_free_r>
 8005abc:	80001115 	stw	zero,68(r16)
 8005ac0:	80041340 	call	8004134 <__sfp_lock_acquire>
 8005ac4:	8000030d 	sth	zero,12(r16)
 8005ac8:	80041380 	call	8004138 <__sfp_lock_release>
 8005acc:	9005883a 	mov	r2,r18
 8005ad0:	003fdc06 	br	8005a44 <__alt_mem_bufferram_out+0xf7e05a44>
 8005ad4:	80041240 	call	8004124 <__sinit>
 8005ad8:	003fd706 	br	8005a38 <__alt_mem_bufferram_out+0xf7e05a38>
 8005adc:	04bfffc4 	movi	r18,-1
 8005ae0:	003fe806 	br	8005a84 <__alt_mem_bufferram_out+0xf7e05a84>
 8005ae4:	81400417 	ldw	r5,16(r16)
 8005ae8:	8809883a 	mov	r4,r17
 8005aec:	80042980 	call	8004298 <_free_r>
 8005af0:	003fe706 	br	8005a90 <__alt_mem_bufferram_out+0xf7e05a90>
 8005af4:	0005883a 	mov	r2,zero
 8005af8:	f800283a 	ret

08005afc <fclose>:
 8005afc:	00820074 	movhi	r2,2049
 8005b00:	10ac4f04 	addi	r2,r2,-20164
 8005b04:	200b883a 	mov	r5,r4
 8005b08:	11000017 	ldw	r4,0(r2)
 8005b0c:	8005a0c1 	jmpi	8005a0c <_fclose_r>

08005b10 <__sflush_r>:
 8005b10:	2880030b 	ldhu	r2,12(r5)
 8005b14:	defffb04 	addi	sp,sp,-20
 8005b18:	dcc00315 	stw	r19,12(sp)
 8005b1c:	dc400115 	stw	r17,4(sp)
 8005b20:	dfc00415 	stw	ra,16(sp)
 8005b24:	dc800215 	stw	r18,8(sp)
 8005b28:	dc000015 	stw	r16,0(sp)
 8005b2c:	10c0020c 	andi	r3,r2,8
 8005b30:	2823883a 	mov	r17,r5
 8005b34:	2027883a 	mov	r19,r4
 8005b38:	1800311e 	bne	r3,zero,8005c00 <__sflush_r+0xf0>
 8005b3c:	28c00117 	ldw	r3,4(r5)
 8005b40:	10820014 	ori	r2,r2,2048
 8005b44:	2880030d 	sth	r2,12(r5)
 8005b48:	00c04b0e 	bge	zero,r3,8005c78 <__sflush_r+0x168>
 8005b4c:	8a000a17 	ldw	r8,40(r17)
 8005b50:	40002326 	beq	r8,zero,8005be0 <__sflush_r+0xd0>
 8005b54:	9c000017 	ldw	r16,0(r19)
 8005b58:	10c4000c 	andi	r3,r2,4096
 8005b5c:	98000015 	stw	zero,0(r19)
 8005b60:	18004826 	beq	r3,zero,8005c84 <__sflush_r+0x174>
 8005b64:	89801417 	ldw	r6,80(r17)
 8005b68:	10c0010c 	andi	r3,r2,4
 8005b6c:	18000626 	beq	r3,zero,8005b88 <__sflush_r+0x78>
 8005b70:	88c00117 	ldw	r3,4(r17)
 8005b74:	88800c17 	ldw	r2,48(r17)
 8005b78:	30cdc83a 	sub	r6,r6,r3
 8005b7c:	10000226 	beq	r2,zero,8005b88 <__sflush_r+0x78>
 8005b80:	88800f17 	ldw	r2,60(r17)
 8005b84:	308dc83a 	sub	r6,r6,r2
 8005b88:	89400717 	ldw	r5,28(r17)
 8005b8c:	000f883a 	mov	r7,zero
 8005b90:	9809883a 	mov	r4,r19
 8005b94:	403ee83a 	callr	r8
 8005b98:	00ffffc4 	movi	r3,-1
 8005b9c:	10c04426 	beq	r2,r3,8005cb0 <__sflush_r+0x1a0>
 8005ba0:	88c0030b 	ldhu	r3,12(r17)
 8005ba4:	89000417 	ldw	r4,16(r17)
 8005ba8:	88000115 	stw	zero,4(r17)
 8005bac:	197dffcc 	andi	r5,r3,63487
 8005bb0:	8940030d 	sth	r5,12(r17)
 8005bb4:	89000015 	stw	r4,0(r17)
 8005bb8:	18c4000c 	andi	r3,r3,4096
 8005bbc:	18002c1e 	bne	r3,zero,8005c70 <__sflush_r+0x160>
 8005bc0:	89400c17 	ldw	r5,48(r17)
 8005bc4:	9c000015 	stw	r16,0(r19)
 8005bc8:	28000526 	beq	r5,zero,8005be0 <__sflush_r+0xd0>
 8005bcc:	88801004 	addi	r2,r17,64
 8005bd0:	28800226 	beq	r5,r2,8005bdc <__sflush_r+0xcc>
 8005bd4:	9809883a 	mov	r4,r19
 8005bd8:	80042980 	call	8004298 <_free_r>
 8005bdc:	88000c15 	stw	zero,48(r17)
 8005be0:	0005883a 	mov	r2,zero
 8005be4:	dfc00417 	ldw	ra,16(sp)
 8005be8:	dcc00317 	ldw	r19,12(sp)
 8005bec:	dc800217 	ldw	r18,8(sp)
 8005bf0:	dc400117 	ldw	r17,4(sp)
 8005bf4:	dc000017 	ldw	r16,0(sp)
 8005bf8:	dec00504 	addi	sp,sp,20
 8005bfc:	f800283a 	ret
 8005c00:	2c800417 	ldw	r18,16(r5)
 8005c04:	903ff626 	beq	r18,zero,8005be0 <__alt_mem_bufferram_out+0xf7e05be0>
 8005c08:	2c000017 	ldw	r16,0(r5)
 8005c0c:	108000cc 	andi	r2,r2,3
 8005c10:	2c800015 	stw	r18,0(r5)
 8005c14:	84a1c83a 	sub	r16,r16,r18
 8005c18:	1000131e 	bne	r2,zero,8005c68 <__sflush_r+0x158>
 8005c1c:	28800517 	ldw	r2,20(r5)
 8005c20:	88800215 	stw	r2,8(r17)
 8005c24:	04000316 	blt	zero,r16,8005c34 <__sflush_r+0x124>
 8005c28:	003fed06 	br	8005be0 <__alt_mem_bufferram_out+0xf7e05be0>
 8005c2c:	90a5883a 	add	r18,r18,r2
 8005c30:	043feb0e 	bge	zero,r16,8005be0 <__alt_mem_bufferram_out+0xf7e05be0>
 8005c34:	88800917 	ldw	r2,36(r17)
 8005c38:	89400717 	ldw	r5,28(r17)
 8005c3c:	800f883a 	mov	r7,r16
 8005c40:	900d883a 	mov	r6,r18
 8005c44:	9809883a 	mov	r4,r19
 8005c48:	103ee83a 	callr	r2
 8005c4c:	80a1c83a 	sub	r16,r16,r2
 8005c50:	00bff616 	blt	zero,r2,8005c2c <__alt_mem_bufferram_out+0xf7e05c2c>
 8005c54:	88c0030b 	ldhu	r3,12(r17)
 8005c58:	00bfffc4 	movi	r2,-1
 8005c5c:	18c01014 	ori	r3,r3,64
 8005c60:	88c0030d 	sth	r3,12(r17)
 8005c64:	003fdf06 	br	8005be4 <__alt_mem_bufferram_out+0xf7e05be4>
 8005c68:	0005883a 	mov	r2,zero
 8005c6c:	003fec06 	br	8005c20 <__alt_mem_bufferram_out+0xf7e05c20>
 8005c70:	88801415 	stw	r2,80(r17)
 8005c74:	003fd206 	br	8005bc0 <__alt_mem_bufferram_out+0xf7e05bc0>
 8005c78:	28c00f17 	ldw	r3,60(r5)
 8005c7c:	00ffb316 	blt	zero,r3,8005b4c <__alt_mem_bufferram_out+0xf7e05b4c>
 8005c80:	003fd706 	br	8005be0 <__alt_mem_bufferram_out+0xf7e05be0>
 8005c84:	89400717 	ldw	r5,28(r17)
 8005c88:	000d883a 	mov	r6,zero
 8005c8c:	01c00044 	movi	r7,1
 8005c90:	9809883a 	mov	r4,r19
 8005c94:	403ee83a 	callr	r8
 8005c98:	100d883a 	mov	r6,r2
 8005c9c:	00bfffc4 	movi	r2,-1
 8005ca0:	30801426 	beq	r6,r2,8005cf4 <__sflush_r+0x1e4>
 8005ca4:	8880030b 	ldhu	r2,12(r17)
 8005ca8:	8a000a17 	ldw	r8,40(r17)
 8005cac:	003fae06 	br	8005b68 <__alt_mem_bufferram_out+0xf7e05b68>
 8005cb0:	98c00017 	ldw	r3,0(r19)
 8005cb4:	183fba26 	beq	r3,zero,8005ba0 <__alt_mem_bufferram_out+0xf7e05ba0>
 8005cb8:	01000744 	movi	r4,29
 8005cbc:	19000626 	beq	r3,r4,8005cd8 <__sflush_r+0x1c8>
 8005cc0:	01000584 	movi	r4,22
 8005cc4:	19000426 	beq	r3,r4,8005cd8 <__sflush_r+0x1c8>
 8005cc8:	88c0030b 	ldhu	r3,12(r17)
 8005ccc:	18c01014 	ori	r3,r3,64
 8005cd0:	88c0030d 	sth	r3,12(r17)
 8005cd4:	003fc306 	br	8005be4 <__alt_mem_bufferram_out+0xf7e05be4>
 8005cd8:	8880030b 	ldhu	r2,12(r17)
 8005cdc:	88c00417 	ldw	r3,16(r17)
 8005ce0:	88000115 	stw	zero,4(r17)
 8005ce4:	10bdffcc 	andi	r2,r2,63487
 8005ce8:	8880030d 	sth	r2,12(r17)
 8005cec:	88c00015 	stw	r3,0(r17)
 8005cf0:	003fb306 	br	8005bc0 <__alt_mem_bufferram_out+0xf7e05bc0>
 8005cf4:	98800017 	ldw	r2,0(r19)
 8005cf8:	103fea26 	beq	r2,zero,8005ca4 <__alt_mem_bufferram_out+0xf7e05ca4>
 8005cfc:	00c00744 	movi	r3,29
 8005d00:	10c00226 	beq	r2,r3,8005d0c <__sflush_r+0x1fc>
 8005d04:	00c00584 	movi	r3,22
 8005d08:	10c0031e 	bne	r2,r3,8005d18 <__sflush_r+0x208>
 8005d0c:	9c000015 	stw	r16,0(r19)
 8005d10:	0005883a 	mov	r2,zero
 8005d14:	003fb306 	br	8005be4 <__alt_mem_bufferram_out+0xf7e05be4>
 8005d18:	88c0030b 	ldhu	r3,12(r17)
 8005d1c:	3005883a 	mov	r2,r6
 8005d20:	18c01014 	ori	r3,r3,64
 8005d24:	88c0030d 	sth	r3,12(r17)
 8005d28:	003fae06 	br	8005be4 <__alt_mem_bufferram_out+0xf7e05be4>

08005d2c <_fflush_r>:
 8005d2c:	defffd04 	addi	sp,sp,-12
 8005d30:	dc000115 	stw	r16,4(sp)
 8005d34:	dfc00215 	stw	ra,8(sp)
 8005d38:	2021883a 	mov	r16,r4
 8005d3c:	20000226 	beq	r4,zero,8005d48 <_fflush_r+0x1c>
 8005d40:	20800e17 	ldw	r2,56(r4)
 8005d44:	10000c26 	beq	r2,zero,8005d78 <_fflush_r+0x4c>
 8005d48:	2880030f 	ldh	r2,12(r5)
 8005d4c:	1000051e 	bne	r2,zero,8005d64 <_fflush_r+0x38>
 8005d50:	0005883a 	mov	r2,zero
 8005d54:	dfc00217 	ldw	ra,8(sp)
 8005d58:	dc000117 	ldw	r16,4(sp)
 8005d5c:	dec00304 	addi	sp,sp,12
 8005d60:	f800283a 	ret
 8005d64:	8009883a 	mov	r4,r16
 8005d68:	dfc00217 	ldw	ra,8(sp)
 8005d6c:	dc000117 	ldw	r16,4(sp)
 8005d70:	dec00304 	addi	sp,sp,12
 8005d74:	8005b101 	jmpi	8005b10 <__sflush_r>
 8005d78:	d9400015 	stw	r5,0(sp)
 8005d7c:	80041240 	call	8004124 <__sinit>
 8005d80:	d9400017 	ldw	r5,0(sp)
 8005d84:	003ff006 	br	8005d48 <__alt_mem_bufferram_out+0xf7e05d48>

08005d88 <fflush>:
 8005d88:	20000526 	beq	r4,zero,8005da0 <fflush+0x18>
 8005d8c:	00820074 	movhi	r2,2049
 8005d90:	10ac4f04 	addi	r2,r2,-20164
 8005d94:	200b883a 	mov	r5,r4
 8005d98:	11000017 	ldw	r4,0(r2)
 8005d9c:	8005d2c1 	jmpi	8005d2c <_fflush_r>
 8005da0:	00820074 	movhi	r2,2049
 8005da4:	10ac4e04 	addi	r2,r2,-20168
 8005da8:	11000017 	ldw	r4,0(r2)
 8005dac:	01420034 	movhi	r5,2048
 8005db0:	29574b04 	addi	r5,r5,23852
 8005db4:	8004b281 	jmpi	8004b28 <_fwalk_reent>

08005db8 <_lseek_r>:
 8005db8:	defffd04 	addi	sp,sp,-12
 8005dbc:	2805883a 	mov	r2,r5
 8005dc0:	dc000015 	stw	r16,0(sp)
 8005dc4:	04020074 	movhi	r16,2049
 8005dc8:	dc400115 	stw	r17,4(sp)
 8005dcc:	300b883a 	mov	r5,r6
 8005dd0:	84330904 	addi	r16,r16,-13276
 8005dd4:	2023883a 	mov	r17,r4
 8005dd8:	380d883a 	mov	r6,r7
 8005ddc:	1009883a 	mov	r4,r2
 8005de0:	dfc00215 	stw	ra,8(sp)
 8005de4:	80000015 	stw	zero,0(r16)
 8005de8:	80068840 	call	8006884 <lseek>
 8005dec:	00ffffc4 	movi	r3,-1
 8005df0:	10c00526 	beq	r2,r3,8005e08 <_lseek_r+0x50>
 8005df4:	dfc00217 	ldw	ra,8(sp)
 8005df8:	dc400117 	ldw	r17,4(sp)
 8005dfc:	dc000017 	ldw	r16,0(sp)
 8005e00:	dec00304 	addi	sp,sp,12
 8005e04:	f800283a 	ret
 8005e08:	80c00017 	ldw	r3,0(r16)
 8005e0c:	183ff926 	beq	r3,zero,8005df4 <__alt_mem_bufferram_out+0xf7e05df4>
 8005e10:	88c00015 	stw	r3,0(r17)
 8005e14:	003ff706 	br	8005df4 <__alt_mem_bufferram_out+0xf7e05df4>

08005e18 <__smakebuf_r>:
 8005e18:	2880030b 	ldhu	r2,12(r5)
 8005e1c:	10c0008c 	andi	r3,r2,2
 8005e20:	1800411e 	bne	r3,zero,8005f28 <__smakebuf_r+0x110>
 8005e24:	deffec04 	addi	sp,sp,-80
 8005e28:	dc000f15 	stw	r16,60(sp)
 8005e2c:	2821883a 	mov	r16,r5
 8005e30:	2940038f 	ldh	r5,14(r5)
 8005e34:	dc401015 	stw	r17,64(sp)
 8005e38:	dfc01315 	stw	ra,76(sp)
 8005e3c:	dcc01215 	stw	r19,72(sp)
 8005e40:	dc801115 	stw	r18,68(sp)
 8005e44:	2023883a 	mov	r17,r4
 8005e48:	28001c16 	blt	r5,zero,8005ebc <__smakebuf_r+0xa4>
 8005e4c:	d80d883a 	mov	r6,sp
 8005e50:	80060340 	call	8006034 <_fstat_r>
 8005e54:	10001816 	blt	r2,zero,8005eb8 <__smakebuf_r+0xa0>
 8005e58:	d8800117 	ldw	r2,4(sp)
 8005e5c:	00e00014 	movui	r3,32768
 8005e60:	10bc000c 	andi	r2,r2,61440
 8005e64:	14c80020 	cmpeqi	r19,r2,8192
 8005e68:	10c03726 	beq	r2,r3,8005f48 <__smakebuf_r+0x130>
 8005e6c:	80c0030b 	ldhu	r3,12(r16)
 8005e70:	18c20014 	ori	r3,r3,2048
 8005e74:	80c0030d 	sth	r3,12(r16)
 8005e78:	00c80004 	movi	r3,8192
 8005e7c:	10c0521e 	bne	r2,r3,8005fc8 <__smakebuf_r+0x1b0>
 8005e80:	8140038f 	ldh	r5,14(r16)
 8005e84:	8809883a 	mov	r4,r17
 8005e88:	80060900 	call	8006090 <_isatty_r>
 8005e8c:	10004c26 	beq	r2,zero,8005fc0 <__smakebuf_r+0x1a8>
 8005e90:	8080030b 	ldhu	r2,12(r16)
 8005e94:	80c010c4 	addi	r3,r16,67
 8005e98:	80c00015 	stw	r3,0(r16)
 8005e9c:	10800054 	ori	r2,r2,1
 8005ea0:	8080030d 	sth	r2,12(r16)
 8005ea4:	00800044 	movi	r2,1
 8005ea8:	80c00415 	stw	r3,16(r16)
 8005eac:	80800515 	stw	r2,20(r16)
 8005eb0:	04810004 	movi	r18,1024
 8005eb4:	00000706 	br	8005ed4 <__smakebuf_r+0xbc>
 8005eb8:	8080030b 	ldhu	r2,12(r16)
 8005ebc:	10c0200c 	andi	r3,r2,128
 8005ec0:	18001f1e 	bne	r3,zero,8005f40 <__smakebuf_r+0x128>
 8005ec4:	04810004 	movi	r18,1024
 8005ec8:	10820014 	ori	r2,r2,2048
 8005ecc:	8080030d 	sth	r2,12(r16)
 8005ed0:	0027883a 	mov	r19,zero
 8005ed4:	900b883a 	mov	r5,r18
 8005ed8:	8809883a 	mov	r4,r17
 8005edc:	8002e780 	call	8002e78 <_malloc_r>
 8005ee0:	10002c26 	beq	r2,zero,8005f94 <__smakebuf_r+0x17c>
 8005ee4:	80c0030b 	ldhu	r3,12(r16)
 8005ee8:	01020034 	movhi	r4,2048
 8005eec:	210f7704 	addi	r4,r4,15836
 8005ef0:	89000f15 	stw	r4,60(r17)
 8005ef4:	18c02014 	ori	r3,r3,128
 8005ef8:	80c0030d 	sth	r3,12(r16)
 8005efc:	80800015 	stw	r2,0(r16)
 8005f00:	80800415 	stw	r2,16(r16)
 8005f04:	84800515 	stw	r18,20(r16)
 8005f08:	98001a1e 	bne	r19,zero,8005f74 <__smakebuf_r+0x15c>
 8005f0c:	dfc01317 	ldw	ra,76(sp)
 8005f10:	dcc01217 	ldw	r19,72(sp)
 8005f14:	dc801117 	ldw	r18,68(sp)
 8005f18:	dc401017 	ldw	r17,64(sp)
 8005f1c:	dc000f17 	ldw	r16,60(sp)
 8005f20:	dec01404 	addi	sp,sp,80
 8005f24:	f800283a 	ret
 8005f28:	288010c4 	addi	r2,r5,67
 8005f2c:	28800015 	stw	r2,0(r5)
 8005f30:	28800415 	stw	r2,16(r5)
 8005f34:	00800044 	movi	r2,1
 8005f38:	28800515 	stw	r2,20(r5)
 8005f3c:	f800283a 	ret
 8005f40:	04801004 	movi	r18,64
 8005f44:	003fe006 	br	8005ec8 <__alt_mem_bufferram_out+0xf7e05ec8>
 8005f48:	81000a17 	ldw	r4,40(r16)
 8005f4c:	00c20034 	movhi	r3,2048
 8005f50:	18d5e804 	addi	r3,r3,22432
 8005f54:	20ffc51e 	bne	r4,r3,8005e6c <__alt_mem_bufferram_out+0xf7e05e6c>
 8005f58:	8080030b 	ldhu	r2,12(r16)
 8005f5c:	04810004 	movi	r18,1024
 8005f60:	84801315 	stw	r18,76(r16)
 8005f64:	1484b03a 	or	r2,r2,r18
 8005f68:	8080030d 	sth	r2,12(r16)
 8005f6c:	0027883a 	mov	r19,zero
 8005f70:	003fd806 	br	8005ed4 <__alt_mem_bufferram_out+0xf7e05ed4>
 8005f74:	8140038f 	ldh	r5,14(r16)
 8005f78:	8809883a 	mov	r4,r17
 8005f7c:	80060900 	call	8006090 <_isatty_r>
 8005f80:	103fe226 	beq	r2,zero,8005f0c <__alt_mem_bufferram_out+0xf7e05f0c>
 8005f84:	8080030b 	ldhu	r2,12(r16)
 8005f88:	10800054 	ori	r2,r2,1
 8005f8c:	8080030d 	sth	r2,12(r16)
 8005f90:	003fde06 	br	8005f0c <__alt_mem_bufferram_out+0xf7e05f0c>
 8005f94:	8080030b 	ldhu	r2,12(r16)
 8005f98:	10c0800c 	andi	r3,r2,512
 8005f9c:	183fdb1e 	bne	r3,zero,8005f0c <__alt_mem_bufferram_out+0xf7e05f0c>
 8005fa0:	10800094 	ori	r2,r2,2
 8005fa4:	80c010c4 	addi	r3,r16,67
 8005fa8:	8080030d 	sth	r2,12(r16)
 8005fac:	00800044 	movi	r2,1
 8005fb0:	80c00015 	stw	r3,0(r16)
 8005fb4:	80c00415 	stw	r3,16(r16)
 8005fb8:	80800515 	stw	r2,20(r16)
 8005fbc:	003fd306 	br	8005f0c <__alt_mem_bufferram_out+0xf7e05f0c>
 8005fc0:	04810004 	movi	r18,1024
 8005fc4:	003fc306 	br	8005ed4 <__alt_mem_bufferram_out+0xf7e05ed4>
 8005fc8:	0027883a 	mov	r19,zero
 8005fcc:	04810004 	movi	r18,1024
 8005fd0:	003fc006 	br	8005ed4 <__alt_mem_bufferram_out+0xf7e05ed4>

08005fd4 <_read_r>:
 8005fd4:	defffd04 	addi	sp,sp,-12
 8005fd8:	2805883a 	mov	r2,r5
 8005fdc:	dc000015 	stw	r16,0(sp)
 8005fe0:	04020074 	movhi	r16,2049
 8005fe4:	dc400115 	stw	r17,4(sp)
 8005fe8:	300b883a 	mov	r5,r6
 8005fec:	84330904 	addi	r16,r16,-13276
 8005ff0:	2023883a 	mov	r17,r4
 8005ff4:	380d883a 	mov	r6,r7
 8005ff8:	1009883a 	mov	r4,r2
 8005ffc:	dfc00215 	stw	ra,8(sp)
 8006000:	80000015 	stw	zero,0(r16)
 8006004:	8006a580 	call	8006a58 <read>
 8006008:	00ffffc4 	movi	r3,-1
 800600c:	10c00526 	beq	r2,r3,8006024 <_read_r+0x50>
 8006010:	dfc00217 	ldw	ra,8(sp)
 8006014:	dc400117 	ldw	r17,4(sp)
 8006018:	dc000017 	ldw	r16,0(sp)
 800601c:	dec00304 	addi	sp,sp,12
 8006020:	f800283a 	ret
 8006024:	80c00017 	ldw	r3,0(r16)
 8006028:	183ff926 	beq	r3,zero,8006010 <__alt_mem_bufferram_out+0xf7e06010>
 800602c:	88c00015 	stw	r3,0(r17)
 8006030:	003ff706 	br	8006010 <__alt_mem_bufferram_out+0xf7e06010>

08006034 <_fstat_r>:
 8006034:	defffd04 	addi	sp,sp,-12
 8006038:	2805883a 	mov	r2,r5
 800603c:	dc000015 	stw	r16,0(sp)
 8006040:	04020074 	movhi	r16,2049
 8006044:	dc400115 	stw	r17,4(sp)
 8006048:	84330904 	addi	r16,r16,-13276
 800604c:	2023883a 	mov	r17,r4
 8006050:	300b883a 	mov	r5,r6
 8006054:	1009883a 	mov	r4,r2
 8006058:	dfc00215 	stw	ra,8(sp)
 800605c:	80000015 	stw	zero,0(r16)
 8006060:	80064400 	call	8006440 <fstat>
 8006064:	00ffffc4 	movi	r3,-1
 8006068:	10c00526 	beq	r2,r3,8006080 <_fstat_r+0x4c>
 800606c:	dfc00217 	ldw	ra,8(sp)
 8006070:	dc400117 	ldw	r17,4(sp)
 8006074:	dc000017 	ldw	r16,0(sp)
 8006078:	dec00304 	addi	sp,sp,12
 800607c:	f800283a 	ret
 8006080:	80c00017 	ldw	r3,0(r16)
 8006084:	183ff926 	beq	r3,zero,800606c <__alt_mem_bufferram_out+0xf7e0606c>
 8006088:	88c00015 	stw	r3,0(r17)
 800608c:	003ff706 	br	800606c <__alt_mem_bufferram_out+0xf7e0606c>

08006090 <_isatty_r>:
 8006090:	defffd04 	addi	sp,sp,-12
 8006094:	dc000015 	stw	r16,0(sp)
 8006098:	04020074 	movhi	r16,2049
 800609c:	dc400115 	stw	r17,4(sp)
 80060a0:	84330904 	addi	r16,r16,-13276
 80060a4:	2023883a 	mov	r17,r4
 80060a8:	2809883a 	mov	r4,r5
 80060ac:	dfc00215 	stw	ra,8(sp)
 80060b0:	80000015 	stw	zero,0(r16)
 80060b4:	800654c0 	call	800654c <isatty>
 80060b8:	00ffffc4 	movi	r3,-1
 80060bc:	10c00526 	beq	r2,r3,80060d4 <_isatty_r+0x44>
 80060c0:	dfc00217 	ldw	ra,8(sp)
 80060c4:	dc400117 	ldw	r17,4(sp)
 80060c8:	dc000017 	ldw	r16,0(sp)
 80060cc:	dec00304 	addi	sp,sp,12
 80060d0:	f800283a 	ret
 80060d4:	80c00017 	ldw	r3,0(r16)
 80060d8:	183ff926 	beq	r3,zero,80060c0 <__alt_mem_bufferram_out+0xf7e060c0>
 80060dc:	88c00015 	stw	r3,0(r17)
 80060e0:	003ff706 	br	80060c0 <__alt_mem_bufferram_out+0xf7e060c0>

080060e4 <__divsi3>:
 80060e4:	20001b16 	blt	r4,zero,8006154 <__divsi3+0x70>
 80060e8:	000f883a 	mov	r7,zero
 80060ec:	28001616 	blt	r5,zero,8006148 <__divsi3+0x64>
 80060f0:	200d883a 	mov	r6,r4
 80060f4:	29001a2e 	bgeu	r5,r4,8006160 <__divsi3+0x7c>
 80060f8:	00800804 	movi	r2,32
 80060fc:	00c00044 	movi	r3,1
 8006100:	00000106 	br	8006108 <__divsi3+0x24>
 8006104:	10000d26 	beq	r2,zero,800613c <__divsi3+0x58>
 8006108:	294b883a 	add	r5,r5,r5
 800610c:	10bfffc4 	addi	r2,r2,-1
 8006110:	18c7883a 	add	r3,r3,r3
 8006114:	293ffb36 	bltu	r5,r4,8006104 <__alt_mem_bufferram_out+0xf7e06104>
 8006118:	0005883a 	mov	r2,zero
 800611c:	18000726 	beq	r3,zero,800613c <__divsi3+0x58>
 8006120:	0005883a 	mov	r2,zero
 8006124:	31400236 	bltu	r6,r5,8006130 <__divsi3+0x4c>
 8006128:	314dc83a 	sub	r6,r6,r5
 800612c:	10c4b03a 	or	r2,r2,r3
 8006130:	1806d07a 	srli	r3,r3,1
 8006134:	280ad07a 	srli	r5,r5,1
 8006138:	183ffa1e 	bne	r3,zero,8006124 <__alt_mem_bufferram_out+0xf7e06124>
 800613c:	38000126 	beq	r7,zero,8006144 <__divsi3+0x60>
 8006140:	0085c83a 	sub	r2,zero,r2
 8006144:	f800283a 	ret
 8006148:	014bc83a 	sub	r5,zero,r5
 800614c:	39c0005c 	xori	r7,r7,1
 8006150:	003fe706 	br	80060f0 <__alt_mem_bufferram_out+0xf7e060f0>
 8006154:	0109c83a 	sub	r4,zero,r4
 8006158:	01c00044 	movi	r7,1
 800615c:	003fe306 	br	80060ec <__alt_mem_bufferram_out+0xf7e060ec>
 8006160:	00c00044 	movi	r3,1
 8006164:	003fee06 	br	8006120 <__alt_mem_bufferram_out+0xf7e06120>

08006168 <__modsi3>:
 8006168:	20001716 	blt	r4,zero,80061c8 <__modsi3+0x60>
 800616c:	000f883a 	mov	r7,zero
 8006170:	2005883a 	mov	r2,r4
 8006174:	28001216 	blt	r5,zero,80061c0 <__modsi3+0x58>
 8006178:	2900162e 	bgeu	r5,r4,80061d4 <__modsi3+0x6c>
 800617c:	01800804 	movi	r6,32
 8006180:	00c00044 	movi	r3,1
 8006184:	00000106 	br	800618c <__modsi3+0x24>
 8006188:	30000a26 	beq	r6,zero,80061b4 <__modsi3+0x4c>
 800618c:	294b883a 	add	r5,r5,r5
 8006190:	31bfffc4 	addi	r6,r6,-1
 8006194:	18c7883a 	add	r3,r3,r3
 8006198:	293ffb36 	bltu	r5,r4,8006188 <__alt_mem_bufferram_out+0xf7e06188>
 800619c:	18000526 	beq	r3,zero,80061b4 <__modsi3+0x4c>
 80061a0:	1806d07a 	srli	r3,r3,1
 80061a4:	11400136 	bltu	r2,r5,80061ac <__modsi3+0x44>
 80061a8:	1145c83a 	sub	r2,r2,r5
 80061ac:	280ad07a 	srli	r5,r5,1
 80061b0:	183ffb1e 	bne	r3,zero,80061a0 <__alt_mem_bufferram_out+0xf7e061a0>
 80061b4:	38000126 	beq	r7,zero,80061bc <__modsi3+0x54>
 80061b8:	0085c83a 	sub	r2,zero,r2
 80061bc:	f800283a 	ret
 80061c0:	014bc83a 	sub	r5,zero,r5
 80061c4:	003fec06 	br	8006178 <__alt_mem_bufferram_out+0xf7e06178>
 80061c8:	0109c83a 	sub	r4,zero,r4
 80061cc:	01c00044 	movi	r7,1
 80061d0:	003fe706 	br	8006170 <__alt_mem_bufferram_out+0xf7e06170>
 80061d4:	00c00044 	movi	r3,1
 80061d8:	003ff106 	br	80061a0 <__alt_mem_bufferram_out+0xf7e061a0>

080061dc <__udivsi3>:
 80061dc:	200d883a 	mov	r6,r4
 80061e0:	2900152e 	bgeu	r5,r4,8006238 <__udivsi3+0x5c>
 80061e4:	28001416 	blt	r5,zero,8006238 <__udivsi3+0x5c>
 80061e8:	00800804 	movi	r2,32
 80061ec:	00c00044 	movi	r3,1
 80061f0:	00000206 	br	80061fc <__udivsi3+0x20>
 80061f4:	10000e26 	beq	r2,zero,8006230 <__udivsi3+0x54>
 80061f8:	28000516 	blt	r5,zero,8006210 <__udivsi3+0x34>
 80061fc:	294b883a 	add	r5,r5,r5
 8006200:	10bfffc4 	addi	r2,r2,-1
 8006204:	18c7883a 	add	r3,r3,r3
 8006208:	293ffa36 	bltu	r5,r4,80061f4 <__alt_mem_bufferram_out+0xf7e061f4>
 800620c:	18000826 	beq	r3,zero,8006230 <__udivsi3+0x54>
 8006210:	0005883a 	mov	r2,zero
 8006214:	31400236 	bltu	r6,r5,8006220 <__udivsi3+0x44>
 8006218:	314dc83a 	sub	r6,r6,r5
 800621c:	10c4b03a 	or	r2,r2,r3
 8006220:	1806d07a 	srli	r3,r3,1
 8006224:	280ad07a 	srli	r5,r5,1
 8006228:	183ffa1e 	bne	r3,zero,8006214 <__alt_mem_bufferram_out+0xf7e06214>
 800622c:	f800283a 	ret
 8006230:	0005883a 	mov	r2,zero
 8006234:	f800283a 	ret
 8006238:	00c00044 	movi	r3,1
 800623c:	003ff406 	br	8006210 <__alt_mem_bufferram_out+0xf7e06210>

08006240 <__umodsi3>:
 8006240:	2005883a 	mov	r2,r4
 8006244:	2900122e 	bgeu	r5,r4,8006290 <__umodsi3+0x50>
 8006248:	28001116 	blt	r5,zero,8006290 <__umodsi3+0x50>
 800624c:	01800804 	movi	r6,32
 8006250:	00c00044 	movi	r3,1
 8006254:	00000206 	br	8006260 <__umodsi3+0x20>
 8006258:	30000c26 	beq	r6,zero,800628c <__umodsi3+0x4c>
 800625c:	28000516 	blt	r5,zero,8006274 <__umodsi3+0x34>
 8006260:	294b883a 	add	r5,r5,r5
 8006264:	31bfffc4 	addi	r6,r6,-1
 8006268:	18c7883a 	add	r3,r3,r3
 800626c:	293ffa36 	bltu	r5,r4,8006258 <__alt_mem_bufferram_out+0xf7e06258>
 8006270:	18000626 	beq	r3,zero,800628c <__umodsi3+0x4c>
 8006274:	1806d07a 	srli	r3,r3,1
 8006278:	11400136 	bltu	r2,r5,8006280 <__umodsi3+0x40>
 800627c:	1145c83a 	sub	r2,r2,r5
 8006280:	280ad07a 	srli	r5,r5,1
 8006284:	183ffb1e 	bne	r3,zero,8006274 <__alt_mem_bufferram_out+0xf7e06274>
 8006288:	f800283a 	ret
 800628c:	f800283a 	ret
 8006290:	00c00044 	movi	r3,1
 8006294:	003ff706 	br	8006274 <__alt_mem_bufferram_out+0xf7e06274>

08006298 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8006298:	defffe04 	addi	sp,sp,-8
 800629c:	dfc00115 	stw	ra,4(sp)
 80062a0:	df000015 	stw	fp,0(sp)
 80062a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80062a8:	d0a01417 	ldw	r2,-32688(gp)
 80062ac:	10000326 	beq	r2,zero,80062bc <alt_get_errno+0x24>
 80062b0:	d0a01417 	ldw	r2,-32688(gp)
 80062b4:	103ee83a 	callr	r2
 80062b8:	00000106 	br	80062c0 <alt_get_errno+0x28>
 80062bc:	d0a6c604 	addi	r2,gp,-25832
}
 80062c0:	e037883a 	mov	sp,fp
 80062c4:	dfc00117 	ldw	ra,4(sp)
 80062c8:	df000017 	ldw	fp,0(sp)
 80062cc:	dec00204 	addi	sp,sp,8
 80062d0:	f800283a 	ret

080062d4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 80062d4:	defffb04 	addi	sp,sp,-20
 80062d8:	dfc00415 	stw	ra,16(sp)
 80062dc:	df000315 	stw	fp,12(sp)
 80062e0:	df000304 	addi	fp,sp,12
 80062e4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 80062e8:	e0bfff17 	ldw	r2,-4(fp)
 80062ec:	10000616 	blt	r2,zero,8006308 <close+0x34>
 80062f0:	e0bfff17 	ldw	r2,-4(fp)
 80062f4:	10c00324 	muli	r3,r2,12
 80062f8:	00820074 	movhi	r2,2049
 80062fc:	10a7cb04 	addi	r2,r2,-24788
 8006300:	1885883a 	add	r2,r3,r2
 8006304:	00000106 	br	800630c <close+0x38>
 8006308:	0005883a 	mov	r2,zero
 800630c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 8006310:	e0bffd17 	ldw	r2,-12(fp)
 8006314:	10001926 	beq	r2,zero,800637c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 8006318:	e0bffd17 	ldw	r2,-12(fp)
 800631c:	10800017 	ldw	r2,0(r2)
 8006320:	10800417 	ldw	r2,16(r2)
 8006324:	10000626 	beq	r2,zero,8006340 <close+0x6c>
 8006328:	e0bffd17 	ldw	r2,-12(fp)
 800632c:	10800017 	ldw	r2,0(r2)
 8006330:	10800417 	ldw	r2,16(r2)
 8006334:	e13ffd17 	ldw	r4,-12(fp)
 8006338:	103ee83a 	callr	r2
 800633c:	00000106 	br	8006344 <close+0x70>
 8006340:	0005883a 	mov	r2,zero
 8006344:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 8006348:	e13fff17 	ldw	r4,-4(fp)
 800634c:	8006b540 	call	8006b54 <alt_release_fd>
    if (rval < 0)
 8006350:	e0bffe17 	ldw	r2,-8(fp)
 8006354:	1000070e 	bge	r2,zero,8006374 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 8006358:	80062980 	call	8006298 <alt_get_errno>
 800635c:	1007883a 	mov	r3,r2
 8006360:	e0bffe17 	ldw	r2,-8(fp)
 8006364:	0085c83a 	sub	r2,zero,r2
 8006368:	18800015 	stw	r2,0(r3)
      return -1;
 800636c:	00bfffc4 	movi	r2,-1
 8006370:	00000706 	br	8006390 <close+0xbc>
    }
    return 0;
 8006374:	0005883a 	mov	r2,zero
 8006378:	00000506 	br	8006390 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800637c:	80062980 	call	8006298 <alt_get_errno>
 8006380:	1007883a 	mov	r3,r2
 8006384:	00801444 	movi	r2,81
 8006388:	18800015 	stw	r2,0(r3)
    return -1;
 800638c:	00bfffc4 	movi	r2,-1
  }
}
 8006390:	e037883a 	mov	sp,fp
 8006394:	dfc00117 	ldw	ra,4(sp)
 8006398:	df000017 	ldw	fp,0(sp)
 800639c:	dec00204 	addi	sp,sp,8
 80063a0:	f800283a 	ret

080063a4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 80063a4:	defffc04 	addi	sp,sp,-16
 80063a8:	df000315 	stw	fp,12(sp)
 80063ac:	df000304 	addi	fp,sp,12
 80063b0:	e13ffd15 	stw	r4,-12(fp)
 80063b4:	e17ffe15 	stw	r5,-8(fp)
 80063b8:	e1bfff15 	stw	r6,-4(fp)
  return len;
 80063bc:	e0bfff17 	ldw	r2,-4(fp)
}
 80063c0:	e037883a 	mov	sp,fp
 80063c4:	df000017 	ldw	fp,0(sp)
 80063c8:	dec00104 	addi	sp,sp,4
 80063cc:	f800283a 	ret

080063d0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 80063d0:	defffd04 	addi	sp,sp,-12
 80063d4:	df000215 	stw	fp,8(sp)
 80063d8:	df000204 	addi	fp,sp,8
 80063dc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 80063e0:	0001883a 	nop
 80063e4:	e0bfff17 	ldw	r2,-4(fp)
 80063e8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 80063ec:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 80063f0:	10000226 	beq	r2,zero,80063fc <_exit+0x2c>
    ALT_SIM_FAIL();
 80063f4:	002af070 	cmpltui	zero,zero,43969
 80063f8:	00000106 	br	8006400 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 80063fc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8006400:	003fff06 	br	8006400 <__alt_mem_bufferram_out+0xf7e06400>

08006404 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8006404:	defffe04 	addi	sp,sp,-8
 8006408:	dfc00115 	stw	ra,4(sp)
 800640c:	df000015 	stw	fp,0(sp)
 8006410:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8006414:	d0a01417 	ldw	r2,-32688(gp)
 8006418:	10000326 	beq	r2,zero,8006428 <alt_get_errno+0x24>
 800641c:	d0a01417 	ldw	r2,-32688(gp)
 8006420:	103ee83a 	callr	r2
 8006424:	00000106 	br	800642c <alt_get_errno+0x28>
 8006428:	d0a6c604 	addi	r2,gp,-25832
}
 800642c:	e037883a 	mov	sp,fp
 8006430:	dfc00117 	ldw	ra,4(sp)
 8006434:	df000017 	ldw	fp,0(sp)
 8006438:	dec00204 	addi	sp,sp,8
 800643c:	f800283a 	ret

08006440 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 8006440:	defffb04 	addi	sp,sp,-20
 8006444:	dfc00415 	stw	ra,16(sp)
 8006448:	df000315 	stw	fp,12(sp)
 800644c:	df000304 	addi	fp,sp,12
 8006450:	e13ffe15 	stw	r4,-8(fp)
 8006454:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8006458:	e0bffe17 	ldw	r2,-8(fp)
 800645c:	10000616 	blt	r2,zero,8006478 <fstat+0x38>
 8006460:	e0bffe17 	ldw	r2,-8(fp)
 8006464:	10c00324 	muli	r3,r2,12
 8006468:	00820074 	movhi	r2,2049
 800646c:	10a7cb04 	addi	r2,r2,-24788
 8006470:	1885883a 	add	r2,r3,r2
 8006474:	00000106 	br	800647c <fstat+0x3c>
 8006478:	0005883a 	mov	r2,zero
 800647c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 8006480:	e0bffd17 	ldw	r2,-12(fp)
 8006484:	10001026 	beq	r2,zero,80064c8 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 8006488:	e0bffd17 	ldw	r2,-12(fp)
 800648c:	10800017 	ldw	r2,0(r2)
 8006490:	10800817 	ldw	r2,32(r2)
 8006494:	10000726 	beq	r2,zero,80064b4 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 8006498:	e0bffd17 	ldw	r2,-12(fp)
 800649c:	10800017 	ldw	r2,0(r2)
 80064a0:	10800817 	ldw	r2,32(r2)
 80064a4:	e17fff17 	ldw	r5,-4(fp)
 80064a8:	e13ffd17 	ldw	r4,-12(fp)
 80064ac:	103ee83a 	callr	r2
 80064b0:	00000a06 	br	80064dc <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 80064b4:	e0bfff17 	ldw	r2,-4(fp)
 80064b8:	00c80004 	movi	r3,8192
 80064bc:	10c00115 	stw	r3,4(r2)
      return 0;
 80064c0:	0005883a 	mov	r2,zero
 80064c4:	00000506 	br	80064dc <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 80064c8:	80064040 	call	8006404 <alt_get_errno>
 80064cc:	1007883a 	mov	r3,r2
 80064d0:	00801444 	movi	r2,81
 80064d4:	18800015 	stw	r2,0(r3)
    return -1;
 80064d8:	00bfffc4 	movi	r2,-1
  }
}
 80064dc:	e037883a 	mov	sp,fp
 80064e0:	dfc00117 	ldw	ra,4(sp)
 80064e4:	df000017 	ldw	fp,0(sp)
 80064e8:	dec00204 	addi	sp,sp,8
 80064ec:	f800283a 	ret

080064f0 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
 80064f0:	deffff04 	addi	sp,sp,-4
 80064f4:	df000015 	stw	fp,0(sp)
 80064f8:	d839883a 	mov	fp,sp
  return 0;
 80064fc:	0005883a 	mov	r2,zero
}
 8006500:	e037883a 	mov	sp,fp
 8006504:	df000017 	ldw	fp,0(sp)
 8006508:	dec00104 	addi	sp,sp,4
 800650c:	f800283a 	ret

08006510 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8006510:	defffe04 	addi	sp,sp,-8
 8006514:	dfc00115 	stw	ra,4(sp)
 8006518:	df000015 	stw	fp,0(sp)
 800651c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8006520:	d0a01417 	ldw	r2,-32688(gp)
 8006524:	10000326 	beq	r2,zero,8006534 <alt_get_errno+0x24>
 8006528:	d0a01417 	ldw	r2,-32688(gp)
 800652c:	103ee83a 	callr	r2
 8006530:	00000106 	br	8006538 <alt_get_errno+0x28>
 8006534:	d0a6c604 	addi	r2,gp,-25832
}
 8006538:	e037883a 	mov	sp,fp
 800653c:	dfc00117 	ldw	ra,4(sp)
 8006540:	df000017 	ldw	fp,0(sp)
 8006544:	dec00204 	addi	sp,sp,8
 8006548:	f800283a 	ret

0800654c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 800654c:	deffed04 	addi	sp,sp,-76
 8006550:	dfc01215 	stw	ra,72(sp)
 8006554:	df001115 	stw	fp,68(sp)
 8006558:	df001104 	addi	fp,sp,68
 800655c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8006560:	e0bfff17 	ldw	r2,-4(fp)
 8006564:	10000616 	blt	r2,zero,8006580 <isatty+0x34>
 8006568:	e0bfff17 	ldw	r2,-4(fp)
 800656c:	10c00324 	muli	r3,r2,12
 8006570:	00820074 	movhi	r2,2049
 8006574:	10a7cb04 	addi	r2,r2,-24788
 8006578:	1885883a 	add	r2,r3,r2
 800657c:	00000106 	br	8006584 <isatty+0x38>
 8006580:	0005883a 	mov	r2,zero
 8006584:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 8006588:	e0bfef17 	ldw	r2,-68(fp)
 800658c:	10000e26 	beq	r2,zero,80065c8 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 8006590:	e0bfef17 	ldw	r2,-68(fp)
 8006594:	10800017 	ldw	r2,0(r2)
 8006598:	10800817 	ldw	r2,32(r2)
 800659c:	1000021e 	bne	r2,zero,80065a8 <isatty+0x5c>
    {
      return 1;
 80065a0:	00800044 	movi	r2,1
 80065a4:	00000d06 	br	80065dc <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 80065a8:	e0bff004 	addi	r2,fp,-64
 80065ac:	100b883a 	mov	r5,r2
 80065b0:	e13fff17 	ldw	r4,-4(fp)
 80065b4:	80064400 	call	8006440 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 80065b8:	e0bff117 	ldw	r2,-60(fp)
 80065bc:	10880020 	cmpeqi	r2,r2,8192
 80065c0:	10803fcc 	andi	r2,r2,255
 80065c4:	00000506 	br	80065dc <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 80065c8:	80065100 	call	8006510 <alt_get_errno>
 80065cc:	1007883a 	mov	r3,r2
 80065d0:	00801444 	movi	r2,81
 80065d4:	18800015 	stw	r2,0(r3)
    return 0;
 80065d8:	0005883a 	mov	r2,zero
  }
}
 80065dc:	e037883a 	mov	sp,fp
 80065e0:	dfc00117 	ldw	ra,4(sp)
 80065e4:	df000017 	ldw	fp,0(sp)
 80065e8:	dec00204 	addi	sp,sp,8
 80065ec:	f800283a 	ret

080065f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80065f0:	defffe04 	addi	sp,sp,-8
 80065f4:	dfc00115 	stw	ra,4(sp)
 80065f8:	df000015 	stw	fp,0(sp)
 80065fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8006600:	d0a01417 	ldw	r2,-32688(gp)
 8006604:	10000326 	beq	r2,zero,8006614 <alt_get_errno+0x24>
 8006608:	d0a01417 	ldw	r2,-32688(gp)
 800660c:	103ee83a 	callr	r2
 8006610:	00000106 	br	8006618 <alt_get_errno+0x28>
 8006614:	d0a6c604 	addi	r2,gp,-25832
}
 8006618:	e037883a 	mov	sp,fp
 800661c:	dfc00117 	ldw	ra,4(sp)
 8006620:	df000017 	ldw	fp,0(sp)
 8006624:	dec00204 	addi	sp,sp,8
 8006628:	f800283a 	ret

0800662c <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
 800662c:	defffb04 	addi	sp,sp,-20
 8006630:	dfc00415 	stw	ra,16(sp)
 8006634:	df000315 	stw	fp,12(sp)
 8006638:	df000304 	addi	fp,sp,12
 800663c:	e13ffe15 	stw	r4,-8(fp)
 8006640:	e17fff15 	stw	r5,-4(fp)
  int status = 0;
 8006644:	e03ffd15 	stw	zero,-12(fp)

  if (pid <= 0)
 8006648:	e0bffe17 	ldw	r2,-8(fp)
 800664c:	00802f16 	blt	zero,r2,800670c <kill+0xe0>
  {
    switch (sig)
 8006650:	e0bfff17 	ldw	r2,-4(fp)
 8006654:	10800828 	cmpgeui	r2,r2,32
 8006658:	1000291e 	bne	r2,zero,8006700 <kill+0xd4>
 800665c:	e0bfff17 	ldw	r2,-4(fp)
 8006660:	100690ba 	slli	r3,r2,2
 8006664:	00820034 	movhi	r2,2048
 8006668:	10999e04 	addi	r2,r2,26232
 800666c:	1885883a 	add	r2,r3,r2
 8006670:	10800017 	ldw	r2,0(r2)
 8006674:	1000683a 	jmp	r2
 8006678:	08006720 	cmpeqi	zero,at,412
 800667c:	08006700 	call	800670 <__alt_mem_sdram-0x77ff990>
 8006680:	08006700 	call	800670 <__alt_mem_sdram-0x77ff990>
 8006684:	080066f8 	rdprs	zero,at,411
 8006688:	080066f8 	rdprs	zero,at,411
 800668c:	080066f8 	rdprs	zero,at,411
 8006690:	080066f8 	rdprs	zero,at,411
 8006694:	08006700 	call	800670 <__alt_mem_sdram-0x77ff990>
 8006698:	080066f8 	rdprs	zero,at,411
 800669c:	080066f8 	rdprs	zero,at,411
 80066a0:	080066f8 	rdprs	zero,at,411
 80066a4:	080066f8 	rdprs	zero,at,411
 80066a8:	080066f8 	rdprs	zero,at,411
 80066ac:	080066f8 	rdprs	zero,at,411
 80066b0:	080066f8 	rdprs	zero,at,411
 80066b4:	080066f8 	rdprs	zero,at,411
 80066b8:	08006720 	cmpeqi	zero,at,412
 80066bc:	08006700 	call	800670 <__alt_mem_sdram-0x77ff990>
 80066c0:	08006700 	call	800670 <__alt_mem_sdram-0x77ff990>
 80066c4:	08006700 	call	800670 <__alt_mem_sdram-0x77ff990>
 80066c8:	08006720 	cmpeqi	zero,at,412
 80066cc:	08006700 	call	800670 <__alt_mem_sdram-0x77ff990>
 80066d0:	08006700 	call	800670 <__alt_mem_sdram-0x77ff990>
 80066d4:	080066f8 	rdprs	zero,at,411
 80066d8:	080066f8 	rdprs	zero,at,411
 80066dc:	080066f8 	rdprs	zero,at,411
 80066e0:	080066f8 	rdprs	zero,at,411
 80066e4:	080066f8 	rdprs	zero,at,411
 80066e8:	08006700 	call	800670 <__alt_mem_sdram-0x77ff990>
 80066ec:	08006700 	call	800670 <__alt_mem_sdram-0x77ff990>
 80066f0:	080066f8 	rdprs	zero,at,411
 80066f4:	080066f8 	rdprs	zero,at,411
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
 80066f8:	0009883a 	mov	r4,zero
 80066fc:	80063d00 	call	80063d0 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
 8006700:	00800584 	movi	r2,22
 8006704:	e0bffd15 	stw	r2,-12(fp)
 8006708:	00000606 	br	8006724 <kill+0xf8>
    }
  }

  else if (pid > 0)
 800670c:	e0bffe17 	ldw	r2,-8(fp)
 8006710:	0080040e 	bge	zero,r2,8006724 <kill+0xf8>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
 8006714:	008000c4 	movi	r2,3
 8006718:	e0bffd15 	stw	r2,-12(fp)
 800671c:	00000106 	br	8006724 <kill+0xf8>
    {
    case 0:

      /* The null signal is used to check that a pid is valid. */

      break;
 8006720:	0001883a 	nop
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  }

  if (status)
 8006724:	e0bffd17 	ldw	r2,-12(fp)
 8006728:	10000626 	beq	r2,zero,8006744 <kill+0x118>
  {
    ALT_ERRNO = status;
 800672c:	80065f00 	call	80065f0 <alt_get_errno>
 8006730:	1007883a 	mov	r3,r2
 8006734:	e0bffd17 	ldw	r2,-12(fp)
 8006738:	18800015 	stw	r2,0(r3)
    return -1;
 800673c:	00bfffc4 	movi	r2,-1
 8006740:	00000106 	br	8006748 <kill+0x11c>
  }

  return 0;
 8006744:	0005883a 	mov	r2,zero
}
 8006748:	e037883a 	mov	sp,fp
 800674c:	dfc00117 	ldw	ra,4(sp)
 8006750:	df000017 	ldw	fp,0(sp)
 8006754:	dec00204 	addi	sp,sp,8
 8006758:	f800283a 	ret

0800675c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 800675c:	defffc04 	addi	sp,sp,-16
 8006760:	df000315 	stw	fp,12(sp)
 8006764:	df000304 	addi	fp,sp,12
 8006768:	e13ffd15 	stw	r4,-12(fp)
 800676c:	e17ffe15 	stw	r5,-8(fp)
 8006770:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 8006774:	e0fffe17 	ldw	r3,-8(fp)
 8006778:	e0bffd17 	ldw	r2,-12(fp)
 800677c:	18800c26 	beq	r3,r2,80067b0 <alt_load_section+0x54>
  {
    while( to != end )
 8006780:	00000806 	br	80067a4 <alt_load_section+0x48>
    {
      *to++ = *from++;
 8006784:	e0bffe17 	ldw	r2,-8(fp)
 8006788:	10c00104 	addi	r3,r2,4
 800678c:	e0fffe15 	stw	r3,-8(fp)
 8006790:	e0fffd17 	ldw	r3,-12(fp)
 8006794:	19000104 	addi	r4,r3,4
 8006798:	e13ffd15 	stw	r4,-12(fp)
 800679c:	18c00017 	ldw	r3,0(r3)
 80067a0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 80067a4:	e0fffe17 	ldw	r3,-8(fp)
 80067a8:	e0bfff17 	ldw	r2,-4(fp)
 80067ac:	18bff51e 	bne	r3,r2,8006784 <__alt_mem_bufferram_out+0xf7e06784>
    {
      *to++ = *from++;
    }
  }
}
 80067b0:	0001883a 	nop
 80067b4:	e037883a 	mov	sp,fp
 80067b8:	df000017 	ldw	fp,0(sp)
 80067bc:	dec00104 	addi	sp,sp,4
 80067c0:	f800283a 	ret

080067c4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 80067c4:	defffe04 	addi	sp,sp,-8
 80067c8:	dfc00115 	stw	ra,4(sp)
 80067cc:	df000015 	stw	fp,0(sp)
 80067d0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 80067d4:	01820074 	movhi	r6,2049
 80067d8:	31ac5c04 	addi	r6,r6,-20112
 80067dc:	01420074 	movhi	r5,2049
 80067e0:	2965b604 	addi	r5,r5,-26920
 80067e4:	01020074 	movhi	r4,2049
 80067e8:	212c5c04 	addi	r4,r4,-20112
 80067ec:	800675c0 	call	800675c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 80067f0:	01820034 	movhi	r6,2048
 80067f4:	31809104 	addi	r6,r6,580
 80067f8:	01420034 	movhi	r5,2048
 80067fc:	29400804 	addi	r5,r5,32
 8006800:	01020034 	movhi	r4,2048
 8006804:	21000804 	addi	r4,r4,32
 8006808:	800675c0 	call	800675c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 800680c:	01820074 	movhi	r6,2049
 8006810:	31a5b604 	addi	r6,r6,-26920
 8006814:	01420074 	movhi	r5,2049
 8006818:	29630604 	addi	r5,r5,-29672
 800681c:	01020074 	movhi	r4,2049
 8006820:	21230604 	addi	r4,r4,-29672
 8006824:	800675c0 	call	800675c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 8006828:	8007af40 	call	8007af4 <alt_dcache_flush_all>
  alt_icache_flush_all();
 800682c:	8007cdc0 	call	8007cdc <alt_icache_flush_all>
}
 8006830:	0001883a 	nop
 8006834:	e037883a 	mov	sp,fp
 8006838:	dfc00117 	ldw	ra,4(sp)
 800683c:	df000017 	ldw	fp,0(sp)
 8006840:	dec00204 	addi	sp,sp,8
 8006844:	f800283a 	ret

08006848 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8006848:	defffe04 	addi	sp,sp,-8
 800684c:	dfc00115 	stw	ra,4(sp)
 8006850:	df000015 	stw	fp,0(sp)
 8006854:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8006858:	d0a01417 	ldw	r2,-32688(gp)
 800685c:	10000326 	beq	r2,zero,800686c <alt_get_errno+0x24>
 8006860:	d0a01417 	ldw	r2,-32688(gp)
 8006864:	103ee83a 	callr	r2
 8006868:	00000106 	br	8006870 <alt_get_errno+0x28>
 800686c:	d0a6c604 	addi	r2,gp,-25832
}
 8006870:	e037883a 	mov	sp,fp
 8006874:	dfc00117 	ldw	ra,4(sp)
 8006878:	df000017 	ldw	fp,0(sp)
 800687c:	dec00204 	addi	sp,sp,8
 8006880:	f800283a 	ret

08006884 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 8006884:	defff904 	addi	sp,sp,-28
 8006888:	dfc00615 	stw	ra,24(sp)
 800688c:	df000515 	stw	fp,20(sp)
 8006890:	df000504 	addi	fp,sp,20
 8006894:	e13ffd15 	stw	r4,-12(fp)
 8006898:	e17ffe15 	stw	r5,-8(fp)
 800689c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 80068a0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80068a4:	e0bffd17 	ldw	r2,-12(fp)
 80068a8:	10000616 	blt	r2,zero,80068c4 <lseek+0x40>
 80068ac:	e0bffd17 	ldw	r2,-12(fp)
 80068b0:	10c00324 	muli	r3,r2,12
 80068b4:	00820074 	movhi	r2,2049
 80068b8:	10a7cb04 	addi	r2,r2,-24788
 80068bc:	1885883a 	add	r2,r3,r2
 80068c0:	00000106 	br	80068c8 <lseek+0x44>
 80068c4:	0005883a 	mov	r2,zero
 80068c8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 80068cc:	e0bffc17 	ldw	r2,-16(fp)
 80068d0:	10001026 	beq	r2,zero,8006914 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 80068d4:	e0bffc17 	ldw	r2,-16(fp)
 80068d8:	10800017 	ldw	r2,0(r2)
 80068dc:	10800717 	ldw	r2,28(r2)
 80068e0:	10000926 	beq	r2,zero,8006908 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 80068e4:	e0bffc17 	ldw	r2,-16(fp)
 80068e8:	10800017 	ldw	r2,0(r2)
 80068ec:	10800717 	ldw	r2,28(r2)
 80068f0:	e1bfff17 	ldw	r6,-4(fp)
 80068f4:	e17ffe17 	ldw	r5,-8(fp)
 80068f8:	e13ffc17 	ldw	r4,-16(fp)
 80068fc:	103ee83a 	callr	r2
 8006900:	e0bffb15 	stw	r2,-20(fp)
 8006904:	00000506 	br	800691c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 8006908:	00bfde84 	movi	r2,-134
 800690c:	e0bffb15 	stw	r2,-20(fp)
 8006910:	00000206 	br	800691c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 8006914:	00bfebc4 	movi	r2,-81
 8006918:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 800691c:	e0bffb17 	ldw	r2,-20(fp)
 8006920:	1000070e 	bge	r2,zero,8006940 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 8006924:	80068480 	call	8006848 <alt_get_errno>
 8006928:	1007883a 	mov	r3,r2
 800692c:	e0bffb17 	ldw	r2,-20(fp)
 8006930:	0085c83a 	sub	r2,zero,r2
 8006934:	18800015 	stw	r2,0(r3)
    rc = -1;
 8006938:	00bfffc4 	movi	r2,-1
 800693c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 8006940:	e0bffb17 	ldw	r2,-20(fp)
}
 8006944:	e037883a 	mov	sp,fp
 8006948:	dfc00117 	ldw	ra,4(sp)
 800694c:	df000017 	ldw	fp,0(sp)
 8006950:	dec00204 	addi	sp,sp,8
 8006954:	f800283a 	ret

08006958 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8006958:	defffd04 	addi	sp,sp,-12
 800695c:	dfc00215 	stw	ra,8(sp)
 8006960:	df000115 	stw	fp,4(sp)
 8006964:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8006968:	0009883a 	mov	r4,zero
 800696c:	8006dd00 	call	8006dd0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 8006970:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 8006974:	8006e080 	call	8006e08 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 8006978:	01820074 	movhi	r6,2049
 800697c:	31a5ac04 	addi	r6,r6,-26960
 8006980:	01420074 	movhi	r5,2049
 8006984:	2965ac04 	addi	r5,r5,-26960
 8006988:	01020074 	movhi	r4,2049
 800698c:	2125ac04 	addi	r4,r4,-26960
 8006990:	80080740 	call	8008074 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 8006994:	8007c1c0 	call	8007c1c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 8006998:	01020034 	movhi	r4,2048
 800699c:	211f1f04 	addi	r4,r4,31868
 80069a0:	80088740 	call	8008874 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 80069a4:	d0a6c717 	ldw	r2,-25828(gp)
 80069a8:	d0e6c817 	ldw	r3,-25824(gp)
 80069ac:	d126c917 	ldw	r4,-25820(gp)
 80069b0:	200d883a 	mov	r6,r4
 80069b4:	180b883a 	mov	r5,r3
 80069b8:	1009883a 	mov	r4,r2
 80069bc:	80002d40 	call	80002d4 <main>
 80069c0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 80069c4:	01000044 	movi	r4,1
 80069c8:	80062d40 	call	80062d4 <close>
  exit (result);
 80069cc:	e13fff17 	ldw	r4,-4(fp)
 80069d0:	80088880 	call	8008888 <exit>

080069d4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 80069d4:	defffe04 	addi	sp,sp,-8
 80069d8:	df000115 	stw	fp,4(sp)
 80069dc:	df000104 	addi	fp,sp,4
 80069e0:	e13fff15 	stw	r4,-4(fp)
}
 80069e4:	0001883a 	nop
 80069e8:	e037883a 	mov	sp,fp
 80069ec:	df000017 	ldw	fp,0(sp)
 80069f0:	dec00104 	addi	sp,sp,4
 80069f4:	f800283a 	ret

080069f8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 80069f8:	defffe04 	addi	sp,sp,-8
 80069fc:	df000115 	stw	fp,4(sp)
 8006a00:	df000104 	addi	fp,sp,4
 8006a04:	e13fff15 	stw	r4,-4(fp)
}
 8006a08:	0001883a 	nop
 8006a0c:	e037883a 	mov	sp,fp
 8006a10:	df000017 	ldw	fp,0(sp)
 8006a14:	dec00104 	addi	sp,sp,4
 8006a18:	f800283a 	ret

08006a1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8006a1c:	defffe04 	addi	sp,sp,-8
 8006a20:	dfc00115 	stw	ra,4(sp)
 8006a24:	df000015 	stw	fp,0(sp)
 8006a28:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8006a2c:	d0a01417 	ldw	r2,-32688(gp)
 8006a30:	10000326 	beq	r2,zero,8006a40 <alt_get_errno+0x24>
 8006a34:	d0a01417 	ldw	r2,-32688(gp)
 8006a38:	103ee83a 	callr	r2
 8006a3c:	00000106 	br	8006a44 <alt_get_errno+0x28>
 8006a40:	d0a6c604 	addi	r2,gp,-25832
}
 8006a44:	e037883a 	mov	sp,fp
 8006a48:	dfc00117 	ldw	ra,4(sp)
 8006a4c:	df000017 	ldw	fp,0(sp)
 8006a50:	dec00204 	addi	sp,sp,8
 8006a54:	f800283a 	ret

08006a58 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 8006a58:	defff904 	addi	sp,sp,-28
 8006a5c:	dfc00615 	stw	ra,24(sp)
 8006a60:	df000515 	stw	fp,20(sp)
 8006a64:	df000504 	addi	fp,sp,20
 8006a68:	e13ffd15 	stw	r4,-12(fp)
 8006a6c:	e17ffe15 	stw	r5,-8(fp)
 8006a70:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8006a74:	e0bffd17 	ldw	r2,-12(fp)
 8006a78:	10000616 	blt	r2,zero,8006a94 <read+0x3c>
 8006a7c:	e0bffd17 	ldw	r2,-12(fp)
 8006a80:	10c00324 	muli	r3,r2,12
 8006a84:	00820074 	movhi	r2,2049
 8006a88:	10a7cb04 	addi	r2,r2,-24788
 8006a8c:	1885883a 	add	r2,r3,r2
 8006a90:	00000106 	br	8006a98 <read+0x40>
 8006a94:	0005883a 	mov	r2,zero
 8006a98:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8006a9c:	e0bffb17 	ldw	r2,-20(fp)
 8006aa0:	10002226 	beq	r2,zero,8006b2c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8006aa4:	e0bffb17 	ldw	r2,-20(fp)
 8006aa8:	10800217 	ldw	r2,8(r2)
 8006aac:	108000cc 	andi	r2,r2,3
 8006ab0:	10800060 	cmpeqi	r2,r2,1
 8006ab4:	1000181e 	bne	r2,zero,8006b18 <read+0xc0>
        (fd->dev->read))
 8006ab8:	e0bffb17 	ldw	r2,-20(fp)
 8006abc:	10800017 	ldw	r2,0(r2)
 8006ac0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8006ac4:	10001426 	beq	r2,zero,8006b18 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 8006ac8:	e0bffb17 	ldw	r2,-20(fp)
 8006acc:	10800017 	ldw	r2,0(r2)
 8006ad0:	10800517 	ldw	r2,20(r2)
 8006ad4:	e0ffff17 	ldw	r3,-4(fp)
 8006ad8:	180d883a 	mov	r6,r3
 8006adc:	e17ffe17 	ldw	r5,-8(fp)
 8006ae0:	e13ffb17 	ldw	r4,-20(fp)
 8006ae4:	103ee83a 	callr	r2
 8006ae8:	e0bffc15 	stw	r2,-16(fp)
 8006aec:	e0bffc17 	ldw	r2,-16(fp)
 8006af0:	1000070e 	bge	r2,zero,8006b10 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 8006af4:	8006a1c0 	call	8006a1c <alt_get_errno>
 8006af8:	1007883a 	mov	r3,r2
 8006afc:	e0bffc17 	ldw	r2,-16(fp)
 8006b00:	0085c83a 	sub	r2,zero,r2
 8006b04:	18800015 	stw	r2,0(r3)
          return -1;
 8006b08:	00bfffc4 	movi	r2,-1
 8006b0c:	00000c06 	br	8006b40 <read+0xe8>
        }
        return rval;
 8006b10:	e0bffc17 	ldw	r2,-16(fp)
 8006b14:	00000a06 	br	8006b40 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 8006b18:	8006a1c0 	call	8006a1c <alt_get_errno>
 8006b1c:	1007883a 	mov	r3,r2
 8006b20:	00800344 	movi	r2,13
 8006b24:	18800015 	stw	r2,0(r3)
 8006b28:	00000406 	br	8006b3c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 8006b2c:	8006a1c0 	call	8006a1c <alt_get_errno>
 8006b30:	1007883a 	mov	r3,r2
 8006b34:	00801444 	movi	r2,81
 8006b38:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8006b3c:	00bfffc4 	movi	r2,-1
}
 8006b40:	e037883a 	mov	sp,fp
 8006b44:	dfc00117 	ldw	ra,4(sp)
 8006b48:	df000017 	ldw	fp,0(sp)
 8006b4c:	dec00204 	addi	sp,sp,8
 8006b50:	f800283a 	ret

08006b54 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 8006b54:	defffe04 	addi	sp,sp,-8
 8006b58:	df000115 	stw	fp,4(sp)
 8006b5c:	df000104 	addi	fp,sp,4
 8006b60:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 8006b64:	e0bfff17 	ldw	r2,-4(fp)
 8006b68:	108000d0 	cmplti	r2,r2,3
 8006b6c:	10000d1e 	bne	r2,zero,8006ba4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 8006b70:	00820074 	movhi	r2,2049
 8006b74:	10a7cb04 	addi	r2,r2,-24788
 8006b78:	e0ffff17 	ldw	r3,-4(fp)
 8006b7c:	18c00324 	muli	r3,r3,12
 8006b80:	10c5883a 	add	r2,r2,r3
 8006b84:	10800204 	addi	r2,r2,8
 8006b88:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 8006b8c:	00820074 	movhi	r2,2049
 8006b90:	10a7cb04 	addi	r2,r2,-24788
 8006b94:	e0ffff17 	ldw	r3,-4(fp)
 8006b98:	18c00324 	muli	r3,r3,12
 8006b9c:	10c5883a 	add	r2,r2,r3
 8006ba0:	10000015 	stw	zero,0(r2)
  }
}
 8006ba4:	0001883a 	nop
 8006ba8:	e037883a 	mov	sp,fp
 8006bac:	df000017 	ldw	fp,0(sp)
 8006bb0:	dec00104 	addi	sp,sp,4
 8006bb4:	f800283a 	ret

08006bb8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 8006bb8:	defff904 	addi	sp,sp,-28
 8006bbc:	df000615 	stw	fp,24(sp)
 8006bc0:	df000604 	addi	fp,sp,24
 8006bc4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8006bc8:	0005303a 	rdctl	r2,status
 8006bcc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8006bd0:	e0fffe17 	ldw	r3,-8(fp)
 8006bd4:	00bfff84 	movi	r2,-2
 8006bd8:	1884703a 	and	r2,r3,r2
 8006bdc:	1001703a 	wrctl	status,r2
  
  return context;
 8006be0:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 8006be4:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 8006be8:	d0a01517 	ldw	r2,-32684(gp)
 8006bec:	10c000c4 	addi	r3,r2,3
 8006bf0:	00bfff04 	movi	r2,-4
 8006bf4:	1884703a 	and	r2,r3,r2
 8006bf8:	d0a01515 	stw	r2,-32684(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 8006bfc:	d0e01517 	ldw	r3,-32684(gp)
 8006c00:	e0bfff17 	ldw	r2,-4(fp)
 8006c04:	1887883a 	add	r3,r3,r2
 8006c08:	00840034 	movhi	r2,4096
 8006c0c:	10800004 	addi	r2,r2,0
 8006c10:	10c0062e 	bgeu	r2,r3,8006c2c <sbrk+0x74>
 8006c14:	e0bffb17 	ldw	r2,-20(fp)
 8006c18:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8006c1c:	e0bffa17 	ldw	r2,-24(fp)
 8006c20:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 8006c24:	00bfffc4 	movi	r2,-1
 8006c28:	00000b06 	br	8006c58 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 8006c2c:	d0a01517 	ldw	r2,-32684(gp)
 8006c30:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 8006c34:	d0e01517 	ldw	r3,-32684(gp)
 8006c38:	e0bfff17 	ldw	r2,-4(fp)
 8006c3c:	1885883a 	add	r2,r3,r2
 8006c40:	d0a01515 	stw	r2,-32684(gp)
 8006c44:	e0bffb17 	ldw	r2,-20(fp)
 8006c48:	e0bffc15 	stw	r2,-16(fp)
 8006c4c:	e0bffc17 	ldw	r2,-16(fp)
 8006c50:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 8006c54:	e0bffd17 	ldw	r2,-12(fp)
} 
 8006c58:	e037883a 	mov	sp,fp
 8006c5c:	df000017 	ldw	fp,0(sp)
 8006c60:	dec00104 	addi	sp,sp,4
 8006c64:	f800283a 	ret

08006c68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8006c68:	defffe04 	addi	sp,sp,-8
 8006c6c:	dfc00115 	stw	ra,4(sp)
 8006c70:	df000015 	stw	fp,0(sp)
 8006c74:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8006c78:	d0a01417 	ldw	r2,-32688(gp)
 8006c7c:	10000326 	beq	r2,zero,8006c8c <alt_get_errno+0x24>
 8006c80:	d0a01417 	ldw	r2,-32688(gp)
 8006c84:	103ee83a 	callr	r2
 8006c88:	00000106 	br	8006c90 <alt_get_errno+0x28>
 8006c8c:	d0a6c604 	addi	r2,gp,-25832
}
 8006c90:	e037883a 	mov	sp,fp
 8006c94:	dfc00117 	ldw	ra,4(sp)
 8006c98:	df000017 	ldw	fp,0(sp)
 8006c9c:	dec00204 	addi	sp,sp,8
 8006ca0:	f800283a 	ret

08006ca4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 8006ca4:	defff904 	addi	sp,sp,-28
 8006ca8:	dfc00615 	stw	ra,24(sp)
 8006cac:	df000515 	stw	fp,20(sp)
 8006cb0:	df000504 	addi	fp,sp,20
 8006cb4:	e13ffd15 	stw	r4,-12(fp)
 8006cb8:	e17ffe15 	stw	r5,-8(fp)
 8006cbc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8006cc0:	e0bffd17 	ldw	r2,-12(fp)
 8006cc4:	10000616 	blt	r2,zero,8006ce0 <write+0x3c>
 8006cc8:	e0bffd17 	ldw	r2,-12(fp)
 8006ccc:	10c00324 	muli	r3,r2,12
 8006cd0:	00820074 	movhi	r2,2049
 8006cd4:	10a7cb04 	addi	r2,r2,-24788
 8006cd8:	1885883a 	add	r2,r3,r2
 8006cdc:	00000106 	br	8006ce4 <write+0x40>
 8006ce0:	0005883a 	mov	r2,zero
 8006ce4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8006ce8:	e0bffb17 	ldw	r2,-20(fp)
 8006cec:	10002126 	beq	r2,zero,8006d74 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 8006cf0:	e0bffb17 	ldw	r2,-20(fp)
 8006cf4:	10800217 	ldw	r2,8(r2)
 8006cf8:	108000cc 	andi	r2,r2,3
 8006cfc:	10001826 	beq	r2,zero,8006d60 <write+0xbc>
 8006d00:	e0bffb17 	ldw	r2,-20(fp)
 8006d04:	10800017 	ldw	r2,0(r2)
 8006d08:	10800617 	ldw	r2,24(r2)
 8006d0c:	10001426 	beq	r2,zero,8006d60 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 8006d10:	e0bffb17 	ldw	r2,-20(fp)
 8006d14:	10800017 	ldw	r2,0(r2)
 8006d18:	10800617 	ldw	r2,24(r2)
 8006d1c:	e0ffff17 	ldw	r3,-4(fp)
 8006d20:	180d883a 	mov	r6,r3
 8006d24:	e17ffe17 	ldw	r5,-8(fp)
 8006d28:	e13ffb17 	ldw	r4,-20(fp)
 8006d2c:	103ee83a 	callr	r2
 8006d30:	e0bffc15 	stw	r2,-16(fp)
 8006d34:	e0bffc17 	ldw	r2,-16(fp)
 8006d38:	1000070e 	bge	r2,zero,8006d58 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 8006d3c:	8006c680 	call	8006c68 <alt_get_errno>
 8006d40:	1007883a 	mov	r3,r2
 8006d44:	e0bffc17 	ldw	r2,-16(fp)
 8006d48:	0085c83a 	sub	r2,zero,r2
 8006d4c:	18800015 	stw	r2,0(r3)
        return -1;
 8006d50:	00bfffc4 	movi	r2,-1
 8006d54:	00000c06 	br	8006d88 <write+0xe4>
      }
      return rval;
 8006d58:	e0bffc17 	ldw	r2,-16(fp)
 8006d5c:	00000a06 	br	8006d88 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 8006d60:	8006c680 	call	8006c68 <alt_get_errno>
 8006d64:	1007883a 	mov	r3,r2
 8006d68:	00800344 	movi	r2,13
 8006d6c:	18800015 	stw	r2,0(r3)
 8006d70:	00000406 	br	8006d84 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 8006d74:	8006c680 	call	8006c68 <alt_get_errno>
 8006d78:	1007883a 	mov	r3,r2
 8006d7c:	00801444 	movi	r2,81
 8006d80:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8006d84:	00bfffc4 	movi	r2,-1
}
 8006d88:	e037883a 	mov	sp,fp
 8006d8c:	dfc00117 	ldw	ra,4(sp)
 8006d90:	df000017 	ldw	fp,0(sp)
 8006d94:	dec00204 	addi	sp,sp,8
 8006d98:	f800283a 	ret

08006d9c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 8006d9c:	defffd04 	addi	sp,sp,-12
 8006da0:	dfc00215 	stw	ra,8(sp)
 8006da4:	df000115 	stw	fp,4(sp)
 8006da8:	df000104 	addi	fp,sp,4
 8006dac:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 8006db0:	d1601104 	addi	r5,gp,-32700
 8006db4:	e13fff17 	ldw	r4,-4(fp)
 8006db8:	8007b780 	call	8007b78 <alt_dev_llist_insert>
}
 8006dbc:	e037883a 	mov	sp,fp
 8006dc0:	dfc00117 	ldw	ra,4(sp)
 8006dc4:	df000017 	ldw	fp,0(sp)
 8006dc8:	dec00204 	addi	sp,sp,8
 8006dcc:	f800283a 	ret

08006dd0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8006dd0:	defffd04 	addi	sp,sp,-12
 8006dd4:	dfc00215 	stw	ra,8(sp)
 8006dd8:	df000115 	stw	fp,4(sp)
 8006ddc:	df000104 	addi	fp,sp,4
 8006de0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 8006de4:	80084e80 	call	80084e8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8006de8:	00800044 	movi	r2,1
 8006dec:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8006df0:	0001883a 	nop
 8006df4:	e037883a 	mov	sp,fp
 8006df8:	dfc00117 	ldw	ra,4(sp)
 8006dfc:	df000017 	ldw	fp,0(sp)
 8006e00:	dec00204 	addi	sp,sp,8
 8006e04:	f800283a 	ret

08006e08 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8006e08:	defffe04 	addi	sp,sp,-8
 8006e0c:	dfc00115 	stw	ra,4(sp)
 8006e10:	df000015 	stw	fp,0(sp)
 8006e14:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 8006e18:	01c0fa04 	movi	r7,1000
 8006e1c:	01800044 	movi	r6,1
 8006e20:	000b883a 	mov	r5,zero
 8006e24:	01040934 	movhi	r4,4132
 8006e28:	21040004 	addi	r4,r4,4096
 8006e2c:	800794c0 	call	800794c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 8006e30:	000d883a 	mov	r6,zero
 8006e34:	000b883a 	mov	r5,zero
 8006e38:	01020074 	movhi	r4,2049
 8006e3c:	21283504 	addi	r4,r4,-24364
 8006e40:	8006fd00 	call	8006fd0 <altera_avalon_jtag_uart_init>
 8006e44:	01020074 	movhi	r4,2049
 8006e48:	21282b04 	addi	r4,r4,-24404
 8006e4c:	8006d9c0 	call	8006d9c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 8006e50:	0001883a 	nop
}
 8006e54:	0001883a 	nop
 8006e58:	e037883a 	mov	sp,fp
 8006e5c:	dfc00117 	ldw	ra,4(sp)
 8006e60:	df000017 	ldw	fp,0(sp)
 8006e64:	dec00204 	addi	sp,sp,8
 8006e68:	f800283a 	ret

08006e6c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 8006e6c:	defffa04 	addi	sp,sp,-24
 8006e70:	dfc00515 	stw	ra,20(sp)
 8006e74:	df000415 	stw	fp,16(sp)
 8006e78:	df000404 	addi	fp,sp,16
 8006e7c:	e13ffd15 	stw	r4,-12(fp)
 8006e80:	e17ffe15 	stw	r5,-8(fp)
 8006e84:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8006e88:	e0bffd17 	ldw	r2,-12(fp)
 8006e8c:	10800017 	ldw	r2,0(r2)
 8006e90:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 8006e94:	e0bffc17 	ldw	r2,-16(fp)
 8006e98:	10c00a04 	addi	r3,r2,40
 8006e9c:	e0bffd17 	ldw	r2,-12(fp)
 8006ea0:	10800217 	ldw	r2,8(r2)
 8006ea4:	100f883a 	mov	r7,r2
 8006ea8:	e1bfff17 	ldw	r6,-4(fp)
 8006eac:	e17ffe17 	ldw	r5,-8(fp)
 8006eb0:	1809883a 	mov	r4,r3
 8006eb4:	80074940 	call	8007494 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 8006eb8:	e037883a 	mov	sp,fp
 8006ebc:	dfc00117 	ldw	ra,4(sp)
 8006ec0:	df000017 	ldw	fp,0(sp)
 8006ec4:	dec00204 	addi	sp,sp,8
 8006ec8:	f800283a 	ret

08006ecc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8006ecc:	defffa04 	addi	sp,sp,-24
 8006ed0:	dfc00515 	stw	ra,20(sp)
 8006ed4:	df000415 	stw	fp,16(sp)
 8006ed8:	df000404 	addi	fp,sp,16
 8006edc:	e13ffd15 	stw	r4,-12(fp)
 8006ee0:	e17ffe15 	stw	r5,-8(fp)
 8006ee4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8006ee8:	e0bffd17 	ldw	r2,-12(fp)
 8006eec:	10800017 	ldw	r2,0(r2)
 8006ef0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 8006ef4:	e0bffc17 	ldw	r2,-16(fp)
 8006ef8:	10c00a04 	addi	r3,r2,40
 8006efc:	e0bffd17 	ldw	r2,-12(fp)
 8006f00:	10800217 	ldw	r2,8(r2)
 8006f04:	100f883a 	mov	r7,r2
 8006f08:	e1bfff17 	ldw	r6,-4(fp)
 8006f0c:	e17ffe17 	ldw	r5,-8(fp)
 8006f10:	1809883a 	mov	r4,r3
 8006f14:	80076b00 	call	80076b0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8006f18:	e037883a 	mov	sp,fp
 8006f1c:	dfc00117 	ldw	ra,4(sp)
 8006f20:	df000017 	ldw	fp,0(sp)
 8006f24:	dec00204 	addi	sp,sp,8
 8006f28:	f800283a 	ret

08006f2c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 8006f2c:	defffc04 	addi	sp,sp,-16
 8006f30:	dfc00315 	stw	ra,12(sp)
 8006f34:	df000215 	stw	fp,8(sp)
 8006f38:	df000204 	addi	fp,sp,8
 8006f3c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8006f40:	e0bfff17 	ldw	r2,-4(fp)
 8006f44:	10800017 	ldw	r2,0(r2)
 8006f48:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8006f4c:	e0bffe17 	ldw	r2,-8(fp)
 8006f50:	10c00a04 	addi	r3,r2,40
 8006f54:	e0bfff17 	ldw	r2,-4(fp)
 8006f58:	10800217 	ldw	r2,8(r2)
 8006f5c:	100b883a 	mov	r5,r2
 8006f60:	1809883a 	mov	r4,r3
 8006f64:	800733c0 	call	800733c <altera_avalon_jtag_uart_close>
}
 8006f68:	e037883a 	mov	sp,fp
 8006f6c:	dfc00117 	ldw	ra,4(sp)
 8006f70:	df000017 	ldw	fp,0(sp)
 8006f74:	dec00204 	addi	sp,sp,8
 8006f78:	f800283a 	ret

08006f7c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8006f7c:	defffa04 	addi	sp,sp,-24
 8006f80:	dfc00515 	stw	ra,20(sp)
 8006f84:	df000415 	stw	fp,16(sp)
 8006f88:	df000404 	addi	fp,sp,16
 8006f8c:	e13ffd15 	stw	r4,-12(fp)
 8006f90:	e17ffe15 	stw	r5,-8(fp)
 8006f94:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 8006f98:	e0bffd17 	ldw	r2,-12(fp)
 8006f9c:	10800017 	ldw	r2,0(r2)
 8006fa0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 8006fa4:	e0bffc17 	ldw	r2,-16(fp)
 8006fa8:	10800a04 	addi	r2,r2,40
 8006fac:	e1bfff17 	ldw	r6,-4(fp)
 8006fb0:	e17ffe17 	ldw	r5,-8(fp)
 8006fb4:	1009883a 	mov	r4,r2
 8006fb8:	80073a40 	call	80073a4 <altera_avalon_jtag_uart_ioctl>
}
 8006fbc:	e037883a 	mov	sp,fp
 8006fc0:	dfc00117 	ldw	ra,4(sp)
 8006fc4:	df000017 	ldw	fp,0(sp)
 8006fc8:	dec00204 	addi	sp,sp,8
 8006fcc:	f800283a 	ret

08006fd0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 8006fd0:	defffa04 	addi	sp,sp,-24
 8006fd4:	dfc00515 	stw	ra,20(sp)
 8006fd8:	df000415 	stw	fp,16(sp)
 8006fdc:	df000404 	addi	fp,sp,16
 8006fe0:	e13ffd15 	stw	r4,-12(fp)
 8006fe4:	e17ffe15 	stw	r5,-8(fp)
 8006fe8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8006fec:	e0bffd17 	ldw	r2,-12(fp)
 8006ff0:	00c00044 	movi	r3,1
 8006ff4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 8006ff8:	e0bffd17 	ldw	r2,-12(fp)
 8006ffc:	10800017 	ldw	r2,0(r2)
 8007000:	10800104 	addi	r2,r2,4
 8007004:	1007883a 	mov	r3,r2
 8007008:	e0bffd17 	ldw	r2,-12(fp)
 800700c:	10800817 	ldw	r2,32(r2)
 8007010:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 8007014:	e0bffe17 	ldw	r2,-8(fp)
 8007018:	e0ffff17 	ldw	r3,-4(fp)
 800701c:	d8000015 	stw	zero,0(sp)
 8007020:	e1fffd17 	ldw	r7,-12(fp)
 8007024:	01820034 	movhi	r6,2048
 8007028:	319c2404 	addi	r6,r6,28816
 800702c:	180b883a 	mov	r5,r3
 8007030:	1009883a 	mov	r4,r2
 8007034:	8007d100 	call	8007d10 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8007038:	e0bffd17 	ldw	r2,-12(fp)
 800703c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 8007040:	e0bffd17 	ldw	r2,-12(fp)
 8007044:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8007048:	d0e6cb17 	ldw	r3,-25812(gp)
 800704c:	e1fffd17 	ldw	r7,-12(fp)
 8007050:	01820034 	movhi	r6,2048
 8007054:	319ca704 	addi	r6,r6,29340
 8007058:	180b883a 	mov	r5,r3
 800705c:	1009883a 	mov	r4,r2
 8007060:	80079c80 	call	80079c8 <alt_alarm_start>
 8007064:	1000040e 	bge	r2,zero,8007078 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8007068:	e0fffd17 	ldw	r3,-12(fp)
 800706c:	00a00034 	movhi	r2,32768
 8007070:	10bfffc4 	addi	r2,r2,-1
 8007074:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8007078:	0001883a 	nop
 800707c:	e037883a 	mov	sp,fp
 8007080:	dfc00117 	ldw	ra,4(sp)
 8007084:	df000017 	ldw	fp,0(sp)
 8007088:	dec00204 	addi	sp,sp,8
 800708c:	f800283a 	ret

08007090 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 8007090:	defff804 	addi	sp,sp,-32
 8007094:	df000715 	stw	fp,28(sp)
 8007098:	df000704 	addi	fp,sp,28
 800709c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 80070a0:	e0bfff17 	ldw	r2,-4(fp)
 80070a4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 80070a8:	e0bffb17 	ldw	r2,-20(fp)
 80070ac:	10800017 	ldw	r2,0(r2)
 80070b0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 80070b4:	e0bffc17 	ldw	r2,-16(fp)
 80070b8:	10800104 	addi	r2,r2,4
 80070bc:	10800037 	ldwio	r2,0(r2)
 80070c0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 80070c4:	e0bffd17 	ldw	r2,-12(fp)
 80070c8:	1080c00c 	andi	r2,r2,768
 80070cc:	10006d26 	beq	r2,zero,8007284 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 80070d0:	e0bffd17 	ldw	r2,-12(fp)
 80070d4:	1080400c 	andi	r2,r2,256
 80070d8:	10003526 	beq	r2,zero,80071b0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 80070dc:	00800074 	movhi	r2,1
 80070e0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80070e4:	e0bffb17 	ldw	r2,-20(fp)
 80070e8:	10800a17 	ldw	r2,40(r2)
 80070ec:	10800044 	addi	r2,r2,1
 80070f0:	1081ffcc 	andi	r2,r2,2047
 80070f4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 80070f8:	e0bffb17 	ldw	r2,-20(fp)
 80070fc:	10c00b17 	ldw	r3,44(r2)
 8007100:	e0bffe17 	ldw	r2,-8(fp)
 8007104:	18801526 	beq	r3,r2,800715c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 8007108:	e0bffc17 	ldw	r2,-16(fp)
 800710c:	10800037 	ldwio	r2,0(r2)
 8007110:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 8007114:	e0bff917 	ldw	r2,-28(fp)
 8007118:	10a0000c 	andi	r2,r2,32768
 800711c:	10001126 	beq	r2,zero,8007164 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 8007120:	e0bffb17 	ldw	r2,-20(fp)
 8007124:	10800a17 	ldw	r2,40(r2)
 8007128:	e0fff917 	ldw	r3,-28(fp)
 800712c:	1809883a 	mov	r4,r3
 8007130:	e0fffb17 	ldw	r3,-20(fp)
 8007134:	1885883a 	add	r2,r3,r2
 8007138:	10800e04 	addi	r2,r2,56
 800713c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8007140:	e0bffb17 	ldw	r2,-20(fp)
 8007144:	10800a17 	ldw	r2,40(r2)
 8007148:	10800044 	addi	r2,r2,1
 800714c:	10c1ffcc 	andi	r3,r2,2047
 8007150:	e0bffb17 	ldw	r2,-20(fp)
 8007154:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 8007158:	003fe206 	br	80070e4 <__alt_mem_bufferram_out+0xf7e070e4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 800715c:	0001883a 	nop
 8007160:	00000106 	br	8007168 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 8007164:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8007168:	e0bff917 	ldw	r2,-28(fp)
 800716c:	10bfffec 	andhi	r2,r2,65535
 8007170:	10000f26 	beq	r2,zero,80071b0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8007174:	e0bffb17 	ldw	r2,-20(fp)
 8007178:	10c00817 	ldw	r3,32(r2)
 800717c:	00bfff84 	movi	r2,-2
 8007180:	1886703a 	and	r3,r3,r2
 8007184:	e0bffb17 	ldw	r2,-20(fp)
 8007188:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 800718c:	e0bffc17 	ldw	r2,-16(fp)
 8007190:	10800104 	addi	r2,r2,4
 8007194:	1007883a 	mov	r3,r2
 8007198:	e0bffb17 	ldw	r2,-20(fp)
 800719c:	10800817 	ldw	r2,32(r2)
 80071a0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 80071a4:	e0bffc17 	ldw	r2,-16(fp)
 80071a8:	10800104 	addi	r2,r2,4
 80071ac:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 80071b0:	e0bffd17 	ldw	r2,-12(fp)
 80071b4:	1080800c 	andi	r2,r2,512
 80071b8:	103fbe26 	beq	r2,zero,80070b4 <__alt_mem_bufferram_out+0xf7e070b4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 80071bc:	e0bffd17 	ldw	r2,-12(fp)
 80071c0:	1004d43a 	srli	r2,r2,16
 80071c4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 80071c8:	00001406 	br	800721c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 80071cc:	e0bffc17 	ldw	r2,-16(fp)
 80071d0:	e0fffb17 	ldw	r3,-20(fp)
 80071d4:	18c00d17 	ldw	r3,52(r3)
 80071d8:	e13ffb17 	ldw	r4,-20(fp)
 80071dc:	20c7883a 	add	r3,r4,r3
 80071e0:	18c20e04 	addi	r3,r3,2104
 80071e4:	18c00003 	ldbu	r3,0(r3)
 80071e8:	18c03fcc 	andi	r3,r3,255
 80071ec:	18c0201c 	xori	r3,r3,128
 80071f0:	18ffe004 	addi	r3,r3,-128
 80071f4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80071f8:	e0bffb17 	ldw	r2,-20(fp)
 80071fc:	10800d17 	ldw	r2,52(r2)
 8007200:	10800044 	addi	r2,r2,1
 8007204:	10c1ffcc 	andi	r3,r2,2047
 8007208:	e0bffb17 	ldw	r2,-20(fp)
 800720c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 8007210:	e0bffa17 	ldw	r2,-24(fp)
 8007214:	10bfffc4 	addi	r2,r2,-1
 8007218:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 800721c:	e0bffa17 	ldw	r2,-24(fp)
 8007220:	10000526 	beq	r2,zero,8007238 <altera_avalon_jtag_uart_irq+0x1a8>
 8007224:	e0bffb17 	ldw	r2,-20(fp)
 8007228:	10c00d17 	ldw	r3,52(r2)
 800722c:	e0bffb17 	ldw	r2,-20(fp)
 8007230:	10800c17 	ldw	r2,48(r2)
 8007234:	18bfe51e 	bne	r3,r2,80071cc <__alt_mem_bufferram_out+0xf7e071cc>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 8007238:	e0bffa17 	ldw	r2,-24(fp)
 800723c:	103f9d26 	beq	r2,zero,80070b4 <__alt_mem_bufferram_out+0xf7e070b4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8007240:	e0bffb17 	ldw	r2,-20(fp)
 8007244:	10c00817 	ldw	r3,32(r2)
 8007248:	00bfff44 	movi	r2,-3
 800724c:	1886703a 	and	r3,r3,r2
 8007250:	e0bffb17 	ldw	r2,-20(fp)
 8007254:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8007258:	e0bffb17 	ldw	r2,-20(fp)
 800725c:	10800017 	ldw	r2,0(r2)
 8007260:	10800104 	addi	r2,r2,4
 8007264:	1007883a 	mov	r3,r2
 8007268:	e0bffb17 	ldw	r2,-20(fp)
 800726c:	10800817 	ldw	r2,32(r2)
 8007270:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8007274:	e0bffc17 	ldw	r2,-16(fp)
 8007278:	10800104 	addi	r2,r2,4
 800727c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 8007280:	003f8c06 	br	80070b4 <__alt_mem_bufferram_out+0xf7e070b4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 8007284:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 8007288:	0001883a 	nop
 800728c:	e037883a 	mov	sp,fp
 8007290:	df000017 	ldw	fp,0(sp)
 8007294:	dec00104 	addi	sp,sp,4
 8007298:	f800283a 	ret

0800729c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 800729c:	defff804 	addi	sp,sp,-32
 80072a0:	df000715 	stw	fp,28(sp)
 80072a4:	df000704 	addi	fp,sp,28
 80072a8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 80072ac:	e0bffb17 	ldw	r2,-20(fp)
 80072b0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 80072b4:	e0bff917 	ldw	r2,-28(fp)
 80072b8:	10800017 	ldw	r2,0(r2)
 80072bc:	10800104 	addi	r2,r2,4
 80072c0:	10800037 	ldwio	r2,0(r2)
 80072c4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 80072c8:	e0bffa17 	ldw	r2,-24(fp)
 80072cc:	1081000c 	andi	r2,r2,1024
 80072d0:	10000b26 	beq	r2,zero,8007300 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 80072d4:	e0bff917 	ldw	r2,-28(fp)
 80072d8:	10800017 	ldw	r2,0(r2)
 80072dc:	10800104 	addi	r2,r2,4
 80072e0:	1007883a 	mov	r3,r2
 80072e4:	e0bff917 	ldw	r2,-28(fp)
 80072e8:	10800817 	ldw	r2,32(r2)
 80072ec:	10810014 	ori	r2,r2,1024
 80072f0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 80072f4:	e0bff917 	ldw	r2,-28(fp)
 80072f8:	10000915 	stw	zero,36(r2)
 80072fc:	00000a06 	br	8007328 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 8007300:	e0bff917 	ldw	r2,-28(fp)
 8007304:	10c00917 	ldw	r3,36(r2)
 8007308:	00a00034 	movhi	r2,32768
 800730c:	10bfff04 	addi	r2,r2,-4
 8007310:	10c00536 	bltu	r2,r3,8007328 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 8007314:	e0bff917 	ldw	r2,-28(fp)
 8007318:	10800917 	ldw	r2,36(r2)
 800731c:	10c00044 	addi	r3,r2,1
 8007320:	e0bff917 	ldw	r2,-28(fp)
 8007324:	10c00915 	stw	r3,36(r2)
 8007328:	d0a6cb17 	ldw	r2,-25812(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 800732c:	e037883a 	mov	sp,fp
 8007330:	df000017 	ldw	fp,0(sp)
 8007334:	dec00104 	addi	sp,sp,4
 8007338:	f800283a 	ret

0800733c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 800733c:	defffd04 	addi	sp,sp,-12
 8007340:	df000215 	stw	fp,8(sp)
 8007344:	df000204 	addi	fp,sp,8
 8007348:	e13ffe15 	stw	r4,-8(fp)
 800734c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8007350:	00000506 	br	8007368 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 8007354:	e0bfff17 	ldw	r2,-4(fp)
 8007358:	1090000c 	andi	r2,r2,16384
 800735c:	10000226 	beq	r2,zero,8007368 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 8007360:	00bffd44 	movi	r2,-11
 8007364:	00000b06 	br	8007394 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8007368:	e0bffe17 	ldw	r2,-8(fp)
 800736c:	10c00d17 	ldw	r3,52(r2)
 8007370:	e0bffe17 	ldw	r2,-8(fp)
 8007374:	10800c17 	ldw	r2,48(r2)
 8007378:	18800526 	beq	r3,r2,8007390 <altera_avalon_jtag_uart_close+0x54>
 800737c:	e0bffe17 	ldw	r2,-8(fp)
 8007380:	10c00917 	ldw	r3,36(r2)
 8007384:	e0bffe17 	ldw	r2,-8(fp)
 8007388:	10800117 	ldw	r2,4(r2)
 800738c:	18bff136 	bltu	r3,r2,8007354 <__alt_mem_bufferram_out+0xf7e07354>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 8007390:	0005883a 	mov	r2,zero
}
 8007394:	e037883a 	mov	sp,fp
 8007398:	df000017 	ldw	fp,0(sp)
 800739c:	dec00104 	addi	sp,sp,4
 80073a0:	f800283a 	ret

080073a4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 80073a4:	defffa04 	addi	sp,sp,-24
 80073a8:	df000515 	stw	fp,20(sp)
 80073ac:	df000504 	addi	fp,sp,20
 80073b0:	e13ffd15 	stw	r4,-12(fp)
 80073b4:	e17ffe15 	stw	r5,-8(fp)
 80073b8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 80073bc:	00bff9c4 	movi	r2,-25
 80073c0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 80073c4:	e0bffe17 	ldw	r2,-8(fp)
 80073c8:	10da8060 	cmpeqi	r3,r2,27137
 80073cc:	1800031e 	bne	r3,zero,80073dc <altera_avalon_jtag_uart_ioctl+0x38>
 80073d0:	109a80a0 	cmpeqi	r2,r2,27138
 80073d4:	1000181e 	bne	r2,zero,8007438 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 80073d8:	00002906 	br	8007480 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 80073dc:	e0bffd17 	ldw	r2,-12(fp)
 80073e0:	10c00117 	ldw	r3,4(r2)
 80073e4:	00a00034 	movhi	r2,32768
 80073e8:	10bfffc4 	addi	r2,r2,-1
 80073ec:	18802126 	beq	r3,r2,8007474 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 80073f0:	e0bfff17 	ldw	r2,-4(fp)
 80073f4:	10800017 	ldw	r2,0(r2)
 80073f8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 80073fc:	e0bffc17 	ldw	r2,-16(fp)
 8007400:	10800090 	cmplti	r2,r2,2
 8007404:	1000061e 	bne	r2,zero,8007420 <altera_avalon_jtag_uart_ioctl+0x7c>
 8007408:	e0fffc17 	ldw	r3,-16(fp)
 800740c:	00a00034 	movhi	r2,32768
 8007410:	10bfffc4 	addi	r2,r2,-1
 8007414:	18800226 	beq	r3,r2,8007420 <altera_avalon_jtag_uart_ioctl+0x7c>
 8007418:	e0bffc17 	ldw	r2,-16(fp)
 800741c:	00000206 	br	8007428 <altera_avalon_jtag_uart_ioctl+0x84>
 8007420:	00a00034 	movhi	r2,32768
 8007424:	10bfff84 	addi	r2,r2,-2
 8007428:	e0fffd17 	ldw	r3,-12(fp)
 800742c:	18800115 	stw	r2,4(r3)
      rc = 0;
 8007430:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8007434:	00000f06 	br	8007474 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 8007438:	e0bffd17 	ldw	r2,-12(fp)
 800743c:	10c00117 	ldw	r3,4(r2)
 8007440:	00a00034 	movhi	r2,32768
 8007444:	10bfffc4 	addi	r2,r2,-1
 8007448:	18800c26 	beq	r3,r2,800747c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 800744c:	e0bffd17 	ldw	r2,-12(fp)
 8007450:	10c00917 	ldw	r3,36(r2)
 8007454:	e0bffd17 	ldw	r2,-12(fp)
 8007458:	10800117 	ldw	r2,4(r2)
 800745c:	1885803a 	cmpltu	r2,r3,r2
 8007460:	10c03fcc 	andi	r3,r2,255
 8007464:	e0bfff17 	ldw	r2,-4(fp)
 8007468:	10c00015 	stw	r3,0(r2)
      rc = 0;
 800746c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8007470:	00000206 	br	800747c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 8007474:	0001883a 	nop
 8007478:	00000106 	br	8007480 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 800747c:	0001883a 	nop

  default:
    break;
  }

  return rc;
 8007480:	e0bffb17 	ldw	r2,-20(fp)
}
 8007484:	e037883a 	mov	sp,fp
 8007488:	df000017 	ldw	fp,0(sp)
 800748c:	dec00104 	addi	sp,sp,4
 8007490:	f800283a 	ret

08007494 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 8007494:	defff304 	addi	sp,sp,-52
 8007498:	dfc00c15 	stw	ra,48(sp)
 800749c:	df000b15 	stw	fp,44(sp)
 80074a0:	df000b04 	addi	fp,sp,44
 80074a4:	e13ffc15 	stw	r4,-16(fp)
 80074a8:	e17ffd15 	stw	r5,-12(fp)
 80074ac:	e1bffe15 	stw	r6,-8(fp)
 80074b0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 80074b4:	e0bffd17 	ldw	r2,-12(fp)
 80074b8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 80074bc:	00004706 	br	80075dc <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 80074c0:	e0bffc17 	ldw	r2,-16(fp)
 80074c4:	10800a17 	ldw	r2,40(r2)
 80074c8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 80074cc:	e0bffc17 	ldw	r2,-16(fp)
 80074d0:	10800b17 	ldw	r2,44(r2)
 80074d4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 80074d8:	e0fff717 	ldw	r3,-36(fp)
 80074dc:	e0bff817 	ldw	r2,-32(fp)
 80074e0:	18800536 	bltu	r3,r2,80074f8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 80074e4:	e0fff717 	ldw	r3,-36(fp)
 80074e8:	e0bff817 	ldw	r2,-32(fp)
 80074ec:	1885c83a 	sub	r2,r3,r2
 80074f0:	e0bff615 	stw	r2,-40(fp)
 80074f4:	00000406 	br	8007508 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 80074f8:	00c20004 	movi	r3,2048
 80074fc:	e0bff817 	ldw	r2,-32(fp)
 8007500:	1885c83a 	sub	r2,r3,r2
 8007504:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8007508:	e0bff617 	ldw	r2,-40(fp)
 800750c:	10001e26 	beq	r2,zero,8007588 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 8007510:	e0fffe17 	ldw	r3,-8(fp)
 8007514:	e0bff617 	ldw	r2,-40(fp)
 8007518:	1880022e 	bgeu	r3,r2,8007524 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 800751c:	e0bffe17 	ldw	r2,-8(fp)
 8007520:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 8007524:	e0bffc17 	ldw	r2,-16(fp)
 8007528:	10c00e04 	addi	r3,r2,56
 800752c:	e0bff817 	ldw	r2,-32(fp)
 8007530:	1885883a 	add	r2,r3,r2
 8007534:	e1bff617 	ldw	r6,-40(fp)
 8007538:	100b883a 	mov	r5,r2
 800753c:	e13ff517 	ldw	r4,-44(fp)
 8007540:	8004cd00 	call	8004cd0 <memcpy>
      ptr   += n;
 8007544:	e0fff517 	ldw	r3,-44(fp)
 8007548:	e0bff617 	ldw	r2,-40(fp)
 800754c:	1885883a 	add	r2,r3,r2
 8007550:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 8007554:	e0fffe17 	ldw	r3,-8(fp)
 8007558:	e0bff617 	ldw	r2,-40(fp)
 800755c:	1885c83a 	sub	r2,r3,r2
 8007560:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8007564:	e0fff817 	ldw	r3,-32(fp)
 8007568:	e0bff617 	ldw	r2,-40(fp)
 800756c:	1885883a 	add	r2,r3,r2
 8007570:	10c1ffcc 	andi	r3,r2,2047
 8007574:	e0bffc17 	ldw	r2,-16(fp)
 8007578:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 800757c:	e0bffe17 	ldw	r2,-8(fp)
 8007580:	00bfcf16 	blt	zero,r2,80074c0 <__alt_mem_bufferram_out+0xf7e074c0>
 8007584:	00000106 	br	800758c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 8007588:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 800758c:	e0fff517 	ldw	r3,-44(fp)
 8007590:	e0bffd17 	ldw	r2,-12(fp)
 8007594:	1880141e 	bne	r3,r2,80075e8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 8007598:	e0bfff17 	ldw	r2,-4(fp)
 800759c:	1090000c 	andi	r2,r2,16384
 80075a0:	1000131e 	bne	r2,zero,80075f0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 80075a4:	0001883a 	nop
 80075a8:	e0bffc17 	ldw	r2,-16(fp)
 80075ac:	10c00a17 	ldw	r3,40(r2)
 80075b0:	e0bff717 	ldw	r2,-36(fp)
 80075b4:	1880051e 	bne	r3,r2,80075cc <altera_avalon_jtag_uart_read+0x138>
 80075b8:	e0bffc17 	ldw	r2,-16(fp)
 80075bc:	10c00917 	ldw	r3,36(r2)
 80075c0:	e0bffc17 	ldw	r2,-16(fp)
 80075c4:	10800117 	ldw	r2,4(r2)
 80075c8:	18bff736 	bltu	r3,r2,80075a8 <__alt_mem_bufferram_out+0xf7e075a8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 80075cc:	e0bffc17 	ldw	r2,-16(fp)
 80075d0:	10c00a17 	ldw	r3,40(r2)
 80075d4:	e0bff717 	ldw	r2,-36(fp)
 80075d8:	18800726 	beq	r3,r2,80075f8 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 80075dc:	e0bffe17 	ldw	r2,-8(fp)
 80075e0:	00bfb716 	blt	zero,r2,80074c0 <__alt_mem_bufferram_out+0xf7e074c0>
 80075e4:	00000506 	br	80075fc <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 80075e8:	0001883a 	nop
 80075ec:	00000306 	br	80075fc <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 80075f0:	0001883a 	nop
 80075f4:	00000106 	br	80075fc <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 80075f8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 80075fc:	e0fff517 	ldw	r3,-44(fp)
 8007600:	e0bffd17 	ldw	r2,-12(fp)
 8007604:	18801826 	beq	r3,r2,8007668 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8007608:	0005303a 	rdctl	r2,status
 800760c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8007610:	e0fffb17 	ldw	r3,-20(fp)
 8007614:	00bfff84 	movi	r2,-2
 8007618:	1884703a 	and	r2,r3,r2
 800761c:	1001703a 	wrctl	status,r2
  
  return context;
 8007620:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 8007624:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8007628:	e0bffc17 	ldw	r2,-16(fp)
 800762c:	10800817 	ldw	r2,32(r2)
 8007630:	10c00054 	ori	r3,r2,1
 8007634:	e0bffc17 	ldw	r2,-16(fp)
 8007638:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800763c:	e0bffc17 	ldw	r2,-16(fp)
 8007640:	10800017 	ldw	r2,0(r2)
 8007644:	10800104 	addi	r2,r2,4
 8007648:	1007883a 	mov	r3,r2
 800764c:	e0bffc17 	ldw	r2,-16(fp)
 8007650:	10800817 	ldw	r2,32(r2)
 8007654:	18800035 	stwio	r2,0(r3)
 8007658:	e0bffa17 	ldw	r2,-24(fp)
 800765c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8007660:	e0bff917 	ldw	r2,-28(fp)
 8007664:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 8007668:	e0fff517 	ldw	r3,-44(fp)
 800766c:	e0bffd17 	ldw	r2,-12(fp)
 8007670:	18800426 	beq	r3,r2,8007684 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 8007674:	e0fff517 	ldw	r3,-44(fp)
 8007678:	e0bffd17 	ldw	r2,-12(fp)
 800767c:	1885c83a 	sub	r2,r3,r2
 8007680:	00000606 	br	800769c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 8007684:	e0bfff17 	ldw	r2,-4(fp)
 8007688:	1090000c 	andi	r2,r2,16384
 800768c:	10000226 	beq	r2,zero,8007698 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 8007690:	00bffd44 	movi	r2,-11
 8007694:	00000106 	br	800769c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 8007698:	00bffec4 	movi	r2,-5
}
 800769c:	e037883a 	mov	sp,fp
 80076a0:	dfc00117 	ldw	ra,4(sp)
 80076a4:	df000017 	ldw	fp,0(sp)
 80076a8:	dec00204 	addi	sp,sp,8
 80076ac:	f800283a 	ret

080076b0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 80076b0:	defff304 	addi	sp,sp,-52
 80076b4:	dfc00c15 	stw	ra,48(sp)
 80076b8:	df000b15 	stw	fp,44(sp)
 80076bc:	df000b04 	addi	fp,sp,44
 80076c0:	e13ffc15 	stw	r4,-16(fp)
 80076c4:	e17ffd15 	stw	r5,-12(fp)
 80076c8:	e1bffe15 	stw	r6,-8(fp)
 80076cc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 80076d0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 80076d4:	e0bffd17 	ldw	r2,-12(fp)
 80076d8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 80076dc:	00003706 	br	80077bc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 80076e0:	e0bffc17 	ldw	r2,-16(fp)
 80076e4:	10800c17 	ldw	r2,48(r2)
 80076e8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 80076ec:	e0bffc17 	ldw	r2,-16(fp)
 80076f0:	10800d17 	ldw	r2,52(r2)
 80076f4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 80076f8:	e0fff917 	ldw	r3,-28(fp)
 80076fc:	e0bff517 	ldw	r2,-44(fp)
 8007700:	1880062e 	bgeu	r3,r2,800771c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 8007704:	e0fff517 	ldw	r3,-44(fp)
 8007708:	e0bff917 	ldw	r2,-28(fp)
 800770c:	1885c83a 	sub	r2,r3,r2
 8007710:	10bfffc4 	addi	r2,r2,-1
 8007714:	e0bff615 	stw	r2,-40(fp)
 8007718:	00000b06 	br	8007748 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 800771c:	e0bff517 	ldw	r2,-44(fp)
 8007720:	10000526 	beq	r2,zero,8007738 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 8007724:	00c20004 	movi	r3,2048
 8007728:	e0bff917 	ldw	r2,-28(fp)
 800772c:	1885c83a 	sub	r2,r3,r2
 8007730:	e0bff615 	stw	r2,-40(fp)
 8007734:	00000406 	br	8007748 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8007738:	00c1ffc4 	movi	r3,2047
 800773c:	e0bff917 	ldw	r2,-28(fp)
 8007740:	1885c83a 	sub	r2,r3,r2
 8007744:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8007748:	e0bff617 	ldw	r2,-40(fp)
 800774c:	10001e26 	beq	r2,zero,80077c8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 8007750:	e0fffe17 	ldw	r3,-8(fp)
 8007754:	e0bff617 	ldw	r2,-40(fp)
 8007758:	1880022e 	bgeu	r3,r2,8007764 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 800775c:	e0bffe17 	ldw	r2,-8(fp)
 8007760:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 8007764:	e0bffc17 	ldw	r2,-16(fp)
 8007768:	10c20e04 	addi	r3,r2,2104
 800776c:	e0bff917 	ldw	r2,-28(fp)
 8007770:	1885883a 	add	r2,r3,r2
 8007774:	e1bff617 	ldw	r6,-40(fp)
 8007778:	e17ffd17 	ldw	r5,-12(fp)
 800777c:	1009883a 	mov	r4,r2
 8007780:	8004cd00 	call	8004cd0 <memcpy>
      ptr   += n;
 8007784:	e0fffd17 	ldw	r3,-12(fp)
 8007788:	e0bff617 	ldw	r2,-40(fp)
 800778c:	1885883a 	add	r2,r3,r2
 8007790:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 8007794:	e0fffe17 	ldw	r3,-8(fp)
 8007798:	e0bff617 	ldw	r2,-40(fp)
 800779c:	1885c83a 	sub	r2,r3,r2
 80077a0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80077a4:	e0fff917 	ldw	r3,-28(fp)
 80077a8:	e0bff617 	ldw	r2,-40(fp)
 80077ac:	1885883a 	add	r2,r3,r2
 80077b0:	10c1ffcc 	andi	r3,r2,2047
 80077b4:	e0bffc17 	ldw	r2,-16(fp)
 80077b8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 80077bc:	e0bffe17 	ldw	r2,-8(fp)
 80077c0:	00bfc716 	blt	zero,r2,80076e0 <__alt_mem_bufferram_out+0xf7e076e0>
 80077c4:	00000106 	br	80077cc <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 80077c8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80077cc:	0005303a 	rdctl	r2,status
 80077d0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80077d4:	e0fffb17 	ldw	r3,-20(fp)
 80077d8:	00bfff84 	movi	r2,-2
 80077dc:	1884703a 	and	r2,r3,r2
 80077e0:	1001703a 	wrctl	status,r2
  
  return context;
 80077e4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 80077e8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 80077ec:	e0bffc17 	ldw	r2,-16(fp)
 80077f0:	10800817 	ldw	r2,32(r2)
 80077f4:	10c00094 	ori	r3,r2,2
 80077f8:	e0bffc17 	ldw	r2,-16(fp)
 80077fc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8007800:	e0bffc17 	ldw	r2,-16(fp)
 8007804:	10800017 	ldw	r2,0(r2)
 8007808:	10800104 	addi	r2,r2,4
 800780c:	1007883a 	mov	r3,r2
 8007810:	e0bffc17 	ldw	r2,-16(fp)
 8007814:	10800817 	ldw	r2,32(r2)
 8007818:	18800035 	stwio	r2,0(r3)
 800781c:	e0bffa17 	ldw	r2,-24(fp)
 8007820:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8007824:	e0bff817 	ldw	r2,-32(fp)
 8007828:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 800782c:	e0bffe17 	ldw	r2,-8(fp)
 8007830:	0080100e 	bge	zero,r2,8007874 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 8007834:	e0bfff17 	ldw	r2,-4(fp)
 8007838:	1090000c 	andi	r2,r2,16384
 800783c:	1000101e 	bne	r2,zero,8007880 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 8007840:	0001883a 	nop
 8007844:	e0bffc17 	ldw	r2,-16(fp)
 8007848:	10c00d17 	ldw	r3,52(r2)
 800784c:	e0bff517 	ldw	r2,-44(fp)
 8007850:	1880051e 	bne	r3,r2,8007868 <altera_avalon_jtag_uart_write+0x1b8>
 8007854:	e0bffc17 	ldw	r2,-16(fp)
 8007858:	10c00917 	ldw	r3,36(r2)
 800785c:	e0bffc17 	ldw	r2,-16(fp)
 8007860:	10800117 	ldw	r2,4(r2)
 8007864:	18bff736 	bltu	r3,r2,8007844 <__alt_mem_bufferram_out+0xf7e07844>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 8007868:	e0bffc17 	ldw	r2,-16(fp)
 800786c:	10800917 	ldw	r2,36(r2)
 8007870:	1000051e 	bne	r2,zero,8007888 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 8007874:	e0bffe17 	ldw	r2,-8(fp)
 8007878:	00bfd016 	blt	zero,r2,80077bc <__alt_mem_bufferram_out+0xf7e077bc>
 800787c:	00000306 	br	800788c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 8007880:	0001883a 	nop
 8007884:	00000106 	br	800788c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 8007888:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 800788c:	e0fffd17 	ldw	r3,-12(fp)
 8007890:	e0bff717 	ldw	r2,-36(fp)
 8007894:	18800426 	beq	r3,r2,80078a8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 8007898:	e0fffd17 	ldw	r3,-12(fp)
 800789c:	e0bff717 	ldw	r2,-36(fp)
 80078a0:	1885c83a 	sub	r2,r3,r2
 80078a4:	00000606 	br	80078c0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 80078a8:	e0bfff17 	ldw	r2,-4(fp)
 80078ac:	1090000c 	andi	r2,r2,16384
 80078b0:	10000226 	beq	r2,zero,80078bc <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 80078b4:	00bffd44 	movi	r2,-11
 80078b8:	00000106 	br	80078c0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 80078bc:	00bffec4 	movi	r2,-5
}
 80078c0:	e037883a 	mov	sp,fp
 80078c4:	dfc00117 	ldw	ra,4(sp)
 80078c8:	df000017 	ldw	fp,0(sp)
 80078cc:	dec00204 	addi	sp,sp,8
 80078d0:	f800283a 	ret

080078d4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 80078d4:	defffa04 	addi	sp,sp,-24
 80078d8:	dfc00515 	stw	ra,20(sp)
 80078dc:	df000415 	stw	fp,16(sp)
 80078e0:	df000404 	addi	fp,sp,16
 80078e4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 80078e8:	0007883a 	mov	r3,zero
 80078ec:	e0bfff17 	ldw	r2,-4(fp)
 80078f0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 80078f4:	e0bfff17 	ldw	r2,-4(fp)
 80078f8:	10800104 	addi	r2,r2,4
 80078fc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8007900:	0005303a 	rdctl	r2,status
 8007904:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8007908:	e0fffd17 	ldw	r3,-12(fp)
 800790c:	00bfff84 	movi	r2,-2
 8007910:	1884703a 	and	r2,r3,r2
 8007914:	1001703a 	wrctl	status,r2
  
  return context;
 8007918:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 800791c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 8007920:	80083e00 	call	80083e0 <alt_tick>
 8007924:	e0bffc17 	ldw	r2,-16(fp)
 8007928:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800792c:	e0bffe17 	ldw	r2,-8(fp)
 8007930:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 8007934:	0001883a 	nop
 8007938:	e037883a 	mov	sp,fp
 800793c:	dfc00117 	ldw	ra,4(sp)
 8007940:	df000017 	ldw	fp,0(sp)
 8007944:	dec00204 	addi	sp,sp,8
 8007948:	f800283a 	ret

0800794c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 800794c:	defff804 	addi	sp,sp,-32
 8007950:	dfc00715 	stw	ra,28(sp)
 8007954:	df000615 	stw	fp,24(sp)
 8007958:	df000604 	addi	fp,sp,24
 800795c:	e13ffc15 	stw	r4,-16(fp)
 8007960:	e17ffd15 	stw	r5,-12(fp)
 8007964:	e1bffe15 	stw	r6,-8(fp)
 8007968:	e1ffff15 	stw	r7,-4(fp)
 800796c:	e0bfff17 	ldw	r2,-4(fp)
 8007970:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 8007974:	d0a6cb17 	ldw	r2,-25812(gp)
 8007978:	1000021e 	bne	r2,zero,8007984 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 800797c:	e0bffb17 	ldw	r2,-20(fp)
 8007980:	d0a6cb15 	stw	r2,-25812(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 8007984:	e0bffc17 	ldw	r2,-16(fp)
 8007988:	10800104 	addi	r2,r2,4
 800798c:	00c001c4 	movi	r3,7
 8007990:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 8007994:	d8000015 	stw	zero,0(sp)
 8007998:	e1fffc17 	ldw	r7,-16(fp)
 800799c:	01820034 	movhi	r6,2048
 80079a0:	319e3504 	addi	r6,r6,30932
 80079a4:	e17ffe17 	ldw	r5,-8(fp)
 80079a8:	e13ffd17 	ldw	r4,-12(fp)
 80079ac:	8007d100 	call	8007d10 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 80079b0:	0001883a 	nop
 80079b4:	e037883a 	mov	sp,fp
 80079b8:	dfc00117 	ldw	ra,4(sp)
 80079bc:	df000017 	ldw	fp,0(sp)
 80079c0:	dec00204 	addi	sp,sp,8
 80079c4:	f800283a 	ret

080079c8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 80079c8:	defff504 	addi	sp,sp,-44
 80079cc:	df000a15 	stw	fp,40(sp)
 80079d0:	df000a04 	addi	fp,sp,40
 80079d4:	e13ffc15 	stw	r4,-16(fp)
 80079d8:	e17ffd15 	stw	r5,-12(fp)
 80079dc:	e1bffe15 	stw	r6,-8(fp)
 80079e0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 80079e4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 80079e8:	d0a6cb17 	ldw	r2,-25812(gp)
  
  if (alt_ticks_per_second ())
 80079ec:	10003c26 	beq	r2,zero,8007ae0 <alt_alarm_start+0x118>
  {
    if (alarm)
 80079f0:	e0bffc17 	ldw	r2,-16(fp)
 80079f4:	10003826 	beq	r2,zero,8007ad8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 80079f8:	e0bffc17 	ldw	r2,-16(fp)
 80079fc:	e0fffe17 	ldw	r3,-8(fp)
 8007a00:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 8007a04:	e0bffc17 	ldw	r2,-16(fp)
 8007a08:	e0ffff17 	ldw	r3,-4(fp)
 8007a0c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8007a10:	0005303a 	rdctl	r2,status
 8007a14:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8007a18:	e0fff917 	ldw	r3,-28(fp)
 8007a1c:	00bfff84 	movi	r2,-2
 8007a20:	1884703a 	and	r2,r3,r2
 8007a24:	1001703a 	wrctl	status,r2
  
  return context;
 8007a28:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 8007a2c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8007a30:	d0a6cc17 	ldw	r2,-25808(gp)
      
      current_nticks = alt_nticks();
 8007a34:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8007a38:	e0fffd17 	ldw	r3,-12(fp)
 8007a3c:	e0bff617 	ldw	r2,-40(fp)
 8007a40:	1885883a 	add	r2,r3,r2
 8007a44:	10c00044 	addi	r3,r2,1
 8007a48:	e0bffc17 	ldw	r2,-16(fp)
 8007a4c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8007a50:	e0bffc17 	ldw	r2,-16(fp)
 8007a54:	10c00217 	ldw	r3,8(r2)
 8007a58:	e0bff617 	ldw	r2,-40(fp)
 8007a5c:	1880042e 	bgeu	r3,r2,8007a70 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 8007a60:	e0bffc17 	ldw	r2,-16(fp)
 8007a64:	00c00044 	movi	r3,1
 8007a68:	10c00405 	stb	r3,16(r2)
 8007a6c:	00000206 	br	8007a78 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 8007a70:	e0bffc17 	ldw	r2,-16(fp)
 8007a74:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8007a78:	e0bffc17 	ldw	r2,-16(fp)
 8007a7c:	d0e01704 	addi	r3,gp,-32676
 8007a80:	e0fffa15 	stw	r3,-24(fp)
 8007a84:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8007a88:	e0bffb17 	ldw	r2,-20(fp)
 8007a8c:	e0fffa17 	ldw	r3,-24(fp)
 8007a90:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8007a94:	e0bffa17 	ldw	r2,-24(fp)
 8007a98:	10c00017 	ldw	r3,0(r2)
 8007a9c:	e0bffb17 	ldw	r2,-20(fp)
 8007aa0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8007aa4:	e0bffa17 	ldw	r2,-24(fp)
 8007aa8:	10800017 	ldw	r2,0(r2)
 8007aac:	e0fffb17 	ldw	r3,-20(fp)
 8007ab0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8007ab4:	e0bffa17 	ldw	r2,-24(fp)
 8007ab8:	e0fffb17 	ldw	r3,-20(fp)
 8007abc:	10c00015 	stw	r3,0(r2)
 8007ac0:	e0bff817 	ldw	r2,-32(fp)
 8007ac4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8007ac8:	e0bff717 	ldw	r2,-36(fp)
 8007acc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 8007ad0:	0005883a 	mov	r2,zero
 8007ad4:	00000306 	br	8007ae4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 8007ad8:	00bffa84 	movi	r2,-22
 8007adc:	00000106 	br	8007ae4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 8007ae0:	00bfde84 	movi	r2,-134
  }
}
 8007ae4:	e037883a 	mov	sp,fp
 8007ae8:	df000017 	ldw	fp,0(sp)
 8007aec:	dec00104 	addi	sp,sp,4
 8007af0:	f800283a 	ret

08007af4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8007af4:	defffe04 	addi	sp,sp,-8
 8007af8:	df000115 	stw	fp,4(sp)
 8007afc:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 8007b00:	e03fff15 	stw	zero,-4(fp)
 8007b04:	00000506 	br	8007b1c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 8007b08:	e0bfff17 	ldw	r2,-4(fp)
 8007b0c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 8007b10:	e0bfff17 	ldw	r2,-4(fp)
 8007b14:	10800804 	addi	r2,r2,32
 8007b18:	e0bfff15 	stw	r2,-4(fp)
 8007b1c:	e0bfff17 	ldw	r2,-4(fp)
 8007b20:	10820030 	cmpltui	r2,r2,2048
 8007b24:	103ff81e 	bne	r2,zero,8007b08 <__alt_mem_bufferram_out+0xf7e07b08>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8007b28:	0001883a 	nop
 8007b2c:	e037883a 	mov	sp,fp
 8007b30:	df000017 	ldw	fp,0(sp)
 8007b34:	dec00104 	addi	sp,sp,4
 8007b38:	f800283a 	ret

08007b3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8007b3c:	defffe04 	addi	sp,sp,-8
 8007b40:	dfc00115 	stw	ra,4(sp)
 8007b44:	df000015 	stw	fp,0(sp)
 8007b48:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8007b4c:	d0a01417 	ldw	r2,-32688(gp)
 8007b50:	10000326 	beq	r2,zero,8007b60 <alt_get_errno+0x24>
 8007b54:	d0a01417 	ldw	r2,-32688(gp)
 8007b58:	103ee83a 	callr	r2
 8007b5c:	00000106 	br	8007b64 <alt_get_errno+0x28>
 8007b60:	d0a6c604 	addi	r2,gp,-25832
}
 8007b64:	e037883a 	mov	sp,fp
 8007b68:	dfc00117 	ldw	ra,4(sp)
 8007b6c:	df000017 	ldw	fp,0(sp)
 8007b70:	dec00204 	addi	sp,sp,8
 8007b74:	f800283a 	ret

08007b78 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8007b78:	defffa04 	addi	sp,sp,-24
 8007b7c:	dfc00515 	stw	ra,20(sp)
 8007b80:	df000415 	stw	fp,16(sp)
 8007b84:	df000404 	addi	fp,sp,16
 8007b88:	e13ffe15 	stw	r4,-8(fp)
 8007b8c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8007b90:	e0bffe17 	ldw	r2,-8(fp)
 8007b94:	10000326 	beq	r2,zero,8007ba4 <alt_dev_llist_insert+0x2c>
 8007b98:	e0bffe17 	ldw	r2,-8(fp)
 8007b9c:	10800217 	ldw	r2,8(r2)
 8007ba0:	1000061e 	bne	r2,zero,8007bbc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 8007ba4:	8007b3c0 	call	8007b3c <alt_get_errno>
 8007ba8:	1007883a 	mov	r3,r2
 8007bac:	00800584 	movi	r2,22
 8007bb0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8007bb4:	00bffa84 	movi	r2,-22
 8007bb8:	00001306 	br	8007c08 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8007bbc:	e0bffe17 	ldw	r2,-8(fp)
 8007bc0:	e0ffff17 	ldw	r3,-4(fp)
 8007bc4:	e0fffc15 	stw	r3,-16(fp)
 8007bc8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8007bcc:	e0bffd17 	ldw	r2,-12(fp)
 8007bd0:	e0fffc17 	ldw	r3,-16(fp)
 8007bd4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8007bd8:	e0bffc17 	ldw	r2,-16(fp)
 8007bdc:	10c00017 	ldw	r3,0(r2)
 8007be0:	e0bffd17 	ldw	r2,-12(fp)
 8007be4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8007be8:	e0bffc17 	ldw	r2,-16(fp)
 8007bec:	10800017 	ldw	r2,0(r2)
 8007bf0:	e0fffd17 	ldw	r3,-12(fp)
 8007bf4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8007bf8:	e0bffc17 	ldw	r2,-16(fp)
 8007bfc:	e0fffd17 	ldw	r3,-12(fp)
 8007c00:	10c00015 	stw	r3,0(r2)

  return 0;  
 8007c04:	0005883a 	mov	r2,zero
}
 8007c08:	e037883a 	mov	sp,fp
 8007c0c:	dfc00117 	ldw	ra,4(sp)
 8007c10:	df000017 	ldw	fp,0(sp)
 8007c14:	dec00204 	addi	sp,sp,8
 8007c18:	f800283a 	ret

08007c1c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8007c1c:	defffd04 	addi	sp,sp,-12
 8007c20:	dfc00215 	stw	ra,8(sp)
 8007c24:	df000115 	stw	fp,4(sp)
 8007c28:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8007c2c:	00820074 	movhi	r2,2049
 8007c30:	10a30504 	addi	r2,r2,-29676
 8007c34:	e0bfff15 	stw	r2,-4(fp)
 8007c38:	00000606 	br	8007c54 <_do_ctors+0x38>
        (*ctor) (); 
 8007c3c:	e0bfff17 	ldw	r2,-4(fp)
 8007c40:	10800017 	ldw	r2,0(r2)
 8007c44:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8007c48:	e0bfff17 	ldw	r2,-4(fp)
 8007c4c:	10bfff04 	addi	r2,r2,-4
 8007c50:	e0bfff15 	stw	r2,-4(fp)
 8007c54:	e0ffff17 	ldw	r3,-4(fp)
 8007c58:	00820074 	movhi	r2,2049
 8007c5c:	10a30444 	addi	r2,r2,-29679
 8007c60:	18bff62e 	bgeu	r3,r2,8007c3c <__alt_mem_bufferram_out+0xf7e07c3c>
        (*ctor) (); 
}
 8007c64:	0001883a 	nop
 8007c68:	e037883a 	mov	sp,fp
 8007c6c:	dfc00117 	ldw	ra,4(sp)
 8007c70:	df000017 	ldw	fp,0(sp)
 8007c74:	dec00204 	addi	sp,sp,8
 8007c78:	f800283a 	ret

08007c7c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8007c7c:	defffd04 	addi	sp,sp,-12
 8007c80:	dfc00215 	stw	ra,8(sp)
 8007c84:	df000115 	stw	fp,4(sp)
 8007c88:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8007c8c:	00820074 	movhi	r2,2049
 8007c90:	10a30504 	addi	r2,r2,-29676
 8007c94:	e0bfff15 	stw	r2,-4(fp)
 8007c98:	00000606 	br	8007cb4 <_do_dtors+0x38>
        (*dtor) (); 
 8007c9c:	e0bfff17 	ldw	r2,-4(fp)
 8007ca0:	10800017 	ldw	r2,0(r2)
 8007ca4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8007ca8:	e0bfff17 	ldw	r2,-4(fp)
 8007cac:	10bfff04 	addi	r2,r2,-4
 8007cb0:	e0bfff15 	stw	r2,-4(fp)
 8007cb4:	e0ffff17 	ldw	r3,-4(fp)
 8007cb8:	00820074 	movhi	r2,2049
 8007cbc:	10a30604 	addi	r2,r2,-29672
 8007cc0:	18bff62e 	bgeu	r3,r2,8007c9c <__alt_mem_bufferram_out+0xf7e07c9c>
        (*dtor) (); 
}
 8007cc4:	0001883a 	nop
 8007cc8:	e037883a 	mov	sp,fp
 8007ccc:	dfc00117 	ldw	ra,4(sp)
 8007cd0:	df000017 	ldw	fp,0(sp)
 8007cd4:	dec00204 	addi	sp,sp,8
 8007cd8:	f800283a 	ret

08007cdc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8007cdc:	defffe04 	addi	sp,sp,-8
 8007ce0:	dfc00115 	stw	ra,4(sp)
 8007ce4:	df000015 	stw	fp,0(sp)
 8007ce8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 8007cec:	01440004 	movi	r5,4096
 8007cf0:	0009883a 	mov	r4,zero
 8007cf4:	80087480 	call	8008748 <alt_icache_flush>
#endif
}
 8007cf8:	0001883a 	nop
 8007cfc:	e037883a 	mov	sp,fp
 8007d00:	dfc00117 	ldw	ra,4(sp)
 8007d04:	df000017 	ldw	fp,0(sp)
 8007d08:	dec00204 	addi	sp,sp,8
 8007d0c:	f800283a 	ret

08007d10 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8007d10:	defff904 	addi	sp,sp,-28
 8007d14:	dfc00615 	stw	ra,24(sp)
 8007d18:	df000515 	stw	fp,20(sp)
 8007d1c:	df000504 	addi	fp,sp,20
 8007d20:	e13ffc15 	stw	r4,-16(fp)
 8007d24:	e17ffd15 	stw	r5,-12(fp)
 8007d28:	e1bffe15 	stw	r6,-8(fp)
 8007d2c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8007d30:	e0800217 	ldw	r2,8(fp)
 8007d34:	d8800015 	stw	r2,0(sp)
 8007d38:	e1ffff17 	ldw	r7,-4(fp)
 8007d3c:	e1bffe17 	ldw	r6,-8(fp)
 8007d40:	e17ffd17 	ldw	r5,-12(fp)
 8007d44:	e13ffc17 	ldw	r4,-16(fp)
 8007d48:	8007ec00 	call	8007ec0 <alt_iic_isr_register>
}  
 8007d4c:	e037883a 	mov	sp,fp
 8007d50:	dfc00117 	ldw	ra,4(sp)
 8007d54:	df000017 	ldw	fp,0(sp)
 8007d58:	dec00204 	addi	sp,sp,8
 8007d5c:	f800283a 	ret

08007d60 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8007d60:	defff904 	addi	sp,sp,-28
 8007d64:	df000615 	stw	fp,24(sp)
 8007d68:	df000604 	addi	fp,sp,24
 8007d6c:	e13ffe15 	stw	r4,-8(fp)
 8007d70:	e17fff15 	stw	r5,-4(fp)
 8007d74:	e0bfff17 	ldw	r2,-4(fp)
 8007d78:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8007d7c:	0005303a 	rdctl	r2,status
 8007d80:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8007d84:	e0fffb17 	ldw	r3,-20(fp)
 8007d88:	00bfff84 	movi	r2,-2
 8007d8c:	1884703a 	and	r2,r3,r2
 8007d90:	1001703a 	wrctl	status,r2
  
  return context;
 8007d94:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8007d98:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 8007d9c:	00c00044 	movi	r3,1
 8007da0:	e0bffa17 	ldw	r2,-24(fp)
 8007da4:	1884983a 	sll	r2,r3,r2
 8007da8:	1007883a 	mov	r3,r2
 8007dac:	d0a6ca17 	ldw	r2,-25816(gp)
 8007db0:	1884b03a 	or	r2,r3,r2
 8007db4:	d0a6ca15 	stw	r2,-25816(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8007db8:	d0a6ca17 	ldw	r2,-25816(gp)
 8007dbc:	100170fa 	wrctl	ienable,r2
 8007dc0:	e0bffc17 	ldw	r2,-16(fp)
 8007dc4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8007dc8:	e0bffd17 	ldw	r2,-12(fp)
 8007dcc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8007dd0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 8007dd4:	0001883a 	nop
}
 8007dd8:	e037883a 	mov	sp,fp
 8007ddc:	df000017 	ldw	fp,0(sp)
 8007de0:	dec00104 	addi	sp,sp,4
 8007de4:	f800283a 	ret

08007de8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 8007de8:	defff904 	addi	sp,sp,-28
 8007dec:	df000615 	stw	fp,24(sp)
 8007df0:	df000604 	addi	fp,sp,24
 8007df4:	e13ffe15 	stw	r4,-8(fp)
 8007df8:	e17fff15 	stw	r5,-4(fp)
 8007dfc:	e0bfff17 	ldw	r2,-4(fp)
 8007e00:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8007e04:	0005303a 	rdctl	r2,status
 8007e08:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8007e0c:	e0fffb17 	ldw	r3,-20(fp)
 8007e10:	00bfff84 	movi	r2,-2
 8007e14:	1884703a 	and	r2,r3,r2
 8007e18:	1001703a 	wrctl	status,r2
  
  return context;
 8007e1c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8007e20:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 8007e24:	00c00044 	movi	r3,1
 8007e28:	e0bffa17 	ldw	r2,-24(fp)
 8007e2c:	1884983a 	sll	r2,r3,r2
 8007e30:	0084303a 	nor	r2,zero,r2
 8007e34:	1007883a 	mov	r3,r2
 8007e38:	d0a6ca17 	ldw	r2,-25816(gp)
 8007e3c:	1884703a 	and	r2,r3,r2
 8007e40:	d0a6ca15 	stw	r2,-25816(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8007e44:	d0a6ca17 	ldw	r2,-25816(gp)
 8007e48:	100170fa 	wrctl	ienable,r2
 8007e4c:	e0bffc17 	ldw	r2,-16(fp)
 8007e50:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8007e54:	e0bffd17 	ldw	r2,-12(fp)
 8007e58:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8007e5c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 8007e60:	0001883a 	nop
}
 8007e64:	e037883a 	mov	sp,fp
 8007e68:	df000017 	ldw	fp,0(sp)
 8007e6c:	dec00104 	addi	sp,sp,4
 8007e70:	f800283a 	ret

08007e74 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8007e74:	defffc04 	addi	sp,sp,-16
 8007e78:	df000315 	stw	fp,12(sp)
 8007e7c:	df000304 	addi	fp,sp,12
 8007e80:	e13ffe15 	stw	r4,-8(fp)
 8007e84:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8007e88:	000530fa 	rdctl	r2,ienable
 8007e8c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8007e90:	00c00044 	movi	r3,1
 8007e94:	e0bfff17 	ldw	r2,-4(fp)
 8007e98:	1884983a 	sll	r2,r3,r2
 8007e9c:	1007883a 	mov	r3,r2
 8007ea0:	e0bffd17 	ldw	r2,-12(fp)
 8007ea4:	1884703a 	and	r2,r3,r2
 8007ea8:	1004c03a 	cmpne	r2,r2,zero
 8007eac:	10803fcc 	andi	r2,r2,255
}
 8007eb0:	e037883a 	mov	sp,fp
 8007eb4:	df000017 	ldw	fp,0(sp)
 8007eb8:	dec00104 	addi	sp,sp,4
 8007ebc:	f800283a 	ret

08007ec0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8007ec0:	defff504 	addi	sp,sp,-44
 8007ec4:	dfc00a15 	stw	ra,40(sp)
 8007ec8:	df000915 	stw	fp,36(sp)
 8007ecc:	df000904 	addi	fp,sp,36
 8007ed0:	e13ffc15 	stw	r4,-16(fp)
 8007ed4:	e17ffd15 	stw	r5,-12(fp)
 8007ed8:	e1bffe15 	stw	r6,-8(fp)
 8007edc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 8007ee0:	00bffa84 	movi	r2,-22
 8007ee4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8007ee8:	e0bffd17 	ldw	r2,-12(fp)
 8007eec:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8007ef0:	e0bff817 	ldw	r2,-32(fp)
 8007ef4:	10800808 	cmpgei	r2,r2,32
 8007ef8:	1000271e 	bne	r2,zero,8007f98 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8007efc:	0005303a 	rdctl	r2,status
 8007f00:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8007f04:	e0fffb17 	ldw	r3,-20(fp)
 8007f08:	00bfff84 	movi	r2,-2
 8007f0c:	1884703a 	and	r2,r3,r2
 8007f10:	1001703a 	wrctl	status,r2
  
  return context;
 8007f14:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8007f18:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 8007f1c:	00820074 	movhi	r2,2049
 8007f20:	10b31f04 	addi	r2,r2,-13188
 8007f24:	e0fff817 	ldw	r3,-32(fp)
 8007f28:	180690fa 	slli	r3,r3,3
 8007f2c:	10c5883a 	add	r2,r2,r3
 8007f30:	e0fffe17 	ldw	r3,-8(fp)
 8007f34:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 8007f38:	00820074 	movhi	r2,2049
 8007f3c:	10b31f04 	addi	r2,r2,-13188
 8007f40:	e0fff817 	ldw	r3,-32(fp)
 8007f44:	180690fa 	slli	r3,r3,3
 8007f48:	10c5883a 	add	r2,r2,r3
 8007f4c:	10800104 	addi	r2,r2,4
 8007f50:	e0ffff17 	ldw	r3,-4(fp)
 8007f54:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8007f58:	e0bffe17 	ldw	r2,-8(fp)
 8007f5c:	10000526 	beq	r2,zero,8007f74 <alt_iic_isr_register+0xb4>
 8007f60:	e0bff817 	ldw	r2,-32(fp)
 8007f64:	100b883a 	mov	r5,r2
 8007f68:	e13ffc17 	ldw	r4,-16(fp)
 8007f6c:	8007d600 	call	8007d60 <alt_ic_irq_enable>
 8007f70:	00000406 	br	8007f84 <alt_iic_isr_register+0xc4>
 8007f74:	e0bff817 	ldw	r2,-32(fp)
 8007f78:	100b883a 	mov	r5,r2
 8007f7c:	e13ffc17 	ldw	r4,-16(fp)
 8007f80:	8007de80 	call	8007de8 <alt_ic_irq_disable>
 8007f84:	e0bff715 	stw	r2,-36(fp)
 8007f88:	e0bffa17 	ldw	r2,-24(fp)
 8007f8c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8007f90:	e0bff917 	ldw	r2,-28(fp)
 8007f94:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8007f98:	e0bff717 	ldw	r2,-36(fp)
}
 8007f9c:	e037883a 	mov	sp,fp
 8007fa0:	dfc00117 	ldw	ra,4(sp)
 8007fa4:	df000017 	ldw	fp,0(sp)
 8007fa8:	dec00204 	addi	sp,sp,8
 8007fac:	f800283a 	ret

08007fb0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8007fb0:	defff904 	addi	sp,sp,-28
 8007fb4:	dfc00615 	stw	ra,24(sp)
 8007fb8:	df000515 	stw	fp,20(sp)
 8007fbc:	df000504 	addi	fp,sp,20
 8007fc0:	e13ffc15 	stw	r4,-16(fp)
 8007fc4:	e17ffd15 	stw	r5,-12(fp)
 8007fc8:	e1bffe15 	stw	r6,-8(fp)
 8007fcc:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 8007fd0:	e1bfff17 	ldw	r6,-4(fp)
 8007fd4:	e17ffe17 	ldw	r5,-8(fp)
 8007fd8:	e13ffd17 	ldw	r4,-12(fp)
 8007fdc:	80081f00 	call	80081f0 <open>
 8007fe0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 8007fe4:	e0bffb17 	ldw	r2,-20(fp)
 8007fe8:	10001c16 	blt	r2,zero,800805c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 8007fec:	00820074 	movhi	r2,2049
 8007ff0:	10a7cb04 	addi	r2,r2,-24788
 8007ff4:	e0fffb17 	ldw	r3,-20(fp)
 8007ff8:	18c00324 	muli	r3,r3,12
 8007ffc:	10c5883a 	add	r2,r2,r3
 8008000:	10c00017 	ldw	r3,0(r2)
 8008004:	e0bffc17 	ldw	r2,-16(fp)
 8008008:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 800800c:	00820074 	movhi	r2,2049
 8008010:	10a7cb04 	addi	r2,r2,-24788
 8008014:	e0fffb17 	ldw	r3,-20(fp)
 8008018:	18c00324 	muli	r3,r3,12
 800801c:	10c5883a 	add	r2,r2,r3
 8008020:	10800104 	addi	r2,r2,4
 8008024:	10c00017 	ldw	r3,0(r2)
 8008028:	e0bffc17 	ldw	r2,-16(fp)
 800802c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8008030:	00820074 	movhi	r2,2049
 8008034:	10a7cb04 	addi	r2,r2,-24788
 8008038:	e0fffb17 	ldw	r3,-20(fp)
 800803c:	18c00324 	muli	r3,r3,12
 8008040:	10c5883a 	add	r2,r2,r3
 8008044:	10800204 	addi	r2,r2,8
 8008048:	10c00017 	ldw	r3,0(r2)
 800804c:	e0bffc17 	ldw	r2,-16(fp)
 8008050:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8008054:	e13ffb17 	ldw	r4,-20(fp)
 8008058:	8006b540 	call	8006b54 <alt_release_fd>
  }
} 
 800805c:	0001883a 	nop
 8008060:	e037883a 	mov	sp,fp
 8008064:	dfc00117 	ldw	ra,4(sp)
 8008068:	df000017 	ldw	fp,0(sp)
 800806c:	dec00204 	addi	sp,sp,8
 8008070:	f800283a 	ret

08008074 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8008074:	defffb04 	addi	sp,sp,-20
 8008078:	dfc00415 	stw	ra,16(sp)
 800807c:	df000315 	stw	fp,12(sp)
 8008080:	df000304 	addi	fp,sp,12
 8008084:	e13ffd15 	stw	r4,-12(fp)
 8008088:	e17ffe15 	stw	r5,-8(fp)
 800808c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 8008090:	01c07fc4 	movi	r7,511
 8008094:	01800044 	movi	r6,1
 8008098:	e17ffd17 	ldw	r5,-12(fp)
 800809c:	01020074 	movhi	r4,2049
 80080a0:	2127ce04 	addi	r4,r4,-24776
 80080a4:	8007fb00 	call	8007fb0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 80080a8:	01c07fc4 	movi	r7,511
 80080ac:	000d883a 	mov	r6,zero
 80080b0:	e17ffe17 	ldw	r5,-8(fp)
 80080b4:	01020074 	movhi	r4,2049
 80080b8:	2127cb04 	addi	r4,r4,-24788
 80080bc:	8007fb00 	call	8007fb0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 80080c0:	01c07fc4 	movi	r7,511
 80080c4:	01800044 	movi	r6,1
 80080c8:	e17fff17 	ldw	r5,-4(fp)
 80080cc:	01020074 	movhi	r4,2049
 80080d0:	2127d104 	addi	r4,r4,-24764
 80080d4:	8007fb00 	call	8007fb0 <alt_open_fd>
}  
 80080d8:	0001883a 	nop
 80080dc:	e037883a 	mov	sp,fp
 80080e0:	dfc00117 	ldw	ra,4(sp)
 80080e4:	df000017 	ldw	fp,0(sp)
 80080e8:	dec00204 	addi	sp,sp,8
 80080ec:	f800283a 	ret

080080f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80080f0:	defffe04 	addi	sp,sp,-8
 80080f4:	dfc00115 	stw	ra,4(sp)
 80080f8:	df000015 	stw	fp,0(sp)
 80080fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8008100:	d0a01417 	ldw	r2,-32688(gp)
 8008104:	10000326 	beq	r2,zero,8008114 <alt_get_errno+0x24>
 8008108:	d0a01417 	ldw	r2,-32688(gp)
 800810c:	103ee83a 	callr	r2
 8008110:	00000106 	br	8008118 <alt_get_errno+0x28>
 8008114:	d0a6c604 	addi	r2,gp,-25832
}
 8008118:	e037883a 	mov	sp,fp
 800811c:	dfc00117 	ldw	ra,4(sp)
 8008120:	df000017 	ldw	fp,0(sp)
 8008124:	dec00204 	addi	sp,sp,8
 8008128:	f800283a 	ret

0800812c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 800812c:	defffd04 	addi	sp,sp,-12
 8008130:	df000215 	stw	fp,8(sp)
 8008134:	df000204 	addi	fp,sp,8
 8008138:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 800813c:	e0bfff17 	ldw	r2,-4(fp)
 8008140:	10800217 	ldw	r2,8(r2)
 8008144:	10d00034 	orhi	r3,r2,16384
 8008148:	e0bfff17 	ldw	r2,-4(fp)
 800814c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8008150:	e03ffe15 	stw	zero,-8(fp)
 8008154:	00001d06 	br	80081cc <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8008158:	00820074 	movhi	r2,2049
 800815c:	10a7cb04 	addi	r2,r2,-24788
 8008160:	e0fffe17 	ldw	r3,-8(fp)
 8008164:	18c00324 	muli	r3,r3,12
 8008168:	10c5883a 	add	r2,r2,r3
 800816c:	10c00017 	ldw	r3,0(r2)
 8008170:	e0bfff17 	ldw	r2,-4(fp)
 8008174:	10800017 	ldw	r2,0(r2)
 8008178:	1880111e 	bne	r3,r2,80081c0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 800817c:	00820074 	movhi	r2,2049
 8008180:	10a7cb04 	addi	r2,r2,-24788
 8008184:	e0fffe17 	ldw	r3,-8(fp)
 8008188:	18c00324 	muli	r3,r3,12
 800818c:	10c5883a 	add	r2,r2,r3
 8008190:	10800204 	addi	r2,r2,8
 8008194:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8008198:	1000090e 	bge	r2,zero,80081c0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 800819c:	e0bffe17 	ldw	r2,-8(fp)
 80081a0:	10c00324 	muli	r3,r2,12
 80081a4:	00820074 	movhi	r2,2049
 80081a8:	10a7cb04 	addi	r2,r2,-24788
 80081ac:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 80081b0:	e0bfff17 	ldw	r2,-4(fp)
 80081b4:	18800226 	beq	r3,r2,80081c0 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 80081b8:	00bffcc4 	movi	r2,-13
 80081bc:	00000806 	br	80081e0 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 80081c0:	e0bffe17 	ldw	r2,-8(fp)
 80081c4:	10800044 	addi	r2,r2,1
 80081c8:	e0bffe15 	stw	r2,-8(fp)
 80081cc:	d0a01317 	ldw	r2,-32692(gp)
 80081d0:	1007883a 	mov	r3,r2
 80081d4:	e0bffe17 	ldw	r2,-8(fp)
 80081d8:	18bfdf2e 	bgeu	r3,r2,8008158 <__alt_mem_bufferram_out+0xf7e08158>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 80081dc:	0005883a 	mov	r2,zero
}
 80081e0:	e037883a 	mov	sp,fp
 80081e4:	df000017 	ldw	fp,0(sp)
 80081e8:	dec00104 	addi	sp,sp,4
 80081ec:	f800283a 	ret

080081f0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 80081f0:	defff604 	addi	sp,sp,-40
 80081f4:	dfc00915 	stw	ra,36(sp)
 80081f8:	df000815 	stw	fp,32(sp)
 80081fc:	df000804 	addi	fp,sp,32
 8008200:	e13ffd15 	stw	r4,-12(fp)
 8008204:	e17ffe15 	stw	r5,-8(fp)
 8008208:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 800820c:	00bfffc4 	movi	r2,-1
 8008210:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 8008214:	00bffb44 	movi	r2,-19
 8008218:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 800821c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8008220:	d1601104 	addi	r5,gp,-32700
 8008224:	e13ffd17 	ldw	r4,-12(fp)
 8008228:	800850c0 	call	800850c <alt_find_dev>
 800822c:	e0bff815 	stw	r2,-32(fp)
 8008230:	e0bff817 	ldw	r2,-32(fp)
 8008234:	1000051e 	bne	r2,zero,800824c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8008238:	e13ffd17 	ldw	r4,-12(fp)
 800823c:	800859c0 	call	800859c <alt_find_file>
 8008240:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 8008244:	00800044 	movi	r2,1
 8008248:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 800824c:	e0bff817 	ldw	r2,-32(fp)
 8008250:	10002926 	beq	r2,zero,80082f8 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8008254:	e13ff817 	ldw	r4,-32(fp)
 8008258:	80086a40 	call	80086a4 <alt_get_fd>
 800825c:	e0bff915 	stw	r2,-28(fp)
 8008260:	e0bff917 	ldw	r2,-28(fp)
 8008264:	1000030e 	bge	r2,zero,8008274 <open+0x84>
    {
      status = index;
 8008268:	e0bff917 	ldw	r2,-28(fp)
 800826c:	e0bffa15 	stw	r2,-24(fp)
 8008270:	00002306 	br	8008300 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 8008274:	e0bff917 	ldw	r2,-28(fp)
 8008278:	10c00324 	muli	r3,r2,12
 800827c:	00820074 	movhi	r2,2049
 8008280:	10a7cb04 	addi	r2,r2,-24788
 8008284:	1885883a 	add	r2,r3,r2
 8008288:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 800828c:	e0fffe17 	ldw	r3,-8(fp)
 8008290:	00900034 	movhi	r2,16384
 8008294:	10bfffc4 	addi	r2,r2,-1
 8008298:	1886703a 	and	r3,r3,r2
 800829c:	e0bffc17 	ldw	r2,-16(fp)
 80082a0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 80082a4:	e0bffb17 	ldw	r2,-20(fp)
 80082a8:	1000051e 	bne	r2,zero,80082c0 <open+0xd0>
 80082ac:	e13ffc17 	ldw	r4,-16(fp)
 80082b0:	800812c0 	call	800812c <alt_file_locked>
 80082b4:	e0bffa15 	stw	r2,-24(fp)
 80082b8:	e0bffa17 	ldw	r2,-24(fp)
 80082bc:	10001016 	blt	r2,zero,8008300 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 80082c0:	e0bff817 	ldw	r2,-32(fp)
 80082c4:	10800317 	ldw	r2,12(r2)
 80082c8:	10000826 	beq	r2,zero,80082ec <open+0xfc>
 80082cc:	e0bff817 	ldw	r2,-32(fp)
 80082d0:	10800317 	ldw	r2,12(r2)
 80082d4:	e1ffff17 	ldw	r7,-4(fp)
 80082d8:	e1bffe17 	ldw	r6,-8(fp)
 80082dc:	e17ffd17 	ldw	r5,-12(fp)
 80082e0:	e13ffc17 	ldw	r4,-16(fp)
 80082e4:	103ee83a 	callr	r2
 80082e8:	00000106 	br	80082f0 <open+0x100>
 80082ec:	0005883a 	mov	r2,zero
 80082f0:	e0bffa15 	stw	r2,-24(fp)
 80082f4:	00000206 	br	8008300 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 80082f8:	00bffb44 	movi	r2,-19
 80082fc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8008300:	e0bffa17 	ldw	r2,-24(fp)
 8008304:	1000090e 	bge	r2,zero,800832c <open+0x13c>
  {
    alt_release_fd (index);  
 8008308:	e13ff917 	ldw	r4,-28(fp)
 800830c:	8006b540 	call	8006b54 <alt_release_fd>
    ALT_ERRNO = -status;
 8008310:	80080f00 	call	80080f0 <alt_get_errno>
 8008314:	1007883a 	mov	r3,r2
 8008318:	e0bffa17 	ldw	r2,-24(fp)
 800831c:	0085c83a 	sub	r2,zero,r2
 8008320:	18800015 	stw	r2,0(r3)
    return -1;
 8008324:	00bfffc4 	movi	r2,-1
 8008328:	00000106 	br	8008330 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 800832c:	e0bff917 	ldw	r2,-28(fp)
}
 8008330:	e037883a 	mov	sp,fp
 8008334:	dfc00117 	ldw	ra,4(sp)
 8008338:	df000017 	ldw	fp,0(sp)
 800833c:	dec00204 	addi	sp,sp,8
 8008340:	f800283a 	ret

08008344 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8008344:	defffa04 	addi	sp,sp,-24
 8008348:	df000515 	stw	fp,20(sp)
 800834c:	df000504 	addi	fp,sp,20
 8008350:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8008354:	0005303a 	rdctl	r2,status
 8008358:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800835c:	e0fffc17 	ldw	r3,-16(fp)
 8008360:	00bfff84 	movi	r2,-2
 8008364:	1884703a 	and	r2,r3,r2
 8008368:	1001703a 	wrctl	status,r2
  
  return context;
 800836c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8008370:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 8008374:	e0bfff17 	ldw	r2,-4(fp)
 8008378:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 800837c:	e0bffd17 	ldw	r2,-12(fp)
 8008380:	10800017 	ldw	r2,0(r2)
 8008384:	e0fffd17 	ldw	r3,-12(fp)
 8008388:	18c00117 	ldw	r3,4(r3)
 800838c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8008390:	e0bffd17 	ldw	r2,-12(fp)
 8008394:	10800117 	ldw	r2,4(r2)
 8008398:	e0fffd17 	ldw	r3,-12(fp)
 800839c:	18c00017 	ldw	r3,0(r3)
 80083a0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 80083a4:	e0bffd17 	ldw	r2,-12(fp)
 80083a8:	e0fffd17 	ldw	r3,-12(fp)
 80083ac:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 80083b0:	e0bffd17 	ldw	r2,-12(fp)
 80083b4:	e0fffd17 	ldw	r3,-12(fp)
 80083b8:	10c00015 	stw	r3,0(r2)
 80083bc:	e0bffb17 	ldw	r2,-20(fp)
 80083c0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80083c4:	e0bffe17 	ldw	r2,-8(fp)
 80083c8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 80083cc:	0001883a 	nop
 80083d0:	e037883a 	mov	sp,fp
 80083d4:	df000017 	ldw	fp,0(sp)
 80083d8:	dec00104 	addi	sp,sp,4
 80083dc:	f800283a 	ret

080083e0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 80083e0:	defffb04 	addi	sp,sp,-20
 80083e4:	dfc00415 	stw	ra,16(sp)
 80083e8:	df000315 	stw	fp,12(sp)
 80083ec:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 80083f0:	d0a01717 	ldw	r2,-32676(gp)
 80083f4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 80083f8:	d0a6cc17 	ldw	r2,-25808(gp)
 80083fc:	10800044 	addi	r2,r2,1
 8008400:	d0a6cc15 	stw	r2,-25808(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8008404:	00002e06 	br	80084c0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8008408:	e0bffd17 	ldw	r2,-12(fp)
 800840c:	10800017 	ldw	r2,0(r2)
 8008410:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8008414:	e0bffd17 	ldw	r2,-12(fp)
 8008418:	10800403 	ldbu	r2,16(r2)
 800841c:	10803fcc 	andi	r2,r2,255
 8008420:	10000426 	beq	r2,zero,8008434 <alt_tick+0x54>
 8008424:	d0a6cc17 	ldw	r2,-25808(gp)
 8008428:	1000021e 	bne	r2,zero,8008434 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 800842c:	e0bffd17 	ldw	r2,-12(fp)
 8008430:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8008434:	e0bffd17 	ldw	r2,-12(fp)
 8008438:	10800217 	ldw	r2,8(r2)
 800843c:	d0e6cc17 	ldw	r3,-25808(gp)
 8008440:	18801d36 	bltu	r3,r2,80084b8 <alt_tick+0xd8>
 8008444:	e0bffd17 	ldw	r2,-12(fp)
 8008448:	10800403 	ldbu	r2,16(r2)
 800844c:	10803fcc 	andi	r2,r2,255
 8008450:	1000191e 	bne	r2,zero,80084b8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 8008454:	e0bffd17 	ldw	r2,-12(fp)
 8008458:	10800317 	ldw	r2,12(r2)
 800845c:	e0fffd17 	ldw	r3,-12(fp)
 8008460:	18c00517 	ldw	r3,20(r3)
 8008464:	1809883a 	mov	r4,r3
 8008468:	103ee83a 	callr	r2
 800846c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8008470:	e0bfff17 	ldw	r2,-4(fp)
 8008474:	1000031e 	bne	r2,zero,8008484 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8008478:	e13ffd17 	ldw	r4,-12(fp)
 800847c:	80083440 	call	8008344 <alt_alarm_stop>
 8008480:	00000d06 	br	80084b8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 8008484:	e0bffd17 	ldw	r2,-12(fp)
 8008488:	10c00217 	ldw	r3,8(r2)
 800848c:	e0bfff17 	ldw	r2,-4(fp)
 8008490:	1887883a 	add	r3,r3,r2
 8008494:	e0bffd17 	ldw	r2,-12(fp)
 8008498:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 800849c:	e0bffd17 	ldw	r2,-12(fp)
 80084a0:	10c00217 	ldw	r3,8(r2)
 80084a4:	d0a6cc17 	ldw	r2,-25808(gp)
 80084a8:	1880032e 	bgeu	r3,r2,80084b8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 80084ac:	e0bffd17 	ldw	r2,-12(fp)
 80084b0:	00c00044 	movi	r3,1
 80084b4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 80084b8:	e0bffe17 	ldw	r2,-8(fp)
 80084bc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 80084c0:	e0fffd17 	ldw	r3,-12(fp)
 80084c4:	d0a01704 	addi	r2,gp,-32676
 80084c8:	18bfcf1e 	bne	r3,r2,8008408 <__alt_mem_bufferram_out+0xf7e08408>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 80084cc:	0001883a 	nop
}
 80084d0:	0001883a 	nop
 80084d4:	e037883a 	mov	sp,fp
 80084d8:	dfc00117 	ldw	ra,4(sp)
 80084dc:	df000017 	ldw	fp,0(sp)
 80084e0:	dec00204 	addi	sp,sp,8
 80084e4:	f800283a 	ret

080084e8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 80084e8:	deffff04 	addi	sp,sp,-4
 80084ec:	df000015 	stw	fp,0(sp)
 80084f0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 80084f4:	000170fa 	wrctl	ienable,zero
}
 80084f8:	0001883a 	nop
 80084fc:	e037883a 	mov	sp,fp
 8008500:	df000017 	ldw	fp,0(sp)
 8008504:	dec00104 	addi	sp,sp,4
 8008508:	f800283a 	ret

0800850c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 800850c:	defffa04 	addi	sp,sp,-24
 8008510:	dfc00515 	stw	ra,20(sp)
 8008514:	df000415 	stw	fp,16(sp)
 8008518:	df000404 	addi	fp,sp,16
 800851c:	e13ffe15 	stw	r4,-8(fp)
 8008520:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8008524:	e0bfff17 	ldw	r2,-4(fp)
 8008528:	10800017 	ldw	r2,0(r2)
 800852c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8008530:	e13ffe17 	ldw	r4,-8(fp)
 8008534:	8003d3c0 	call	8003d3c <strlen>
 8008538:	10800044 	addi	r2,r2,1
 800853c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8008540:	00000d06 	br	8008578 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8008544:	e0bffc17 	ldw	r2,-16(fp)
 8008548:	10800217 	ldw	r2,8(r2)
 800854c:	e0fffd17 	ldw	r3,-12(fp)
 8008550:	180d883a 	mov	r6,r3
 8008554:	e17ffe17 	ldw	r5,-8(fp)
 8008558:	1009883a 	mov	r4,r2
 800855c:	80088c00 	call	80088c0 <memcmp>
 8008560:	1000021e 	bne	r2,zero,800856c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8008564:	e0bffc17 	ldw	r2,-16(fp)
 8008568:	00000706 	br	8008588 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 800856c:	e0bffc17 	ldw	r2,-16(fp)
 8008570:	10800017 	ldw	r2,0(r2)
 8008574:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8008578:	e0fffc17 	ldw	r3,-16(fp)
 800857c:	e0bfff17 	ldw	r2,-4(fp)
 8008580:	18bff01e 	bne	r3,r2,8008544 <__alt_mem_bufferram_out+0xf7e08544>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8008584:	0005883a 	mov	r2,zero
}
 8008588:	e037883a 	mov	sp,fp
 800858c:	dfc00117 	ldw	ra,4(sp)
 8008590:	df000017 	ldw	fp,0(sp)
 8008594:	dec00204 	addi	sp,sp,8
 8008598:	f800283a 	ret

0800859c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 800859c:	defffb04 	addi	sp,sp,-20
 80085a0:	dfc00415 	stw	ra,16(sp)
 80085a4:	df000315 	stw	fp,12(sp)
 80085a8:	df000304 	addi	fp,sp,12
 80085ac:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 80085b0:	d0a00f17 	ldw	r2,-32708(gp)
 80085b4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 80085b8:	00003106 	br	8008680 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 80085bc:	e0bffd17 	ldw	r2,-12(fp)
 80085c0:	10800217 	ldw	r2,8(r2)
 80085c4:	1009883a 	mov	r4,r2
 80085c8:	8003d3c0 	call	8003d3c <strlen>
 80085cc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 80085d0:	e0bffd17 	ldw	r2,-12(fp)
 80085d4:	10c00217 	ldw	r3,8(r2)
 80085d8:	e0bffe17 	ldw	r2,-8(fp)
 80085dc:	10bfffc4 	addi	r2,r2,-1
 80085e0:	1885883a 	add	r2,r3,r2
 80085e4:	10800003 	ldbu	r2,0(r2)
 80085e8:	10803fcc 	andi	r2,r2,255
 80085ec:	1080201c 	xori	r2,r2,128
 80085f0:	10bfe004 	addi	r2,r2,-128
 80085f4:	10800bd8 	cmpnei	r2,r2,47
 80085f8:	1000031e 	bne	r2,zero,8008608 <alt_find_file+0x6c>
    {
      len -= 1;
 80085fc:	e0bffe17 	ldw	r2,-8(fp)
 8008600:	10bfffc4 	addi	r2,r2,-1
 8008604:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8008608:	e0bffe17 	ldw	r2,-8(fp)
 800860c:	e0ffff17 	ldw	r3,-4(fp)
 8008610:	1885883a 	add	r2,r3,r2
 8008614:	10800003 	ldbu	r2,0(r2)
 8008618:	10803fcc 	andi	r2,r2,255
 800861c:	1080201c 	xori	r2,r2,128
 8008620:	10bfe004 	addi	r2,r2,-128
 8008624:	10800be0 	cmpeqi	r2,r2,47
 8008628:	1000081e 	bne	r2,zero,800864c <alt_find_file+0xb0>
 800862c:	e0bffe17 	ldw	r2,-8(fp)
 8008630:	e0ffff17 	ldw	r3,-4(fp)
 8008634:	1885883a 	add	r2,r3,r2
 8008638:	10800003 	ldbu	r2,0(r2)
 800863c:	10803fcc 	andi	r2,r2,255
 8008640:	1080201c 	xori	r2,r2,128
 8008644:	10bfe004 	addi	r2,r2,-128
 8008648:	10000a1e 	bne	r2,zero,8008674 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 800864c:	e0bffd17 	ldw	r2,-12(fp)
 8008650:	10800217 	ldw	r2,8(r2)
 8008654:	e0fffe17 	ldw	r3,-8(fp)
 8008658:	180d883a 	mov	r6,r3
 800865c:	e17fff17 	ldw	r5,-4(fp)
 8008660:	1009883a 	mov	r4,r2
 8008664:	80088c00 	call	80088c0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8008668:	1000021e 	bne	r2,zero,8008674 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 800866c:	e0bffd17 	ldw	r2,-12(fp)
 8008670:	00000706 	br	8008690 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 8008674:	e0bffd17 	ldw	r2,-12(fp)
 8008678:	10800017 	ldw	r2,0(r2)
 800867c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8008680:	e0fffd17 	ldw	r3,-12(fp)
 8008684:	d0a00f04 	addi	r2,gp,-32708
 8008688:	18bfcc1e 	bne	r3,r2,80085bc <__alt_mem_bufferram_out+0xf7e085bc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 800868c:	0005883a 	mov	r2,zero
}
 8008690:	e037883a 	mov	sp,fp
 8008694:	dfc00117 	ldw	ra,4(sp)
 8008698:	df000017 	ldw	fp,0(sp)
 800869c:	dec00204 	addi	sp,sp,8
 80086a0:	f800283a 	ret

080086a4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 80086a4:	defffc04 	addi	sp,sp,-16
 80086a8:	df000315 	stw	fp,12(sp)
 80086ac:	df000304 	addi	fp,sp,12
 80086b0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 80086b4:	00bffa04 	movi	r2,-24
 80086b8:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 80086bc:	e03ffd15 	stw	zero,-12(fp)
 80086c0:	00001906 	br	8008728 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 80086c4:	00820074 	movhi	r2,2049
 80086c8:	10a7cb04 	addi	r2,r2,-24788
 80086cc:	e0fffd17 	ldw	r3,-12(fp)
 80086d0:	18c00324 	muli	r3,r3,12
 80086d4:	10c5883a 	add	r2,r2,r3
 80086d8:	10800017 	ldw	r2,0(r2)
 80086dc:	10000f1e 	bne	r2,zero,800871c <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 80086e0:	00820074 	movhi	r2,2049
 80086e4:	10a7cb04 	addi	r2,r2,-24788
 80086e8:	e0fffd17 	ldw	r3,-12(fp)
 80086ec:	18c00324 	muli	r3,r3,12
 80086f0:	10c5883a 	add	r2,r2,r3
 80086f4:	e0ffff17 	ldw	r3,-4(fp)
 80086f8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 80086fc:	d0e01317 	ldw	r3,-32692(gp)
 8008700:	e0bffd17 	ldw	r2,-12(fp)
 8008704:	1880020e 	bge	r3,r2,8008710 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 8008708:	e0bffd17 	ldw	r2,-12(fp)
 800870c:	d0a01315 	stw	r2,-32692(gp)
      }
      rc = i;
 8008710:	e0bffd17 	ldw	r2,-12(fp)
 8008714:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 8008718:	00000606 	br	8008734 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 800871c:	e0bffd17 	ldw	r2,-12(fp)
 8008720:	10800044 	addi	r2,r2,1
 8008724:	e0bffd15 	stw	r2,-12(fp)
 8008728:	e0bffd17 	ldw	r2,-12(fp)
 800872c:	10800810 	cmplti	r2,r2,32
 8008730:	103fe41e 	bne	r2,zero,80086c4 <__alt_mem_bufferram_out+0xf7e086c4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8008734:	e0bffe17 	ldw	r2,-8(fp)
}
 8008738:	e037883a 	mov	sp,fp
 800873c:	df000017 	ldw	fp,0(sp)
 8008740:	dec00104 	addi	sp,sp,4
 8008744:	f800283a 	ret

08008748 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 8008748:	defffb04 	addi	sp,sp,-20
 800874c:	df000415 	stw	fp,16(sp)
 8008750:	df000404 	addi	fp,sp,16
 8008754:	e13ffe15 	stw	r4,-8(fp)
 8008758:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 800875c:	e0bfff17 	ldw	r2,-4(fp)
 8008760:	10840070 	cmpltui	r2,r2,4097
 8008764:	1000021e 	bne	r2,zero,8008770 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 8008768:	00840004 	movi	r2,4096
 800876c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 8008770:	e0fffe17 	ldw	r3,-8(fp)
 8008774:	e0bfff17 	ldw	r2,-4(fp)
 8008778:	1885883a 	add	r2,r3,r2
 800877c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8008780:	e0bffe17 	ldw	r2,-8(fp)
 8008784:	e0bffc15 	stw	r2,-16(fp)
 8008788:	00000506 	br	80087a0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 800878c:	e0bffc17 	ldw	r2,-16(fp)
 8008790:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8008794:	e0bffc17 	ldw	r2,-16(fp)
 8008798:	10800804 	addi	r2,r2,32
 800879c:	e0bffc15 	stw	r2,-16(fp)
 80087a0:	e0fffc17 	ldw	r3,-16(fp)
 80087a4:	e0bffd17 	ldw	r2,-12(fp)
 80087a8:	18bff836 	bltu	r3,r2,800878c <__alt_mem_bufferram_out+0xf7e0878c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 80087ac:	e0bffe17 	ldw	r2,-8(fp)
 80087b0:	108007cc 	andi	r2,r2,31
 80087b4:	10000226 	beq	r2,zero,80087c0 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 80087b8:	e0bffc17 	ldw	r2,-16(fp)
 80087bc:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 80087c0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 80087c4:	0001883a 	nop
 80087c8:	e037883a 	mov	sp,fp
 80087cc:	df000017 	ldw	fp,0(sp)
 80087d0:	dec00104 	addi	sp,sp,4
 80087d4:	f800283a 	ret

080087d8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 80087d8:	defffe04 	addi	sp,sp,-8
 80087dc:	df000115 	stw	fp,4(sp)
 80087e0:	df000104 	addi	fp,sp,4
 80087e4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 80087e8:	e0bfff17 	ldw	r2,-4(fp)
 80087ec:	10bffe84 	addi	r2,r2,-6
 80087f0:	10c00428 	cmpgeui	r3,r2,16
 80087f4:	18001a1e 	bne	r3,zero,8008860 <alt_exception_cause_generated_bad_addr+0x88>
 80087f8:	100690ba 	slli	r3,r2,2
 80087fc:	00820074 	movhi	r2,2049
 8008800:	10a20404 	addi	r2,r2,-30704
 8008804:	1885883a 	add	r2,r3,r2
 8008808:	10800017 	ldw	r2,0(r2)
 800880c:	1000683a 	jmp	r2
 8008810:	08008850 	cmplti	zero,at,545
 8008814:	08008850 	cmplti	zero,at,545
 8008818:	08008860 	cmpeqi	zero,at,545
 800881c:	08008860 	cmpeqi	zero,at,545
 8008820:	08008860 	cmpeqi	zero,at,545
 8008824:	08008850 	cmplti	zero,at,545
 8008828:	08008858 	cmpnei	zero,at,545
 800882c:	08008860 	cmpeqi	zero,at,545
 8008830:	08008850 	cmplti	zero,at,545
 8008834:	08008850 	cmplti	zero,at,545
 8008838:	08008860 	cmpeqi	zero,at,545
 800883c:	08008850 	cmplti	zero,at,545
 8008840:	08008858 	cmpnei	zero,at,545
 8008844:	08008860 	cmpeqi	zero,at,545
 8008848:	08008860 	cmpeqi	zero,at,545
 800884c:	08008850 	cmplti	zero,at,545
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 8008850:	00800044 	movi	r2,1
 8008854:	00000306 	br	8008864 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 8008858:	0005883a 	mov	r2,zero
 800885c:	00000106 	br	8008864 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 8008860:	0005883a 	mov	r2,zero
  }
}
 8008864:	e037883a 	mov	sp,fp
 8008868:	df000017 	ldw	fp,0(sp)
 800886c:	dec00104 	addi	sp,sp,4
 8008870:	f800283a 	ret

08008874 <atexit>:
 8008874:	200b883a 	mov	r5,r4
 8008878:	000f883a 	mov	r7,zero
 800887c:	000d883a 	mov	r6,zero
 8008880:	0009883a 	mov	r4,zero
 8008884:	800893c1 	jmpi	800893c <__register_exitproc>

08008888 <exit>:
 8008888:	defffe04 	addi	sp,sp,-8
 800888c:	000b883a 	mov	r5,zero
 8008890:	dc000015 	stw	r16,0(sp)
 8008894:	dfc00115 	stw	ra,4(sp)
 8008898:	2021883a 	mov	r16,r4
 800889c:	8008a540 	call	8008a54 <__call_exitprocs>
 80088a0:	00820074 	movhi	r2,2049
 80088a4:	10ac4e04 	addi	r2,r2,-20168
 80088a8:	11000017 	ldw	r4,0(r2)
 80088ac:	20800f17 	ldw	r2,60(r4)
 80088b0:	10000126 	beq	r2,zero,80088b8 <exit+0x30>
 80088b4:	103ee83a 	callr	r2
 80088b8:	8009883a 	mov	r4,r16
 80088bc:	80063d00 	call	80063d0 <_exit>

080088c0 <memcmp>:
 80088c0:	01c000c4 	movi	r7,3
 80088c4:	3980192e 	bgeu	r7,r6,800892c <memcmp+0x6c>
 80088c8:	2144b03a 	or	r2,r4,r5
 80088cc:	11c4703a 	and	r2,r2,r7
 80088d0:	10000f26 	beq	r2,zero,8008910 <memcmp+0x50>
 80088d4:	20800003 	ldbu	r2,0(r4)
 80088d8:	28c00003 	ldbu	r3,0(r5)
 80088dc:	10c0151e 	bne	r2,r3,8008934 <memcmp+0x74>
 80088e0:	31bfff84 	addi	r6,r6,-2
 80088e4:	01ffffc4 	movi	r7,-1
 80088e8:	00000406 	br	80088fc <memcmp+0x3c>
 80088ec:	20800003 	ldbu	r2,0(r4)
 80088f0:	28c00003 	ldbu	r3,0(r5)
 80088f4:	31bfffc4 	addi	r6,r6,-1
 80088f8:	10c00e1e 	bne	r2,r3,8008934 <memcmp+0x74>
 80088fc:	21000044 	addi	r4,r4,1
 8008900:	29400044 	addi	r5,r5,1
 8008904:	31fff91e 	bne	r6,r7,80088ec <__alt_mem_bufferram_out+0xf7e088ec>
 8008908:	0005883a 	mov	r2,zero
 800890c:	f800283a 	ret
 8008910:	20c00017 	ldw	r3,0(r4)
 8008914:	28800017 	ldw	r2,0(r5)
 8008918:	18bfee1e 	bne	r3,r2,80088d4 <__alt_mem_bufferram_out+0xf7e088d4>
 800891c:	31bfff04 	addi	r6,r6,-4
 8008920:	21000104 	addi	r4,r4,4
 8008924:	29400104 	addi	r5,r5,4
 8008928:	39bff936 	bltu	r7,r6,8008910 <__alt_mem_bufferram_out+0xf7e08910>
 800892c:	303fe91e 	bne	r6,zero,80088d4 <__alt_mem_bufferram_out+0xf7e088d4>
 8008930:	003ff506 	br	8008908 <__alt_mem_bufferram_out+0xf7e08908>
 8008934:	10c5c83a 	sub	r2,r2,r3
 8008938:	f800283a 	ret

0800893c <__register_exitproc>:
 800893c:	defffa04 	addi	sp,sp,-24
 8008940:	dc000315 	stw	r16,12(sp)
 8008944:	04020074 	movhi	r16,2049
 8008948:	842c4e04 	addi	r16,r16,-20168
 800894c:	80c00017 	ldw	r3,0(r16)
 8008950:	dc400415 	stw	r17,16(sp)
 8008954:	dfc00515 	stw	ra,20(sp)
 8008958:	18805217 	ldw	r2,328(r3)
 800895c:	2023883a 	mov	r17,r4
 8008960:	10003726 	beq	r2,zero,8008a40 <__register_exitproc+0x104>
 8008964:	10c00117 	ldw	r3,4(r2)
 8008968:	010007c4 	movi	r4,31
 800896c:	20c00e16 	blt	r4,r3,80089a8 <__register_exitproc+0x6c>
 8008970:	1a000044 	addi	r8,r3,1
 8008974:	8800221e 	bne	r17,zero,8008a00 <__register_exitproc+0xc4>
 8008978:	18c00084 	addi	r3,r3,2
 800897c:	18c7883a 	add	r3,r3,r3
 8008980:	18c7883a 	add	r3,r3,r3
 8008984:	12000115 	stw	r8,4(r2)
 8008988:	10c7883a 	add	r3,r2,r3
 800898c:	19400015 	stw	r5,0(r3)
 8008990:	0005883a 	mov	r2,zero
 8008994:	dfc00517 	ldw	ra,20(sp)
 8008998:	dc400417 	ldw	r17,16(sp)
 800899c:	dc000317 	ldw	r16,12(sp)
 80089a0:	dec00604 	addi	sp,sp,24
 80089a4:	f800283a 	ret
 80089a8:	00820034 	movhi	r2,2048
 80089ac:	108b9404 	addi	r2,r2,11856
 80089b0:	10002626 	beq	r2,zero,8008a4c <__register_exitproc+0x110>
 80089b4:	01006404 	movi	r4,400
 80089b8:	d9400015 	stw	r5,0(sp)
 80089bc:	d9800115 	stw	r6,4(sp)
 80089c0:	d9c00215 	stw	r7,8(sp)
 80089c4:	8002e500 	call	8002e50 <malloc>
 80089c8:	d9400017 	ldw	r5,0(sp)
 80089cc:	d9800117 	ldw	r6,4(sp)
 80089d0:	d9c00217 	ldw	r7,8(sp)
 80089d4:	10001d26 	beq	r2,zero,8008a4c <__register_exitproc+0x110>
 80089d8:	81000017 	ldw	r4,0(r16)
 80089dc:	10000115 	stw	zero,4(r2)
 80089e0:	02000044 	movi	r8,1
 80089e4:	22405217 	ldw	r9,328(r4)
 80089e8:	0007883a 	mov	r3,zero
 80089ec:	12400015 	stw	r9,0(r2)
 80089f0:	20805215 	stw	r2,328(r4)
 80089f4:	10006215 	stw	zero,392(r2)
 80089f8:	10006315 	stw	zero,396(r2)
 80089fc:	883fde26 	beq	r17,zero,8008978 <__alt_mem_bufferram_out+0xf7e08978>
 8008a00:	18c9883a 	add	r4,r3,r3
 8008a04:	2109883a 	add	r4,r4,r4
 8008a08:	1109883a 	add	r4,r2,r4
 8008a0c:	21802215 	stw	r6,136(r4)
 8008a10:	01800044 	movi	r6,1
 8008a14:	12406217 	ldw	r9,392(r2)
 8008a18:	30cc983a 	sll	r6,r6,r3
 8008a1c:	4992b03a 	or	r9,r9,r6
 8008a20:	12406215 	stw	r9,392(r2)
 8008a24:	21c04215 	stw	r7,264(r4)
 8008a28:	01000084 	movi	r4,2
 8008a2c:	893fd21e 	bne	r17,r4,8008978 <__alt_mem_bufferram_out+0xf7e08978>
 8008a30:	11006317 	ldw	r4,396(r2)
 8008a34:	218cb03a 	or	r6,r4,r6
 8008a38:	11806315 	stw	r6,396(r2)
 8008a3c:	003fce06 	br	8008978 <__alt_mem_bufferram_out+0xf7e08978>
 8008a40:	18805304 	addi	r2,r3,332
 8008a44:	18805215 	stw	r2,328(r3)
 8008a48:	003fc606 	br	8008964 <__alt_mem_bufferram_out+0xf7e08964>
 8008a4c:	00bfffc4 	movi	r2,-1
 8008a50:	003fd006 	br	8008994 <__alt_mem_bufferram_out+0xf7e08994>

08008a54 <__call_exitprocs>:
 8008a54:	defff504 	addi	sp,sp,-44
 8008a58:	df000915 	stw	fp,36(sp)
 8008a5c:	dd400615 	stw	r21,24(sp)
 8008a60:	dc800315 	stw	r18,12(sp)
 8008a64:	dfc00a15 	stw	ra,40(sp)
 8008a68:	ddc00815 	stw	r23,32(sp)
 8008a6c:	dd800715 	stw	r22,28(sp)
 8008a70:	dd000515 	stw	r20,20(sp)
 8008a74:	dcc00415 	stw	r19,16(sp)
 8008a78:	dc400215 	stw	r17,8(sp)
 8008a7c:	dc000115 	stw	r16,4(sp)
 8008a80:	d9000015 	stw	r4,0(sp)
 8008a84:	2839883a 	mov	fp,r5
 8008a88:	04800044 	movi	r18,1
 8008a8c:	057fffc4 	movi	r21,-1
 8008a90:	00820074 	movhi	r2,2049
 8008a94:	10ac4e04 	addi	r2,r2,-20168
 8008a98:	12000017 	ldw	r8,0(r2)
 8008a9c:	45005217 	ldw	r20,328(r8)
 8008aa0:	44c05204 	addi	r19,r8,328
 8008aa4:	a0001c26 	beq	r20,zero,8008b18 <__call_exitprocs+0xc4>
 8008aa8:	a0800117 	ldw	r2,4(r20)
 8008aac:	15ffffc4 	addi	r23,r2,-1
 8008ab0:	b8000d16 	blt	r23,zero,8008ae8 <__call_exitprocs+0x94>
 8008ab4:	14000044 	addi	r16,r2,1
 8008ab8:	8421883a 	add	r16,r16,r16
 8008abc:	8421883a 	add	r16,r16,r16
 8008ac0:	84402004 	addi	r17,r16,128
 8008ac4:	a463883a 	add	r17,r20,r17
 8008ac8:	a421883a 	add	r16,r20,r16
 8008acc:	e0001e26 	beq	fp,zero,8008b48 <__call_exitprocs+0xf4>
 8008ad0:	80804017 	ldw	r2,256(r16)
 8008ad4:	e0801c26 	beq	fp,r2,8008b48 <__call_exitprocs+0xf4>
 8008ad8:	bdffffc4 	addi	r23,r23,-1
 8008adc:	843fff04 	addi	r16,r16,-4
 8008ae0:	8c7fff04 	addi	r17,r17,-4
 8008ae4:	bd7ff91e 	bne	r23,r21,8008acc <__alt_mem_bufferram_out+0xf7e08acc>
 8008ae8:	00820034 	movhi	r2,2048
 8008aec:	108b9904 	addi	r2,r2,11876
 8008af0:	10000926 	beq	r2,zero,8008b18 <__call_exitprocs+0xc4>
 8008af4:	a0800117 	ldw	r2,4(r20)
 8008af8:	1000301e 	bne	r2,zero,8008bbc <__call_exitprocs+0x168>
 8008afc:	a0800017 	ldw	r2,0(r20)
 8008b00:	10003226 	beq	r2,zero,8008bcc <__call_exitprocs+0x178>
 8008b04:	a009883a 	mov	r4,r20
 8008b08:	98800015 	stw	r2,0(r19)
 8008b0c:	8002e640 	call	8002e64 <free>
 8008b10:	9d000017 	ldw	r20,0(r19)
 8008b14:	a03fe41e 	bne	r20,zero,8008aa8 <__alt_mem_bufferram_out+0xf7e08aa8>
 8008b18:	dfc00a17 	ldw	ra,40(sp)
 8008b1c:	df000917 	ldw	fp,36(sp)
 8008b20:	ddc00817 	ldw	r23,32(sp)
 8008b24:	dd800717 	ldw	r22,28(sp)
 8008b28:	dd400617 	ldw	r21,24(sp)
 8008b2c:	dd000517 	ldw	r20,20(sp)
 8008b30:	dcc00417 	ldw	r19,16(sp)
 8008b34:	dc800317 	ldw	r18,12(sp)
 8008b38:	dc400217 	ldw	r17,8(sp)
 8008b3c:	dc000117 	ldw	r16,4(sp)
 8008b40:	dec00b04 	addi	sp,sp,44
 8008b44:	f800283a 	ret
 8008b48:	a0800117 	ldw	r2,4(r20)
 8008b4c:	80c00017 	ldw	r3,0(r16)
 8008b50:	10bfffc4 	addi	r2,r2,-1
 8008b54:	15c01426 	beq	r2,r23,8008ba8 <__call_exitprocs+0x154>
 8008b58:	80000015 	stw	zero,0(r16)
 8008b5c:	183fde26 	beq	r3,zero,8008ad8 <__alt_mem_bufferram_out+0xf7e08ad8>
 8008b60:	95c8983a 	sll	r4,r18,r23
 8008b64:	a0806217 	ldw	r2,392(r20)
 8008b68:	a5800117 	ldw	r22,4(r20)
 8008b6c:	2084703a 	and	r2,r4,r2
 8008b70:	10000b26 	beq	r2,zero,8008ba0 <__call_exitprocs+0x14c>
 8008b74:	a0806317 	ldw	r2,396(r20)
 8008b78:	2088703a 	and	r4,r4,r2
 8008b7c:	20000c1e 	bne	r4,zero,8008bb0 <__call_exitprocs+0x15c>
 8008b80:	89400017 	ldw	r5,0(r17)
 8008b84:	d9000017 	ldw	r4,0(sp)
 8008b88:	183ee83a 	callr	r3
 8008b8c:	a0800117 	ldw	r2,4(r20)
 8008b90:	15bfbf1e 	bne	r2,r22,8008a90 <__alt_mem_bufferram_out+0xf7e08a90>
 8008b94:	98800017 	ldw	r2,0(r19)
 8008b98:	153fcf26 	beq	r2,r20,8008ad8 <__alt_mem_bufferram_out+0xf7e08ad8>
 8008b9c:	003fbc06 	br	8008a90 <__alt_mem_bufferram_out+0xf7e08a90>
 8008ba0:	183ee83a 	callr	r3
 8008ba4:	003ff906 	br	8008b8c <__alt_mem_bufferram_out+0xf7e08b8c>
 8008ba8:	a5c00115 	stw	r23,4(r20)
 8008bac:	003feb06 	br	8008b5c <__alt_mem_bufferram_out+0xf7e08b5c>
 8008bb0:	89000017 	ldw	r4,0(r17)
 8008bb4:	183ee83a 	callr	r3
 8008bb8:	003ff406 	br	8008b8c <__alt_mem_bufferram_out+0xf7e08b8c>
 8008bbc:	a0800017 	ldw	r2,0(r20)
 8008bc0:	a027883a 	mov	r19,r20
 8008bc4:	1029883a 	mov	r20,r2
 8008bc8:	003fb606 	br	8008aa4 <__alt_mem_bufferram_out+0xf7e08aa4>
 8008bcc:	0005883a 	mov	r2,zero
 8008bd0:	003ffb06 	br	8008bc0 <__alt_mem_bufferram_out+0xf7e08bc0>
 8008bd4:	0201ffff 	0x201ffff
 8008bd8:	883a0000 	call	883a000 <_gp+0x826ef4>
 8008bdc:	010d0bff 	0x10d0bff
 8008be0:	01010002 	0x1010002
	...
 8008bec:	010d0bff 	0x10d0bff
 8008bf0:	01010004 	movi	r4,1024
 8008bf4:	00000100 	call	10 <__alt_mem_sdram-0x7fffff0>
 8008bf8:	00000000 	call	0 <__alt_mem_sdram-0x8000000>
 8008bfc:	01110bff 	0x1110bff
 8008c00:	01010004 	movi	r4,1024
 8008c04:	7f000105 	stb	fp,4(r15)
 8008c08:	007d0000 	call	7d000 <__alt_mem_sdram-0x7f83000>
 8008c0c:	00000000 	call	0 <__alt_mem_sdram-0x8000000>
 8008c10:	01883a00 	call	1883a0 <__alt_mem_sdram-0x7e77c60>
 8008c14:	08001f54 	ori	zero,at,125
